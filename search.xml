<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>react18学习笔记</title>
    <url>/posts/a1fbfde1/</url>
    <content><![CDATA[<p>为最新的 next.js 做点基础功课，学习 react18 的文档</p>
<p>记录一些对比之前不太一样的地方或者值得注意的地方</p>
<p>也会相对用的比较多的 Vue3，谈一些 React18 的理解</p>
<h1 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h1><p>react 特别强调函数要纯</p>
<p>不论是组件，还是对 state 的修改，一定要保持函数的纯粹性</p>
<p><a href="https://zh-hans.react.dev/learn/keeping-components-pure">https://zh-hans.react.dev/learn/keeping-components-pure</a></p>
<blockquote>
<p>一个函数只做一件事情<br>输入相同，则输出相同<br>纯函数仅仅执行计算，因此调用它们两次不会改变任何东西</p>
</blockquote>
<blockquote>
<p>React 假设你编写的所有组件都是纯函数</p>
</blockquote>
<blockquote>
<p>不应该改变任何用于组件渲染的输入。这包括 props、state 和 context。通过 state 来更新界面，而不要改变预先存在的对象。</p>
</blockquote>
<p>编写纯函数是编写 react 组件的前提条件</p>
<p>与函数的纯粹性相对的副作用，应该在 <code>事件处理</code> 或者 <code>useEffect</code> 中处理</p>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p><a href="https://zh-hans.react.dev/learn/keeping-components-pure#detecting-impure-calculations-with-strict-mode">https://zh-hans.react.dev/learn/keeping-components-pure#detecting-impure-calculations-with-strict-mode</a></p>
<p>React 提供了 “严格模式”，在严格模式下开发时，它将会调用每个组件函数两次。通过重复调用组件函数，严格模式有助于找到违反这些规则的组件。</p>
<p>引入严格模式，可以用 <code>&lt;React.StrictMode&gt;</code> 包裹根组件。一些框架会默认这样做。</p>
<h1 id="state-的快照理解和-Immer"><a href="#state-的快照理解和-Immer" class="headerlink" title="state 的快照理解和 Immer"></a>state 的快照理解和 Immer</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722834774421.png"></p>
<p>下面这个例子，点击一次并不会使 number 的结果从 0 变成 3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">          setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">          setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        +3</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为其等价于</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setNumber</span>(<span class="number">0</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">setNumber</span>(<span class="number">0</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">setNumber</span>(<span class="number">0</span> + <span class="number">1</span>);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  +<span class="number">3</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>哪怕用 setTimeout 包裹其中一个 setTimeout 也不会影响结果：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&#123;number&#125;&lt;<span class="regexp">/h1&gt;   /</span>/ <span class="number">0</span> -&gt; <span class="number">5</span></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setNumber</span>(number + <span class="number">5</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(number);  <span class="comment">// 0</span></span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;&#125;&gt;+<span class="number">5</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个 state 变量的值永远不会在一次渲染的内部发生变化， 即使其事件处理函数的代码是异步的。<br>React 会使 state 的值始终“固定”在一次渲染的各个事件处理函数内部。</p>
</blockquote>
<h2 id="渲染期间改变-state-的值"><a href="#渲染期间改变-state-的值" class="headerlink" title="渲染期间改变 state 的值"></a>渲染期间改变 state 的值</h2><p>将 <code>setNumber</code> 的参数写成一个 <code>纯函数</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setNumber((n) =&gt; n + 1);</span></span><br><span class="line"><span class="language-xml">          setNumber((n) =&gt; n + 1);</span></span><br><span class="line"><span class="language-xml">          setNumber((n) =&gt; n + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        +3</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一次渲染期间，会产生一个 state 的更新队列。例如上面的 state 更新队列可以表示为 <code>[(n) =&gt; n + 1,(n) =&gt; n + 1,(n) =&gt; n + 1]</code></p>
<h2 id="更新对象形式的-state"><a href="#更新对象形式的-state" class="headerlink" title="更新对象形式的 state"></a>更新对象形式的 state</h2><p><a href="https://zh-hans.react.dev/learn/updating-objects-in-state#treat-state-as-read-only">https://zh-hans.react.dev/learn/updating-objects-in-state#treat-state-as-read-only</a></p>
<p>如果 state 是一个对象，这个时候直接通过对象的引用关系去修改 state 是不正确的，这不会触发渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">position.<span class="property">x</span> = <span class="number">1</span>; <span class="comment">// 当你这样做时，就制造了一个 mutation, state 应该是只读的</span></span><br></pre></td></tr></table></figure>

<p>正确的写法应该是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setPosition</span>(&#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果对象复杂嵌套，这样书写也将变得非常繁琐，官方会推荐使用 <a href="https://github.com/immerjs/use-immer"><code>Immer</code></a></p>
<h2 id="使用-Immer"><a href="#使用-Immer" class="headerlink" title="使用 Immer"></a>使用 Immer</h2><p>Immer 有点像 Vue3 中的 <code>reactive</code>，其原理都是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy"><code>Proxy</code></a> 记录对 state 的修改，并创建出新的对象</p>
<p>安装：<code>npm install use-immer</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [position, updatePosition] = <span class="title function_">useImmer</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">updatePosition</span>(<span class="function">(<span class="params">draft</span>) =&gt;</span> (draft.<span class="property">x</span> = <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h2 id="更新数组形式的-state"><a href="#更新数组形式的-state" class="headerlink" title="更新数组形式的 state"></a>更新数组形式的 state</h2><p>不论是数组还是对象，都要保持 state 的只读性</p>
<p>在使用<code>setState</code>去更新数组的时候，应该避免使用会修改原数组的方法，比如 <code>push，unshift，pop，shift，splice，splice，arr[i] = ...，reverse，sort</code></p>
<p>如果使用 useImmer 声明 state，则可以使用所有的方法</p>
<h1 id="状态管理的原则"><a href="#状态管理的原则" class="headerlink" title="状态管理的原则"></a>状态管理的原则</h1><p>这一部分算是响应式框架通用的一些原则，遵守这些原则，在代码组织上会显得更加合理</p>
<h2 id="设计组件的思路"><a href="#设计组件的思路" class="headerlink" title="设计组件的思路"></a>设计组件的思路</h2><p><a href="https://zh-hans.react.dev/learn/reacting-to-input-with-state#thinking-about-ui-declaratively">https://zh-hans.react.dev/learn/reacting-to-input-with-state#thinking-about-ui-declaratively</a></p>
<ol>
<li>分析组件所有可能存在的状态</li>
<li>确定哪些因素可以改变这些状态，人为输入 or 计算机输入</li>
<li>通过代码表示状态，<code>useState</code> 或者 <code>ref</code></li>
<li>连接状态和事件处理函数</li>
</ol>
<h2 id="构建-state-的原则"><a href="#构建-state-的原则" class="headerlink" title="构建 state 的原则"></a>构建 state 的原则</h2><p><strong>合并相关联的 state</strong></p>
<p>如果一个动作往往要改动两个 state，两个 state 又相互独立，那么可以把两个 state 用一个对象包裹起来，每次都修改这个对象</p>
<p><strong>避免矛盾的 state</strong></p>
<p>用 一个 state 表示 <code>typing</code> <code>sending</code> <code>sent</code> 比 三个 state 表示 <code>isTyping</code> <code>isSending</code> <code>isSent</code> 要更好</p>
<p><strong>用尽可能少的 state</strong></p>
<p>相对来说，组件状态越少，组件维护起来的成本就越小。避免冗余的和重复的 state</p>
<p><a href="https://zh-hans.react.dev/learn/choosing-the-state-structure#don-t-mirror-props-in-state">没有必要把 props 镜像出一个 state</a></p>
<p><strong>避免深度嵌套的 state</strong></p>
<p>尽可能创建扁平化的 state</p>
<h2 id="组件之间的-state"><a href="#组件之间的-state" class="headerlink" title="组件之间的 state"></a>组件之间的 state</h2><p>如果子组件之间有相互影响的 state，那么最好把它交给父组件管理</p>
<p>对于独特的状态，都应该有单一的数据源（state），这个 state 可以被传递，但是最好不要复制</p>
<h2 id="组件内-state-的移除和保留"><a href="#组件内-state-的移除和保留" class="headerlink" title="组件内 state 的移除和保留"></a>组件内 state 的移除和保留</h2><p>和 vue 一样，react 也有特殊的属性 <code>key</code>，更新 <code>key</code> 就会强制重置组件</p>
<h2 id="统一管理状态和动作-编写-reducer"><a href="#统一管理状态和动作-编写-reducer" class="headerlink" title="统一管理状态和动作: 编写 reducer"></a>统一管理状态和动作: 编写 reducer</h2><p><a href="https://zh-hans.react.dev/learn/extracting-state-logic-into-a-reducer#step-2-write-a-reducer-function">https://zh-hans.react.dev/learn/extracting-state-logic-into-a-reducer#step-2-write-a-reducer-function</a></p>
<p>当组件的状态非常多的情况下，频繁地 setState 会让代码难以维护</p>
<p>如果能把更新状态的操作封装起来，用一个动作去表示，然后传入参数，就可以使引用更加清晰</p>
<p>reducer 是一个调度器，接收并执行不同的动作，返回新的结果</p>
<p>dispatch 用来发出动作，给出动作和计算新状态所需要的额外信息</p>
<blockquote>
<p>要将状态设置逻辑从事件处理程序移到 reducer 函数中，你需要：</p>
<ol>
<li>声明当前状态（tasks）作为第一个参数；</li>
<li>声明 action 对象作为第二个参数；</li>
<li>从 reducer 返回 下一个 状态（React 会将旧的状态设置为这个最新的状态）。</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span>(action) &#123;</span><br><span class="line">    <span class="attr">case</span>: <span class="string">&#x27;action A&#x27;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> stateA = &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="comment">// 一些因为 action A 而产生的变化</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stateA</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">case</span>: <span class="string">&#x27;action B&#x27;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> stateB = &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="comment">// 一些因为 action B 而产生的变化</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stateB</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>: &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;未知 action: &#x27;</span> + action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 useReducer 替代 useState</p>
<p><a href="https://zh-hans.react.dev/reference/react/useReducer#dispatch">https://zh-hans.react.dev/reference/react/useReducer#dispatch</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initStates);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">    <span class="comment">// new state</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 setState 相同，reducer 也必须是纯函数，在修改对象或者数组的状态时，也需要替换整个数组或者对象</p>
<p>可以用 <a href="https://github.com/immerjs/use-immer#useimmerreducer"><code>useImmerReducer</code></a> 替换 useReducer 来简化 reducer 的写法</p>
<h1 id="使用-context-深层传递参数"><a href="#使用-context-深层传递参数" class="headerlink" title="使用 context 深层传递参数"></a>使用 context 深层传递参数</h1><p>React 的 context 特性让我想到了 vue 的 provide 和 inject</p>
<p>两者都是解决组件参数传递层级过深的问题，只是写法不一样而已</p>
<h2 id="创建-context"><a href="#创建-context" class="headerlink" title="创建 context"></a>创建 context</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个context, context.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="父组件提供-context"><a href="#父组件提供-context" class="headerlink" title="父组件提供 context"></a>父组件提供 context</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Context</span> &#125; <span class="keyword">from</span> <span class="string">&quot;context.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Section</span>(<span class="params">&#123; level, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;level&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="子组件接收-context"><a href="#子组件接收-context" class="headerlink" title="子组件接收 context"></a>子组件接收 context</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Context</span> &#125; <span class="keyword">from</span> <span class="string">&quot;context.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> level = <span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">  <span class="keyword">return</span> (...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结合-useReducer-和-context，创建局部-store"><a href="#结合-useReducer-和-context，创建局部-store" class="headerlink" title="结合 useReducer 和 context，创建局部 store"></a>结合 useReducer 和 context，创建局部 store</h2><p><a href="https://zh-hans.react.dev/learn/scaling-up-with-reducer-and-context#combining-a-reducer-with-context">https://zh-hans.react.dev/learn/scaling-up-with-reducer-and-context#combining-a-reducer-with-context</a></p>
<p><code>useReducer</code> 可以将对数据的修改整理成 <code>action</code> ，通过 <code>dispatch</code> 一个动作更新状态</p>
<p><code>createContext</code> 提供了一个局部共享的状态</p>
<p>将 <code>useReducer</code> 所提供的 <code>state</code> 和 <code>dispatch函数</code> 通过 context 传递给子组件，那么子组件就可以通过 <code>action</code> 修改父组件提供的状态了</p>
<p>这样做的好处是</p>
<ol>
<li>将 reducer 封装组件，子组件不需要关心父组件动作的对状态的具体修改，只需要派发动作就可以修改父组件的状态</li>
<li>把 context 和 reducer 放在一起统一管理，使得负责构建 UI 的文件更加纯粹，视图和逻辑相分离</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppContext.jsx ---------------------------</span></span><br><span class="line"><span class="keyword">import</span> &#123; useReducer, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"><span class="comment">// reducer 并不需要暴露出去</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">AppContextProvider</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">AppContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">state</span>, <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">AppContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件, 提供 context ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppContextProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;AppContext.jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AppContextProvider</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">AppContextProvider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件, 消费 context --------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useAppContext</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useContext</span>(<span class="title class_">AppContext</span>);</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;useAppContext must be used within an AppProvider&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context; <span class="comment">// &#123; state, dispatch &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="react-里的-useRef"><a href="#react-里的-useRef" class="headerlink" title="react 里的 useRef"></a>react 里的 useRef</h1><blockquote>
<p>在我理解中的 Vue 和 React 框架设计的区别是，Vue 是响应性数据驱动更新视图，而 React 是状态驱动更新视图。<br>Vue 中的响应性数据：<code>ref()</code> 和 <code>reactive()</code> 声明的数据承载了表示状态的功能的同时也承载了可变性数据计算的功能。<br>React 的状态和可变性数据是分开的两个概念，<code>state</code> 只能由纯函数修改，并且具有不可变性，用来更新视图。<code>ref</code> 可以被随意修改，用来做与视图无关的计算<br>所以 React 中的 <code>ref</code> 并不会像 Vue 中的那样触发视图更新，只能用来承载组件内的数据计算或者 dom 操作</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击按钮后，打印结果会变成 1 ，但是视图依然是0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyRefComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ref.<span class="property">current</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ref.<span class="property">current</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;ref.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="useRef-的-dom-操作"><a href="#useRef-的-dom-操作" class="headerlink" title="useRef 的 dom 操作"></a>useRef 的 dom 操作</h2><p>在这方面，react 和 vue 的差别不大</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>聚焦输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-flushSync-更新-state"><a href="#使用-flushSync-更新-state" class="headerlink" title="使用 flushSync 更新 state"></a>使用 <a href="https://zh-hans.react.dev/reference/react-dom/flushSync">flushSync</a> 更新 state</h2><blockquote>
<p>flushSync 可以确保其回调函数内的更新立即反映到 dom 上<br>它和 <code>nextTick</code> 解决的问题相似：视图的更新是异步的，某些情况下希望在操作数据之后立刻对新的 dom 进行操作<br>如果回调内有大量的 dom 更新，将会出现性能问题</p>
</blockquote>
<p><a href="https://zh-hans.react.dev/learn/manipulating-the-dom-with-refs#flushing-state-updates-synchronously-with-flush-sync">官方给出的例子</a></p>
<h1 id="处理渲染本身产生的副作用：Effect"><a href="#处理渲染本身产生的副作用：Effect" class="headerlink" title="处理渲染本身产生的副作用：Effect"></a>处理渲染本身产生的副作用：Effect</h1><p>组件的状态变更会引起渲染，渲染会引起一些副作用，有些时候需要处理渲染引起的副作用，这就会用到 <code>useEffect</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;; <span class="comment">// 组件在重新执行effect之前，以及组件被卸载的时候，会调用这个清理函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      <span class="comment">/* 指定依赖 */</span></span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>useEffect</code> 的回调函数会在渲染的提交阶段（也就是屏幕更新渲染之后）执行，使用 <code>useEffect</code> 需要显式指定依赖<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722923497870.png"></p>
<p><a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#why-was-the-ref-omitted-from-the-dependency-array">指定依赖的数组中可以省略 ref</a></p>
<h2 id="开发环境中-Effect-的重复执行问题"><a href="#开发环境中-Effect-的重复执行问题" class="headerlink" title="开发环境中 Effect 的重复执行问题"></a>开发环境中 Effect 的重复执行问题</h2><p>重复执行 React 的调试行为，Effect 的双重执行有利于开发者检测自己的 Effect 是否有清理函数终止掉多余的副作用</p>
<p><a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">https://zh-hans.react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development</a></p>
<h2 id="Effect-常见用法"><a href="#Effect-常见用法" class="headerlink" title="Effect 常见用法"></a>Effect 常见用法</h2><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DataFetchingComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">setData</span>(data));</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组表示这个 effect 只在组件挂载时执行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data ? JSON.stringify(data) : &quot;Loading...&quot;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="订阅或监听事件"><a href="#订阅或监听事件" class="headerlink" title="订阅或监听事件"></a>订阅或监听事件</h3><p>在组件挂载时注册事件监听器或订阅某些服务，并在组件卸载时取消订阅。这些操作包括 WebSocket 连接、Redux store 订阅、浏览器事件（如键盘或鼠标事件）等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EventListenerComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Window resized&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理函数，组件卸载时移除事件监听器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, handleResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组，effect 只在挂载和卸载时执行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Resize the window and check the console.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定时器或者间隔"><a href="#定时器或者间隔" class="headerlink" title="定时器或者间隔"></a>定时器或者间隔</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TimerComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理函数，组件卸载时清除定时器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组，effect 只在挂载时执行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖变化"><a href="#依赖变化" class="headerlink" title="依赖变化"></a>依赖变化</h3><p>类似于 Vue 中的 watch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CounterComponent</span>(<span class="params">&#123; count &#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Count changed:&quot;</span>, count);</span><br><span class="line">  &#125;, [count]); <span class="comment">// 只有 count 改变时，effect 才会重新执行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手动操作-dom"><a href="#手动操作-dom" class="headerlink" title="手动操作 dom"></a>手动操作 dom</h3><p>利用了 <code>useEffect</code> 在组件<strong>挂载之后</strong>执行一次的特性</p>
<h2 id="不需要-Effect-的常见场景"><a href="#不需要-Effect-的常见场景" class="headerlink" title="不需要 Effect 的常见场景"></a>不需要 Effect 的常见场景</h2><p><a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect">https://zh-hans.react.dev/learn/you-might-not-need-an-effect</a></p>
<h2 id="Effect-的生命周期"><a href="#Effect-的生命周期" class="headerlink" title="Effect 的生命周期"></a>Effect 的生命周期</h2><p>在 React 中，React 希望开发者将 Effect 的生命周期与组件的生命周期区分开来看待</p>
<p>组件的生命周期：</p>
<p>挂载 -&gt; 更新 -&gt; 卸载</p>
<p>Effect 的生命周期：</p>
<p>启动（Effect 函数执行） -&gt; 依赖项更新（Effect 函数执行） -&gt; 停止（清理函数执行）</p>
<p>即使没有依赖项，Effect 也会按照这个生命周期执行（仅执行一次，因为没有依赖项，自然也没有更新）</p>
<h1 id="使用自定义-hook-抽离公共逻辑"><a href="#使用自定义-hook-抽离公共逻辑" class="headerlink" title="使用自定义 hook 抽离公共逻辑"></a>使用自定义 hook 抽离公共逻辑</h1><p>Vue3 中也有类似的例子，在组件 setup 的时候，执行一些方法（同样约定以 use 开头），为组件提供一些预先封装好的功能</p>
<p>这是 React 给出的一个自定义 hook，用来给组件提供一个封装好 <code>online</code> 和 <code>offline</code> 事件并给出 <code>isOnline</code> 返回值的例子</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useOnlineStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleOnline</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleOffline</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;online&quot;</span>, handleOnline);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;offline&quot;</span>, handleOffline);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;online&quot;</span>, handleOnline);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;offline&quot;</span>, handleOffline);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hook-和组件"><a href="#hook-和组件" class="headerlink" title="hook 和组件"></a>hook 和组件</h2><p>React 应用是由组件构成，而组件由内置或自定义 Hook 构成。</p>
<blockquote>
<p>React 约定<br>React 组件名称必须以大写字母开头<br>Hook 的名称必须以<code>use</code>开头，hook 可以返回任意值</p>
</blockquote>
<p><a href="https://zh-hans.react.dev/learn/reusing-logic-with-custom-hooks#should-all-functions-called-during-rendering-start-with-the-use-prefix">关于 hook 的命名原则，是否所有渲染期间的调用函数都应该以 use 开头</a></p>
<p>使用 hook 封装的公共方法，应该被视为 hook，并以<code>use</code>作以标识</p>
<h2 id="hook-的内容"><a href="#hook-的内容" class="headerlink" title="hook 的内容"></a>hook 的内容</h2><p>自定义 hook 虽然可以提供 state，但是其重点在于所封装的逻辑，同时必须保持每次调用 hook 的独立性</p>
<p>自定义 hook 必须是纯函数</p>
<blockquote>
<p>自定义 Hook 共享的只是状态逻辑而不是状态本身。对 Hook 的每个调用完全独立于对同一个 Hook 的其他调用。</p>
</blockquote>
<h1 id="学习-react18-过程中的术语概念"><a href="#学习-react18-过程中的术语概念" class="headerlink" title="学习 react18 过程中的术语概念"></a>学习 react18 过程中的术语概念</h1><p><code>state</code> &amp; <code>快照</code></p>
<p><code>纯函数</code> &amp; <code>effect</code></p>
<p><code>ref</code></p>
<p><code>prop</code> &amp; <code>context</code></p>
<p><code>hook</code></p>
<p><code>reducer</code> &amp; <code>dispatch</code> &amp; <code>action</code></p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个好玩的聊天机器人</title>
    <url>/posts/a590ccae/</url>
    <content><![CDATA[<h1 id="一些准备"><a href="#一些准备" class="headerlink" title="一些准备"></a>一些准备</h1><ul>
<li>服务器（运行机器人等物理设备）</li>
<li>机器人账号和登录状态（提供运行环境和 Api）</li>
<li>Api：OneBot 等（提供与机器人框架对接的方式以及功能开发接口）</li>
<li>机器人框架：Koishi，Nonebot，Mirai 等</li>
</ul>
<h1 id="Koishi"><a href="#Koishi" class="headerlink" title="Koishi"></a>Koishi</h1><p><a href="https://koishi.chat/zh-CN/">Koishi 是一个开源的跨平台机器人框架</a></p>
<p><a href="https://thwiki.cc/%E5%8F%A4%E6%98%8E%E5%9C%B0%E6%81%8B">Koishi 的意思是古明地恋，东方 Project 中的角色</a></p>
<h1 id="docker-部署一个对接-qq-的机器人"><a href="#docker-部署一个对接-qq-的机器人" class="headerlink" title="docker 部署一个对接 qq 的机器人"></a>docker 部署一个对接 qq 的机器人</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">bot:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">koishi</span></span><br><span class="line">    <span class="comment"># 如果服务器性能不佳，或者确认完全不需要puppeteer功能，那么可以不安装chromium</span></span><br><span class="line">    <span class="comment"># https://koishi.chat/zh-CN/manual/starter/docker.html#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.1ms.run/koishijs/koishi</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./koishi-data:/koishi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - &quot;5140:5140&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">qq:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">llonebot</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.1ms.run/initialencounter/llonebot:latest</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VNC_PASSWD=llonebotpass</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - &quot;7081:7081&quot; # login</span></span><br><span class="line">    <span class="comment">#   - &quot;3000:3000&quot; # http</span></span><br><span class="line">    <span class="comment">#   - &quot;3001:3001&quot; # ws</span></span><br></pre></td></tr></table></figure>

<h1 id="聊天机器人的控制台"><a href="#聊天机器人的控制台" class="headerlink" title="聊天机器人的控制台"></a>聊天机器人的控制台</h1><p>docker 服务成功运行后，浏览器访问云服务器的 5140 端口，可以看到控制台</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20250309133457188.png"></p>
<p>控制台提供了对 bot 的所有管理能力，比如运行状态，插件安装卸载，日志等</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>相关文档：<a href="https://koishi.chat/zh-CN/manual/usage/market.html">安装和配置插件</a></p>
<p>插件系统是 Koishi 的核心，bot 所有的功能都来自于插件</p>
<p>Koishi 的插件是以”koishi-plugin-“开头的 npm 包，安装插件的过程实际上也是安装了一个 npm 包</p>
<p>由于 Koishi 官方插件市场镜像长期没有更新，可以使用官方插件提供的社区镜像源</p>
<p>进入插件配置，找到分组：console 下的 market（插件市场本身也是插件，可以在插件配置中修改）</p>
<p>可以看到说明中会提供几个社区镜像，选择一个填入 search.endpoint 就可以了</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20250309151110390.png"></p>
<p>因为现在 Koishi 控制台部署在公网上，任何人都可以通过 ip:5140 访问到控制台，会有安全隐患</p>
<p>现在尝试在控制台种安装<code>auth</code>插件，这个插件可以给控制台提供用户和密码登录的功能</p>
<p>在插件市场里搜索<code>auth</code>，安装后进入插件配置页面</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1741506958020.png"></p>
<p>进入<code>auth</code>的插件配置，设置密码，点击右上角的三角形按钮启用插件</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1741507006519.png"></p>
<p>至此，完成了一次插件的安装和配置，以及控制台的密码登录设置</p>
<p>koishi 的插件大致可以分为以下几类：</p>
<ul>
<li>适配器（adapter），用来对接不同的 IM 平台或者 API 协议，如 qq、telegram、onebot 等</li>
<li>控制台（console）增强控制台功能的插件，如 auth 等</li>
<li>服务类，不直接在聊天中体现，但是给其他插件添加依赖，如 puppeteer，mysql，webdav 等</li>
<li>功能类，直接在聊天中体现，如 翻译、图片搜索、天气查询等</li>
</ul>
<h1 id="对接-qq"><a href="#对接-qq" class="headerlink" title="对接 qq"></a>对接 qq</h1><h2 id="登录-qq（llonebot）"><a href="#登录-qq（llonebot）" class="headerlink" title="登录 qq（llonebot）"></a>登录 qq（llonebot）</h2><p>在终端中输入 <code>docker logs llonebot</code> 可以获取二维码，用手机 qq 扫描后就可以登录</p>
<p>登录后，使用 vnc 连接到服务器地址的 7081 端口，输入密码<code>llonebotpassword</code>，可以对 docker 中的 qq 进行设置</p>
<p>这里我用的是 <a href="https://nxshell.github.io/">NxShell</a> 进行 vnc 连接</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/b1e6cc7f8ba18afa936a62e74be12ab0.png"></p>
<p>设置 ws 反向监听地址（不设置也没问题，可以在适配器里设置正向 ws 监听。不同的适配器会要求不同的监听方式）</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1738331009172.png"></p>
<h2 id="连接-onebot"><a href="#连接-onebot" class="headerlink" title="连接 onebot"></a>连接 onebot</h2><p>配置 adapter-onebot</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1738331334759.png"></p>
<p>启用插件之后，会发现控制台右下角变绿，并出现上下行流量的变化。表示已经配置成功，koishi 平台已经与 qq 建立联系</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1741508101862.png"></p>
<h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>如果是首次设置，可以进入依赖管理中更新官方插件版本</p>
<p>如果是连接问题，则需要考虑 qq 是否在有 llonebot 的客户端中登录，以及对接的 ip 和端口是否正确</p>
<p>如果是功能性插件出现错误，可以在控制台中查看日志</p>
<p>koishi 的插件的可用性和安全性并不可靠，有些甚至需要去查看源码，安装的时候需要仔细甄别</p>
<h1 id="使用插件市场里的插件丰富-bot-的功能"><a href="#使用插件市场里的插件丰富-bot-的功能" class="headerlink" title="使用插件市场里的插件丰富 bot 的功能"></a>使用插件市场里的插件丰富 bot 的功能</h1><p>接下来就可以进入插件市场挑选自己想加入的插件</p>
<p>在论坛中可以找到有趣的推荐，以及一些问题的解决方式</p>
<p><a href="https://forum.koishi.xyz/">Koishi 论坛</a></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/424a0512db78bd1815dc9d1b5be4d7c8.jpeg"></p>
<h1 id="开发自己的插件"><a href="#开发自己的插件" class="headerlink" title="开发自己的插件"></a>开发自己的插件</h1><p>插件市场虽然很丰富，但是很难完全满足自己的定制化需求，这个时候就需要自己开发插件了</p>
<p><a href="https://koishi.chat/zh-CN/guide/">插件开发文档</a></p>
<p>创建一个本地的 koishi 插件开发环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn create koishi</span><br><span class="line"></span><br><span class="line">yarn dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在工作区创建插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn setup [name]</span><br></pre></td></tr></table></figure>

<p>为插件添加依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn workspace koishi-plugin-[name] add [...deps]</span><br></pre></td></tr></table></figure>

<p>koishi 的开发工作区默认是 monorepo 的结构，创建好的插件在 external 文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">├── external</span><br><span class="line">│   └── example</span><br><span class="line">│       ├── src</span><br><span class="line">│       │   └── index.ts</span><br><span class="line">│       └── package.json</span><br><span class="line">├── koishi.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<p>开发完成后，可以<a href="https://koishi.chat/zh-CN/guide/develop/publish.html">把插件发布到插件市场上</a></p>
<p>在发布之前，为插件的 package.json 补充信息，所补充的信息会在插件市场中展示</p>
<p>其中比较值得注意的是 koishi 字段，这个字段会影响到插件配置页面的展示以及其所依赖的其他服务</p>
<p>在 koishi.service 中可以声明此插件所依赖的服务</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;koishi-plugin-example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contributors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 贡献者</span></span><br><span class="line">    <span class="string">&quot;Alice &lt;alice@gmail.com&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Bob &lt;bob@gmail.com&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span> <span class="comment">// 许可证</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com&quot;</span><span class="punctuation">,</span> <span class="comment">// 主页</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 源码仓库</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/alice/koishi-plugin-example.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;example&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 关键词</span></span><br><span class="line">  <span class="attr">&quot;peerDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;koishi&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;koishi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// 不同语言的插件描述</span></span><br><span class="line">      <span class="attr">&quot;en&quot;</span><span class="punctuation">:</span> <span class="string">&quot;English Description&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;zh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中文描述&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;database&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 必需的服务</span></span><br><span class="line">      <span class="attr">&quot;optional&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;assets&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 可选的服务</span></span><br><span class="line">      <span class="attr">&quot;implements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dialogue&quot;</span><span class="punctuation">]</span> <span class="comment">// 实现的服务</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="koishi-插件开发的基础概念"><a href="#koishi-插件开发的基础概念" class="headerlink" title="koishi 插件开发的基础概念"></a>koishi 插件开发的基础概念</h2><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h3 id="参数（配置构型）"><a href="#参数（配置构型）" class="headerlink" title="参数（配置构型）"></a>参数（配置构型）</h3><h3 id="消息元素"><a href="#消息元素" class="headerlink" title="消息元素"></a>消息元素</h3><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h3 id="服务和依赖"><a href="#服务和依赖" class="headerlink" title="服务和依赖"></a>服务和依赖</h3><h2 id="获取表情图并存到云盘的插件"><a href="#获取表情图并存到云盘的插件" class="headerlink" title="获取表情图并存到云盘的插件"></a>获取表情图并存到云盘的插件</h2><h3 id="动机和期望"><a href="#动机和期望" class="headerlink" title="动机和期望"></a>动机和期望</h3><p>由于 qq 和微信的某次更新，无法直接保存其他人发送的表情包，所以我就想把自己的表情图独立于平台，保存到自己的网盘上，可以在任何设备任何软件上使用。</p>
<p>可以说是盗图的终极方案</p>
<p><strong>期望</strong></p>
<p>我想象中的这个插件的用法大概是这样的：</p>
<ol>
<li>我看到了一张表情图，摩拳擦掌想塞进自己的口袋</li>
<li>我把这张表情图发给 bot，（用指令）告诉 bot，把这张图片存下来</li>
<li>bot 获取到这张图片，并且对图片做统一处理（尺寸，质量，格式）</li>
<li>将处理好的图片保存在云盘上，云盘同步设备文件夹。</li>
<li>使用的时候直接选择图片发送，图片不会被放大，动画效果不会丢失</li>
<li>可以存官方表情图，也可以存自己的表情图</li>
</ol>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>通过引用消息告诉 bot 要存哪张图片：session.quote.elements</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">quote.<span class="property">elements</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">type</span> === <span class="string">&quot;img&quot;</span>) &#123;</span><br><span class="line">    images.<span class="title function_">push</span>(el.<span class="property">attrs</span> <span class="keyword">as</span> <span class="title class_">ImageElement</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">type</span> === <span class="string">&quot;mface&quot;</span>) &#123;</span><br><span class="line">    mfaces.<span class="title function_">push</span>(el.<span class="property">attrs</span> <span class="keyword">as</span> <span class="title class_">MfaceElement</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注册指令，然后在控制台中配置别名，增加参数可以指定存储到云盘的某个子文件夹</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ctx</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;save-sticker &lt;folder:text&gt;&quot;</span>, <span class="string">&quot;获取表情包&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore-next-line</span></span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>, <span class="comment">// 隐藏指令，不会在help指令中被发送</span></span><br><span class="line">    <span class="attr">captureQuote</span>: <span class="literal">false</span>, <span class="comment">// 运行指令避免捕获引用内容 https://github.com/koishijs/koishi/issues/1432</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">alias</span>(<span class="string">&quot;盗图&quot;</span>, <span class="string">&quot;保存图片&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用 webdav 的方式连接云盘（坚果云），并将图片上传到云盘</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入纯ESM包</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadWebDAV</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> webdav = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;webdav&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(webdav);</span><br><span class="line">  <span class="keyword">return</span> webdav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; createClient &#125; = <span class="keyword">await</span> <span class="title function_">loadWebDAV</span>();</span><br><span class="line"><span class="comment">// 创建webdav客户端</span></span><br><span class="line"><span class="keyword">const</span> webdavClient = <span class="title function_">createClient</span>(webDavUrl, &#123;</span><br><span class="line">  <span class="attr">username</span>: ctx.<span class="property">config</span>.<span class="property">webdavUsername</span>,</span><br><span class="line">  <span class="attr">password</span>: ctx.<span class="property">config</span>.<span class="property">webdavPassword</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将图片处理成特定格式，默认 gif，并且将宽度固定到 300px，提供两个配置项，可以在控制台中配置</p>
<p>为什么要处理成 gif 和 300px</p>
<ol>
<li>透明度：gif 可以保留表情图的透明度，同时不会变黑（经测试 png 会出现背景变黑的问题，qq 应该不支持 png 的复杂透明度）</li>
<li>gif 是官方表情包（mface）的格式</li>
<li>gif 支持动图</li>
<li>300 像素是比较通用的尺寸，发送后不会被放大，不太清楚 qq 和微信识别表情包的逻辑，经过尝试得到的结果</li>
</ol>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://oss.homu.space/imgs/2569b559fd71d9a8af6435c729b6d283.jpg"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">type</span> <span class="title class_">Context</span>, <span class="title class_">Random</span>, <span class="title class_">Schema</span>, <span class="title class_">Session</span> &#125; <span class="keyword">from</span> <span class="string">&quot;koishi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sharp <span class="keyword">from</span> <span class="string">&quot;sharp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; imageSize &#125; <span class="keyword">from</span> <span class="string">&quot;image-size&quot;</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadWebDAV</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> webdav = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;webdav&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(webdav);</span><br><span class="line">  <span class="comment">// 这里可以使用 webdav</span></span><br><span class="line">  <span class="keyword">return</span> webdav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadImageType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> imageType = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;image-type&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(imageType);</span><br><span class="line">  <span class="keyword">return</span> imageType.<span class="property">default</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;webdav-stickers&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> usage = <span class="string">`</span></span><br><span class="line"><span class="string">### 你这图很不错，可惜下一秒就是我的了！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个插件可以把你看上的表情图片保存到支持 WebDAV 的云盘上，通过云盘，你可以将图片分享给其他朋友，或者同步到自己的其他设备上。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://oss.homu.space/imgs/2569b559fd71d9a8af6435c729b6d283.jpg&quot; target=&quot;_blank&quot;&gt;使用效果&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用方法：</span></span><br><span class="line"><span class="string">1. 从支持 WebDAV 的云盘（如坚果云等）获取 WebDAV 地址和授权密码，并设置一个存放图片的根目录</span></span><br><span class="line"><span class="string">2. 配置允许使用该插件的用户</span></span><br><span class="line"><span class="string">3. 为命令[设置别名](/commands/save-sticker)</span></span><br><span class="line"><span class="string">4. 把表情图发送给bot可以接收到的地方。引用表情图，使用命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">特性：</span></span><br><span class="line"><span class="string">- 支持批量保存和动图保存</span></span><br><span class="line"><span class="string">- 静态图片统一使用了png格式（支持透明背景）</span></span><br><span class="line"><span class="string">- 可设置表情包的最大宽度，避免了表情包尺寸很大的情况</span></span><br><span class="line"><span class="string">- 支持保存mface表情（官方表情图片）</span></span><br><span class="line"><span class="string">- 可以通过 folder 参数，将表情图保存到云盘的不同文件夹中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> inject = [<span class="string">&quot;http&quot;</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">  <span class="attr">webdavUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">webdavUsername</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">webdavPassword</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">rootFolder</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">allowUsers</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="comment">// triggerWords: string[];</span></span><br><span class="line">  <span class="attr">successMessage</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">stickerWidth</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">staticImageFormat</span>: <span class="string">&quot;png&quot;</span> | <span class="string">&quot;gif&quot;</span> | <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImageElement</span> &#123;</span><br><span class="line">  <span class="attr">file</span>: <span class="built_in">string</span>; <span class="comment">// 文件名</span></span><br><span class="line">  <span class="attr">fileSize</span>: <span class="built_in">string</span>; <span class="comment">// 文件大小</span></span><br><span class="line">  <span class="attr">src</span>: <span class="built_in">string</span>; <span class="comment">// 文件地址</span></span><br><span class="line">  <span class="attr">subType</span>: <span class="built_in">string</span>; <span class="comment">// 文件类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MfaceElement</span> &#123;</span><br><span class="line">  <span class="attr">emojiId</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">emojiPackageId</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">key</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">summary</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Config</span>: <span class="title class_">Schema</span>&lt;<span class="title class_">Config</span>&gt; = <span class="title class_">Schema</span>.<span class="title function_">intersect</span>([</span><br><span class="line">  <span class="title class_">Schema</span>.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">webdavUrl</span>: <span class="title class_">Schema</span>.<span class="title function_">string</span>().<span class="title function_">required</span>().<span class="title function_">description</span>(<span class="string">&quot;WebDAV 服务器地址&quot;</span>),</span><br><span class="line">    <span class="attr">webdavUsername</span>: <span class="title class_">Schema</span>.<span class="title function_">string</span>().<span class="title function_">required</span>().<span class="title function_">description</span>(<span class="string">&quot;WebDAV 用户名&quot;</span>),</span><br><span class="line">    <span class="attr">webdavPassword</span>: <span class="title class_">Schema</span>.<span class="title function_">string</span>()</span><br><span class="line">      .<span class="title function_">role</span>(<span class="string">&quot;secret&quot;</span>)</span><br><span class="line">      .<span class="title function_">required</span>()</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;WebDAV 授权密码&quot;</span>),</span><br><span class="line">    <span class="attr">rootFolder</span>: <span class="title class_">Schema</span>.<span class="title function_">string</span>()</span><br><span class="line">      .<span class="title function_">default</span>(<span class="string">&quot;Stickers&quot;</span>)</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;设定一个存放图片的根目录&quot;</span>),</span><br><span class="line">  &#125;).<span class="title function_">description</span>(<span class="string">&quot;WebDAV 配置&quot;</span>),</span><br><span class="line">  <span class="title class_">Schema</span>.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">allowUsers</span>: <span class="title class_">Schema</span>.<span class="title function_">array</span>(<span class="title class_">Schema</span>.<span class="title function_">string</span>())</span><br><span class="line">      .<span class="title function_">required</span>()</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;允许使用该插件的用户（qq号）&quot;</span>),</span><br><span class="line">    <span class="attr">successMessage</span>: <span class="title class_">Schema</span>.<span class="title function_">array</span>(<span class="title class_">Schema</span>.<span class="title function_">string</span>())</span><br><span class="line">      .<span class="title function_">default</span>([<span class="string">&quot;搞定！&quot;</span>])</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;获取成功后的消息&quot;</span>),</span><br><span class="line">  &#125;).<span class="title function_">description</span>(<span class="string">&quot;用户配置&quot;</span>),</span><br><span class="line">  <span class="title class_">Schema</span>.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">stickerWidth</span>: <span class="title class_">Schema</span>.<span class="title function_">number</span>()</span><br><span class="line">      .<span class="title function_">default</span>(<span class="number">300</span>)</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;表情包的宽度，默认300px，超过尺寸的静态图片会被压缩&quot;</span>),</span><br><span class="line">    <span class="attr">staticImageFormat</span>: <span class="title class_">Schema</span>.<span class="title function_">union</span>([<span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>])</span><br><span class="line">      .<span class="title function_">default</span>(<span class="string">&quot;gif&quot;</span>)</span><br><span class="line">      .<span class="title function_">description</span>(<span class="string">&quot;静态图片的格式，默认gif，不会处理mface&quot;</span>),</span><br><span class="line">  &#125;).<span class="title function_">description</span>(<span class="string">&quot;图片配置&quot;</span>),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params"><span class="attr">ctx</span>: <span class="title class_">Context</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createClient &#125; = <span class="keyword">await</span> <span class="title function_">loadWebDAV</span>();</span><br><span class="line">  <span class="keyword">const</span> imageType = <span class="keyword">await</span> <span class="title function_">loadImageType</span>();</span><br><span class="line">  ctx.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;成功加载 imageType 和 webdav&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> webDavUrl = ctx.<span class="property">config</span>.<span class="property">webdavUrl</span>.<span class="title function_">endsWith</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    ? ctx.<span class="property">config</span>.<span class="property">webdavUrl</span></span><br><span class="line">    : ctx.<span class="property">config</span>.<span class="property">webdavUrl</span> + <span class="string">&quot;/&quot;</span> + ctx.<span class="property">config</span>.<span class="property">rootFolder</span>;</span><br><span class="line">  ctx.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;webDavUrl: &quot;</span> + webDavUrl);</span><br><span class="line">  <span class="keyword">const</span> webdavClient = <span class="title function_">createClient</span>(webDavUrl, &#123;</span><br><span class="line">    <span class="attr">username</span>: ctx.<span class="property">config</span>.<span class="property">webdavUsername</span>,</span><br><span class="line">    <span class="attr">password</span>: ctx.<span class="property">config</span>.<span class="property">webdavPassword</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveImage</span>(<span class="params"><span class="attr">image</span>: <span class="title class_">ImageElement</span>, folder?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (folder &amp;&amp; !(<span class="keyword">await</span> webdavClient.<span class="title function_">exists</span>(<span class="string">`/<span class="subst">$&#123;folder&#125;</span>`</span>))) &#123;</span><br><span class="line">      <span class="keyword">await</span> webdavClient.<span class="title function_">createDirectory</span>(<span class="string">`/<span class="subst">$&#123;folder&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="keyword">await</span> ctx.<span class="property">http</span>.<span class="title function_">get</span>(image.<span class="property">src</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测文件是否是gif</span></span><br><span class="line">    <span class="keyword">const</span> fileType = <span class="keyword">await</span> <span class="title function_">imageType</span>(buffer);</span><br><span class="line">    ctx.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">`文件类型: <span class="subst">$&#123;fileType.ext&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">filename</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileType.<span class="property">ext</span> === <span class="string">&quot;gif&quot;</span>) &#123;</span><br><span class="line">      filename = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.gif`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      filename = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.<span class="subst">$&#123;ctx.config.staticImageFormat&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">const</span> size = <span class="title function_">imageSize</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer));</span><br><span class="line">      <span class="keyword">if</span> (size.<span class="property">width</span> &gt; ctx.<span class="property">config</span>.<span class="property">stickerWidth</span>) &#123;</span><br><span class="line">        buffer = <span class="keyword">await</span> <span class="title function_">sharp</span>(buffer)</span><br><span class="line">          .<span class="title function_">resize</span>(&#123; <span class="attr">width</span>: ctx.<span class="property">config</span>.<span class="property">stickerWidth</span> &#125;)</span><br><span class="line">          .<span class="title function_">toFormat</span>(ctx.<span class="property">config</span>.<span class="property">staticImageFormat</span>)</span><br><span class="line">          .<span class="title function_">toBuffer</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer = <span class="keyword">await</span> <span class="title function_">sharp</span>(buffer)</span><br><span class="line">          .<span class="title function_">toFormat</span>(ctx.<span class="property">config</span>.<span class="property">staticImageFormat</span>)</span><br><span class="line">          .<span class="title function_">toBuffer</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果图片大于设定大小，并且不是gif，则压缩</span></span><br><span class="line">    <span class="keyword">const</span> savePath = <span class="string">`<span class="subst">$&#123;folder ? folder + <span class="string">&quot;/&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span><span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> webdavClient.<span class="title function_">putFileContents</span>(savePath, buffer, &#123;</span><br><span class="line">      <span class="attr">overwrite</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">logger</span>.<span class="title function_">info</span>(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;filename&#125;</span> 已保存至 <span class="subst">$&#123;ctx.config.webdavUrl&#125;</span>/<span class="subst">$&#123;ctx.config.rootFolder&#125;</span>/<span class="subst">$&#123;savePath&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveMface</span>(<span class="params"><span class="attr">mface</span>: <span class="title class_">MfaceElement</span>, folder?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (folder &amp;&amp; !(<span class="keyword">await</span> webdavClient.<span class="title function_">exists</span>(<span class="string">`/<span class="subst">$&#123;folder&#125;</span>`</span>))) &#123;</span><br><span class="line">      <span class="keyword">await</span> webdavClient.<span class="title function_">createDirectory</span>(<span class="string">`/<span class="subst">$&#123;folder&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> extension = mface.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>).<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">const</span> filename = <span class="string">`<span class="subst">$&#123;mface.emojiPackageId&#125;</span>-<span class="subst">$&#123;mface.summary&#125;</span>.<span class="subst">$&#123;extension&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> savePath = <span class="string">`<span class="subst">$&#123;folder ? folder + <span class="string">&quot;/&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span><span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="keyword">await</span> ctx.<span class="property">http</span>.<span class="title function_">get</span>(mface.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">await</span> webdavClient.<span class="title function_">putFileContents</span>(savePath, buffer, &#123;</span><br><span class="line">      <span class="attr">overwrite</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">logger</span>.<span class="title function_">info</span>(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;filename&#125;</span> 已保存至 <span class="subst">$&#123;ctx.config.webdavUrl&#125;</span>/<span class="subst">$&#123;ctx.config.rootFolder&#125;</span>/<span class="subst">$&#123;savePath&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx</span><br><span class="line">    .<span class="title function_">user</span>(...ctx.<span class="property">config</span>.<span class="property">allowUsers</span>)</span><br><span class="line">    .<span class="title function_">command</span>(<span class="string">&quot;save-sticker &lt;folder:text&gt;&quot;</span>, <span class="string">&quot;获取表情包&quot;</span>, &#123;</span><br><span class="line">      <span class="comment">// @ts-ignore-next-line</span></span><br><span class="line">      <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">captureQuote</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">alias</span>(<span class="string">&quot;盗图&quot;</span>, <span class="string">&quot;保存图片&quot;</span>)</span><br><span class="line">    .<span class="title function_">action</span>(<span class="title function_">async</span> (&#123; session &#125;, folder) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> quote = session.<span class="property">quote</span>;</span><br><span class="line">      ctx.<span class="property">logger</span>.<span class="title function_">info</span>(quote, <span class="string">&quot;quote&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (!quote) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">images</span>: <span class="title class_">Array</span>&lt;<span class="title class_">ImageElement</span>&gt; = [];</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">mfaces</span>: <span class="title class_">Array</span>&lt;<span class="title class_">MfaceElement</span>&gt; = [];</span><br><span class="line"></span><br><span class="line">      quote.<span class="property">elements</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (el.<span class="property">type</span> === <span class="string">&quot;img&quot;</span>) &#123;</span><br><span class="line">          images.<span class="title function_">push</span>(el.<span class="property">attrs</span> <span class="keyword">as</span> <span class="title class_">ImageElement</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (el.<span class="property">type</span> === <span class="string">&quot;mface&quot;</span>) &#123;</span><br><span class="line">          mfaces.<span class="title function_">push</span>(el.<span class="property">attrs</span> <span class="keyword">as</span> <span class="title class_">MfaceElement</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (images.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; mfaces.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        session.<span class="title function_">send</span>(<span class="string">&quot;引用的消息里没有图片吧&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ctx.<span class="property">logger</span>.<span class="title function_">info</span>(&#123; images, mfaces, folder &#125;);</span><br><span class="line">      <span class="keyword">const</span> promises = [</span><br><span class="line">        ...images.<span class="title function_">map</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> <span class="title function_">saveImage</span>(image, folder)),</span><br><span class="line">        ...mfaces.<span class="title function_">map</span>(<span class="function">(<span class="params">mface</span>) =&gt;</span> <span class="title function_">saveMface</span>(mface, folder)),</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rejected = results.<span class="title function_">filter</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">status</span> === <span class="string">&quot;rejected&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> fulfilled = results.<span class="title function_">filter</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">status</span> === <span class="string">&quot;fulfilled&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fulfilled.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          session.<span class="title function_">send</span>(<span class="string">&quot;没有拿到图片，好像出了点问题...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fulfilled.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; rejected.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          session.<span class="title function_">send</span>(<span class="string">&quot;部分图片没有拿到...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          session.<span class="title function_">send</span>(<span class="title class_">Random</span>.<span class="title function_">pick</span>(ctx.<span class="property">config</span>.<span class="property">successMessage</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rejected.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          ctx.<span class="property">logger</span>.<span class="title function_">error</span>(rejected.<span class="title function_">map</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">reason</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽签"><a href="#抽签" class="headerlink" title="抽签"></a>抽签</h2>]]></content>
      <categories>
        <category>魔女的帽子</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu部署hexo记录</title>
    <url>/posts/6a725e45/</url>
    <content><![CDATA[<h2 id="首先庆祝一下"><a href="#首先庆祝一下" class="headerlink" title="首先庆祝一下~~"></a>首先庆祝一下~~</h2><p>吼姆小行星终于有了<a href="https://space.shirofune.cn/">自己的域名</a>！<br>不需要再翻墙访问<a href="https://homuxing.github.io/">原地址</a><br>GitHub Page 的项目会同步更新… 所以哪个都一样啦<br>国内的话还是推荐访问<a href="https://space.shirofune.cn/">https://space.shirofune.cn/</a>哦<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/kiyo.png"></p>
<h2 id="记录-hexo-部署流程"><a href="#记录-hexo-部署流程" class="headerlink" title="记录 hexo 部署流程"></a>记录 hexo 部署流程</h2><p>github.io 访问起来很慢…所以萌生了想要把博客放在国内服务器上的想法<br>购买服务器…购买域名…备案…尤其是备案，真的好麻烦<br>但是以上都是很简单的<br>接下来的部署充满了摸索的过程…<br>我不怎么会 Nginx 和 Linux…<br>这些基本都是我通过搜索引擎得到的<br>这个过程学到了很多东西，更重要的是利用 git 上线项目的简单流程<br>做的配置都是最低需要的（大概）毕竟用的是 root 权限…<br>如果有错误..欢迎指出，在留言板或者评论区都可以~<br>感激不尽！</p>
<h2 id="Ubuntu-Git-项目部署流程"><a href="#Ubuntu-Git-项目部署流程" class="headerlink" title="Ubuntu-Git 项目部署流程"></a>Ubuntu-Git 项目部署流程</h2><ul>
<li>更新系统</li>
<li>安装 nginx 网页服务器</li>
<li>安装 git 版本控制</li>
<li>安装 node（通过 nvm）</li>
<li>nginx 配置监听文件目录</li>
<li>创建一个 git 空仓库</li>
<li>配置 git 空仓库（远程仓库）</li>
<li>配置 git/hook</li>
<li>配置 ssh 免密提交</li>
<li>nginx 配置 Https</li>
<li>nginx 其他配置（如二级域名）</li>
<li>配置 hexo</li>
</ul>
<h2 id="命令操作记录"><a href="#命令操作记录" class="headerlink" title="命令操作记录"></a>命令操作记录</h2><h3 id="首先，更新服务器套件"><a href="#首先，更新服务器套件" class="headerlink" title="首先，更新服务器套件"></a>首先，更新服务器套件</h3><p>apt-get 是 ubuntu 的包管理工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update -y &amp;&amp; apt-get upgrade -y</span><br></pre></td></tr></table></figure>

<h3 id="安装-nginx-网页服务器"><a href="#安装-nginx-网页服务器" class="headerlink" title="安装 nginx 网页服务器"></a>安装 nginx 网页服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx -y</span><br></pre></td></tr></table></figure>

<p>此时，复制自己的公网 IP，放在浏览器地址栏，应该可以看到 Nginx 的默认页面<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/welcome-to-nginx.png"/><br>如果不能(例如阿里云 ECS)，注意配置一下服务器安全组<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/aliyunECS-safe-config.png"/></p>
<h3 id="安装-git-版本控制"><a href="#安装-git-版本控制" class="headerlink" title="安装 git 版本控制"></a>安装 git 版本控制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git -y</span><br></pre></td></tr></table></figure>

<h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><p>nvm 是一个 node 版本管理工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装完成之后重启一下终端<br>验证安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure>

<h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 14.17.6</span><br></pre></td></tr></table></figure>

<p>验证 node 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="创建一个仓库目录"><a href="#创建一个仓库目录" class="headerlink" title="创建一个仓库目录"></a>创建一个仓库目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/repo/</span><br><span class="line"><span class="built_in">cd</span> /var/repo/</span><br><span class="line">git init --bare hexo-blog.git</span><br></pre></td></tr></table></figure>

<h3 id="配置-Nginx-托管目录"><a href="#配置-Nginx-托管目录" class="headerlink" title="配置 Nginx 托管目录"></a>配置 Nginx 托管目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建已给Nginx</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/space/hexo</span><br><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>然后将会打开 Vim<br>键入 i 进入编辑模式</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到server</span></span><br><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server</span><br><span class="line"></span><br><span class="line">  root /var/space/hexo <span class="comment"># 需要修改的位置</span></span><br><span class="line">  index index.html index.htm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ESC 退出编辑模式<br>shift+: wq 保存编辑<br>重启 Nginx 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service nginx restart</span><br></pre></td></tr></table></figure>

<h3 id="创建-git-钩子"><a href="#创建-git-钩子" class="headerlink" title="创建 git 钩子"></a>创建 git 钩子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hooks目录下创建一个新的钩子文件</span></span><br><span class="line">vim /var/repo/hexo-blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>在这个文件里添加两行代码<br>指定 git 工作树（源代码）和 git 目录（配置文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git --work-tree=/var/space/hexo --git-dir=/var/repo/hexo-blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>保存退出，将该文件设置为可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /var/repo/hexo-blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<h3 id="配置-ssh-免密提交"><a href="#配置-ssh-免密提交" class="headerlink" title="配置 ssh 免密提交"></a>配置 ssh 免密提交</h3><p>在/root/.ssh 中 有一个 authorized_keys 的文件，修改它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/.ssh</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure>

<p>在自己的电脑上，生成 ssh_key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>一般在 C:\Users\用户名\.ssh 文件中<br>打开.pub 文件，将其中的内容复制进去即可</p>
<h3 id="Nignx-配置-HTTPS-和域名前缀"><a href="#Nignx-配置-HTTPS-和域名前缀" class="headerlink" title="Nignx 配置 HTTPS 和域名前缀"></a>Nignx 配置 HTTPS 和域名前缀</h3><p>在域名解析控制台，找到自己的证书详情页面<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/domain-ssh.jpg" alt="下载ssl证书"><br>解压后，会有一个 Nginx 的文件夹，里面有两个文件<br>把这两个文件放到服务器的<code>/etc/nginx/conf</code>目录下<br>配置 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>找到 server_name</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment"># 同时记得在安全组中打开443端口</span></span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="comment"># 设定域名和域名前缀</span></span><br><span class="line">	<span class="attribute">server_name</span> space.shirofune.cn;</span><br><span class="line">  <span class="comment"># 开启ssl</span></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="comment"># 设置证书和密钥</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span> /etc/nginx/conf/1_space.shirofune.cn_bundle.crt;</span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> /etc/nginx/conf/2_space.shirofune.cn.key;</span><br><span class="line">	<span class="comment"># 指定文件目录</span></span><br><span class="line">	<span class="attribute">root</span> /var/space/hexo;</span><br><span class="line">	<span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">	<span class="section">location</span> / &#123;</span><br><span class="line">		<span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment"># 重定向80端口</span></span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> shirofune.cn;</span><br><span class="line">	<span class="comment">#将请求转成https</span></span><br><span class="line">	<span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地配置-hexo"><a href="#本地配置-hexo" class="headerlink" title="本地配置 hexo"></a>本地配置 hexo</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="comment"># 地址1</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">root@ip:/var/repo/hexo-blog.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="补充一些"><a href="#补充一些" class="headerlink" title="补充一些"></a>补充一些</h2><h3 id="Nginx-设置自定义-404-页面"><a href="#Nginx-设置自定义-404-页面" class="headerlink" title="Nginx 设置自定义 404 页面"></a>Nginx 设置自定义 404 页面</h3><p>博客项目托管到服务器上之后发现了一个小 bug<br>404 页面是 Nginx 默认的那个白底黑字儿 404<br>好丑啊<br>所以找了找设置 Nginx 自定义 404 界面的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="comment"># http中添加</span></span><br><span class="line"><span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure>

<p>然后设置 server，指定 404 错误页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available</span><br><span class="line">vi default</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = /<span class="number">404</span>.html;</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service nginx restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>吼姆小行星环境工程</title>
    <url>/posts/671cb70a/</url>
    <content><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>主题是<a href="https://butterfly.js.org/">butterfly</a></p>
<h2 id="持续更新"><a href="#持续更新" class="headerlink" title="持续更新"></a>持续更新</h2><p>自定义博客样式是一个渐进的过程…<br>这篇文章主要用来记录美化网站样式的过程<br>有好的建议欢迎留言~</p>
<h2 id="修改主题源文件"><a href="#修改主题源文件" class="headerlink" title="修改主题源文件"></a>修改主题源文件</h2><h3 id="修改卡片颜色"><a href="#修改卡片颜色" class="headerlink" title="修改卡片颜色"></a>修改卡片颜色</h3><p>theme/butterfly/source/css/var.styl</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- $card-bg = $white</span></span><br><span class="line"><span class="addition">+ $card-bg = rgba(255, 255, 255, .75)</span></span><br></pre></td></tr></table></figure>

<h3 id="修改-hover-颜色"><a href="#修改-hover-颜色" class="headerlink" title="修改 hover 颜色"></a>修改 hover 颜色</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- $text-bg-hover = $theme-color</span></span><br><span class="line"><span class="addition">+ $text-bg-hover = #00c4b6</span></span><br></pre></td></tr></table></figure>

<h2 id="修改夜间模式卡片颜色"><a href="#修改夜间模式卡片颜色" class="headerlink" title="修改夜间模式卡片颜色"></a>修改夜间模式卡片颜色</h2><p>theme/butterfly/source/css/_mode/darkmode.styl</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- --card-bg: alpha(#121212, .7)</span></span><br><span class="line"><span class="addition">+ --card-bg: alpha(#121212, .7)</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义-CSS"><a href="#自定义-CSS" class="headerlink" title="自定义 CSS"></a>自定义 CSS</h2><p>自定义 css 的方法</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.butterfly.yml</span></span><br><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/static/css/custom.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>custom.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, <span class="number">#fff</span>, transparent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-class">.framework-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 右侧按钮 */</span></span><br><span class="line"><span class="selector-id">#rightside</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-id">#rightside</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* post标题hover */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt; <span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-title</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导航hover */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.child</span>)<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> <span class="selector-id">#site-name</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> <span class="selector-id">#toggle-menu</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 侧边栏hover */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span> &gt; <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> &gt; <span class="selector-class">.title</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.aside-list</span> &gt; <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> &gt; <span class="selector-class">.comment</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00c4b6</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 去除page-header背景色 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Caddy和docker部署hexo博客</title>
    <url>/posts/992525a2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前这个博客是部署在阿里云的一台服务器上的，域名是 shirofune.cn</p>
<p>后来这台云服务器被我拿去<a href="/posts/bdd7a439/">直播服务器</a>了</p>
<p>现在想把域名换成 homu.space ，同时换一台服务器，所以就重新部署一下</p>
<p>借着这个动机，顺便维护一下博客年久失修的依赖</p>
<h1 id="新服务器的准备"><a href="#新服务器的准备" class="headerlink" title="新服务器的准备"></a>新服务器的准备</h1><h2 id="添加虚拟内存"><a href="#添加虚拟内存" class="headerlink" title="添加虚拟内存"></a>添加虚拟内存</h2><p>买了 99r 一年的服务器之后先 swap 一些虚拟内存</p>
<p>我用的是一个开箱即用的<a href="https://github.com/BlueSkyXN/SKY-BOX">工具脚本</a></p>
<p>关于 swap 的一些介绍，还有具体的命令行操作可以看<a href="https://www.bilibili.com/video/BV1kb41167cb">这个视频</a></p>
<h2 id="更新-package"><a href="#更新-package" class="headerlink" title="更新 package"></a>更新 package</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -i</span><br><span class="line">apt update -y <span class="comment"># 升级 packages</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><p>caddy 是一个 nginx 的替代</p>
<p>我希望通过 docker 来运行 caddy</p>
<p>官方提供了一个一键安装的脚本，脚本包含了 docker-compose</p>
<p>但是需要注意的是，要加上 <code>--mirror</code> 参数，指定国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<details class="toggle" ><summary class="toggle-button" style="">命令解释</summary><div class="toggle-content"><p>来自 chatgpt 的命令详解</p>
<p>curl: 这是一个命令行工具，用于从或向服务器传输数据。它支持许多协议，包括 HTTP、HTTPS、FTP 等。</p>
<p>-f: 如果请求失败，curl 会输出错误并退出，而不是返回页面内容。</p>
<p>-s: 使 curl 静默模式，不显示进度条或错误信息。</p>
<p>-S: 显示错误信息（通常与 -s 一起使用，以确保如果发生错误时仍能看到错误信息）。</p>
<p>-L: 如果请求的 URL 被重定向，curl 将自动跟随重定向。</p>
<p><a href="https://get.docker.com/">https://get.docker.com</a>: 这是 Docker 官方提供的一个脚本，用于简化 Docker 的安装过程。</p>
<p>|: 管道符，用于将前一个命令的输出作为后一个命令的输入。</p>
<p>bash: 这是一个命令行解释器，它将执行通过管道传递过来的脚本。</p>
<p>-s docker –mirror Aliyun: 这些是传递给脚本的参数：</p>
<p>-s docker: 指定要安装 Docker。</p>
<p>–mirror Aliyun: 指定使用阿里云的镜像源进行安装，通常在中国境内使用以提高下载速度和成功率。</p>
</div></details>

<p>设置一下 docker 镜像源，因为官方的 dockerhub 被墙了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://noohub.ru&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://huecker.io&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockerhub.timeweb.cloud&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">docker info</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="博客存放路径和-git-空仓库"><a href="#博客存放路径和-git-空仓库" class="headerlink" title="博客存放路径和 git 空仓库"></a>博客存放路径和 git 空仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/site/hexo</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/repo</span><br><span class="line">git init --bare ~/repo/hexo-blog.git</span><br></pre></td></tr></table></figure>

<p>编辑 git 钩子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/repo/hexo-blog.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git --work-tree=/home/username/site/hexo --git-dir=/home/username/repo/hexo-blog.git checkout -f</span><br></pre></td></tr></table></figure>

<h2 id="运行-caddy"><a href="#运行-caddy" class="headerlink" title="运行 caddy"></a>运行 caddy</h2><p>我使用了 docker-compose 来编排 caddy 的运行参数</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">caddy:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">caddy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">caddy:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./Caddyfile:/etc/caddy/Caddyfile</span> <span class="comment"># 同目录下写好 Caddyfile 配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ubuntu/site/hexo/:/srv</span> <span class="comment"># 把静态资源映射到docker容器内的/srv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">caddy_data:/data</span> <span class="comment"># 存放caddy的ssl证书</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">caddy_config:/config</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443/udp&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">caddy_data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">caddy_config:</span></span><br></pre></td></tr></table></figure>

<p>Caddyfile 是 caddy 的特殊配置文件，写法很简洁</p>
<p>Caddyfile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blog.homu.space &#123;</span><br><span class="line">  root * /srv</span><br><span class="line">  enable gzip</span><br><span class="line">  file_server</span><br><span class="line">  try_file &#123;path&#125;.html &#123;path&#125;/index.html # 省略后缀名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动 caddy 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create caddy_data</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="免密推送"><a href="#免密推送" class="headerlink" title="免密推送"></a>免密推送</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub | ssh username@remote_host <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pnpm run deploy <span class="comment"># package.json script</span></span><br></pre></td></tr></table></figure>

<h1 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h1><p>前面说是想换域名到新的服务器</p>
<p>域名在阿里云买的，服务器在腾讯云…</p>
<p>在腾讯云选择备案服务。填写一堆表单之后提交就好了</p>
<p>备案周期很长，还会被驳回。建议拿到域名之后就备案</p>
<h2 id="备案遇到的各种问题"><a href="#备案遇到的各种问题" class="headerlink" title="备案遇到的各种问题"></a>备案遇到的各种问题</h2><p>由于先前我已经备案过一次了，shirofune.cn 这个域名。</p>
<p>所以工信部那边有我的备案主体和备案网站。</p>
<p>我再次进行个人备案，备案新的网站的时候，接到了云服务商的电话，说我上一个网站由于已经关停，变成了空壳网站，我也就变成了空壳主体，需要先注销掉空壳主体后执行初次备案。或者重新把之前的网站开起来</p>
<p>重新开起来网站这个好麻烦，备案的那个服务器已经被上一家云服务商回收了。所以只能注销</p>
<p>好在阿里云可以在控制台中注销备案</p>
<p>坏在我把网站注销备案之后，并没有注销掉主体（这个时候我才知道，不论是个人还是企业，主体和网站是两个东西）</p>
<p>注销主体就无敌麻烦了！注销主体需要提供纸质材料邮寄到线下，或者去线下办理。</p>
<p>众所周知工信部办事效率很低… 且不说邮寄东西花的时间，动不动就是 20 天，40 天的办事周期（真是可悲）</p>
<p>再稍微等等，如果重新备案这条路太难走的话，还是考虑选择香港的服务器，买一台香港的 VPS 去部署服务（一年会贵几百块钱）</p>
<h1 id="整理博客"><a href="#整理博客" class="headerlink" title="整理博客"></a>整理博客</h1><p>因为博客本身很长时间没有维护，所以花时间整理了一下相关代码</p>
<p>解决一些命令行报错</p>
<p>删除了一些用不到的依赖（package.json）</p>
<p>使用 pnpm</p>
<p>放弃全局 hexo-cli，使用项目内的命令来操作 hexo</p>
<p>更新 hexo 依赖版本，更新 butterfly 主题版本</p>
<p>删除（或隐藏）了一些文章</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>docker</tag>
        <tag>caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>一起去天津逛街吧</title>
    <url>/posts/d571f87f/</url>
    <content><![CDATA[<p>早在一年前，朋友就推荐我去天津玩一玩，我自己也对慢节奏的经济特区很有兴趣</p>
<p>上初中的弟弟也在放暑假，初中的弟弟还没出过远门，也想走出洛阳看看其他城市</p>
<p>于是，趁着这次休息，仔细计划了一番。和弟弟一起 出发！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Image_1723817378813.jpg"></p>
<h1 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h1><p>试着用多维表记录了一下行程，非常方便呢（安利一下 <a href="https://flowus.cn/">Flow us</a> 这个软件）</p>
<p>我的行程都在下面的图片里啦，也可以作为天津旅游攻略的参考</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240818201130.png" alt="第一天，到达天津，落脚，探索市区"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240818201212.png" alt="第二天，天津的近代文化，坐摩天轮"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240818201328.png" alt="第三天，国家海洋博物馆，天津海岸线"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240818201420.png" alt="第四天，日出，逛商场和老街，返程"></p>
<h1 id="游玩印象"><a href="#游玩印象" class="headerlink" title="游玩印象"></a>游玩印象</h1><p><a href="/gallery/Album/2024/2024.08天津/" target="_blank">所有的照片都在这里</a></p>
<h2 id="到达天津"><a href="#到达天津" class="headerlink" title="到达天津"></a>到达天津</h2><p>高铁下午到达，已经饿得不行了… 直接打车去了西北角美食街</p>
<p>这里稍微有点失望，就是很普通的县城小吃街（虽然绝对不是小县城</p>
<p>在这里吃了最顶饿的煎饼果子，还买了炸糕</p>
<p>煎饼果子是纯咸味的，比起山东的会更干一些，还挺好吃的。炸糕外脆里嫩，但是吃了几口就腻了（也可能是我吃饱了）</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240814_150352.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240814_152949.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<hr>
<p>吃饱之后去和在天津出差的朋友碰面一起溜街子聊天</p>
<p>逛了意风区和古文化街，虽说是意风区，但是风味也不是那么浓…</p>
<p>在天津逛街是很惬意的，因为周围建筑各不相同，新鲜感！</p>
<p>晚上去了海河公园，绕着某两个桥之间走了走，看到一路上有弹吉他的市民和游泳的，海河是可以游泳的！</p>
<p>看得出天津真的有呵护这条母亲河</p>
<p>大光明桥:</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240819111535.png" alt="天津友人的肯定"></p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240814_211627.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240814_212043.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<h2 id="五大道，博物馆，天津之眼"><a href="#五大道，博物馆，天津之眼" class="headerlink" title="五大道，博物馆，天津之眼"></a>五大道，博物馆，天津之眼</h2><p>五大道是万国建筑群，名人故居，大多数故居都不对外开放，但是走在这样的街道里体验民国风情也很有趣</p>
<p>五大道的中心是视野开阔的民园广场，广场附近有好多小吃</p>
<p>来一碗津门老味刨冰！是夏天的清爽味道！</p>
<p>还有拉小提琴的老爷爷（拉的相当好）</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_092544.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_094146.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_095248.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_104255.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/VID_20240815_100138.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>之后去了天津博物馆，博物馆的一层和二层都挺一般的，没有什么亮点</p>
<p>但是从三层就不同了，来了天津，就一定绕不开近代历史。三楼就是这样展览馆。</p>
<p>近代历史展馆中有不少历史细节，比如战争的数据统计，交战双方的兵器，老照片等等，相当震撼</p>
<p>比如下面的兵器对比</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_121630.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_121653.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_121621.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>↑ 这怎么可能打得赢 ↑</p>
<p>这让我想起了玩文明 6 的时候，游戏玩到后期和落后国家出现文明代差，直升机打弓箭手，坦克推中世纪城墙…..</p>
<p>对于晚清而言，确实是这样的体验吧 orz</p>
<p>清代的封闭统治毁了中国…</p>
<p>但是不能去责怪历史，因为历史不会变</p>
<p>博物馆四楼是一个临时展厅，内容是波罗的海琥珀展</p>
<p>有封印了远古虫族的橙黄琥珀化石，还有与金银加工的饰品。大开眼界</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_131006.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_131137.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_131615.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_130555.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>↑ 好像看到了艾尔登法环里的屎壳郎，打死可以获得失色锻造石吗 ↑</p>
<hr>
<p>下午和搞定出差工作的朋友碰面，一起去袁世凯家做客（付费做客</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_174244.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_172638.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_173749.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_174214.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>第一张图片是从他家阳台上拍的海河，风景真好（这老东西真会挑地方住）</p>
<p>想去袁世凯家看看是因为<a href="https://www.bilibili.com/video/BV1Vw411h7Yj">这个视频</a></p>
<p>参观故居之后可以明显地感受到一些特点。</p>
<ul>
<li>拥抱西方先进文化的同时又保守封建思维，家里的佛像和风水讲究。电视机和非常精密的钟表湿度计</li>
<li>想当皇帝，他是真的相做皇帝 hhhhh，一楼还有个龙椅呢（</li>
<li>兴趣广泛，麻将象棋牌九老照相机</li>
<li>胆小多疑，有很多逃生密道，在任何一层楼都可以随时出逃</li>
</ul>
<hr>
<p>晚上去了天津之眼，那个坐落在桥面上，一百多米高的巨大摩天轮</p>
<p>我只坐过上海动物园的小摩天轮，所以对这个特别向往。早早就订了票</p>
<p>摩天轮门票是 100/人，一圈大概 2 多分钟。白天和晚上去各有各的美景</p>
<p>要说有什么美中不足，就是摩天轮舱室的玻璃上有滤光膜，可能是担心白天的太阳炫光。但是这个滤光膜很影响拍照的质量</p>
<p>（好在手机 AI 相机有颜色校正）</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_183654.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_190228.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_191822.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240815_193747.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<h2 id="国家海洋博物馆"><a href="#国家海洋博物馆" class="headerlink" title="国家海洋博物馆"></a>国家海洋博物馆</h2><p>第三天去了海洋博物馆，建在海边的博物馆</p>
<p>由于没有预约到门票，只能买馆内活动票送入馆门票… 这也算是变相门票收费了吧，不过很值得</p>
<p>展馆非常大，足够逛一整天的了，是个溜初中弟弟的好地方（</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_121055.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_122741.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_131429.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_143107.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>午饭是在馆内解决的，抱着食堂味道肯定一般般的心态去了深海中餐厅，结果大受震撼</p>
<p>这也 <strong>太好吃了叭！！</strong></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_124456.jpg" alt="坚果蔬菜沙拉，虾饺，蒸汽海鲜，芝士榴莲，蒜蓉扇贝"></p>
<p>吃饭花了大概 160，味道绝赞，如果要去这里玩一定不要错过！</p>
<hr>
<p>逛馆子还挺累的，下午稍微休息了一会儿，打车出发去东堤公园看海</p>
<p>晴天看海，海岸线有栏杆围着，不让下水，但是海岸线非常美</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_170900.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_164656.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_165807.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<hr>
<p>之后因为走累了就回酒店休息…</p>
<p>晚上的时候在塘沽找饭店，找到了一家叫红旗饭庄的店。又是一番味觉盛宴</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_195901.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_193831.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_192501.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_192933.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_193448.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>让我来一一介绍！</p>
<ul>
<li>第一个菜是茄夹，入口是口水茄子的酸甜咸口，外面的淀粉壳炸得很脆，里面的茄子是软糯的，但是这还没完，茄夹里有一颗不小的虾仁，吃到最后又有肉肉的感觉和鲜味。过口入肚之后会有一丝丝辣感，这才发现这道菜底部是有辣椒油，香辣脆口，味觉口感体验都极其丰富</li>
<li>第二个菜店里叫麻线。其实是烙饼、香葱和熟虾酱。这个菜弟弟吃不惯，我是因为好奇山东的虾酱风味（虽然是津菜）才点的。香葱，烙饼，虾酱，不论哪个单吃都非常难以下咽。但是加起来就是绝配，香葱掩盖了一小部分的虾酱的臭味，突出了鲜味，烙饼赋予了形状和口感，赞叹食材融合的智慧</li>
<li>最后一个是店里老板推荐的八珍豆腐，刚端上来的时候没看见豆腐，还以为上错菜了。直到夹了两筷子鱿鱼和黄瓜，才发现豆腐铺在最下面。于是用勺子挖了一勺豆腐和蛤蜊肉，嗯，绝了！</li>
</ul>
<p>这个饭馆三道菜给了我巨大的惊喜，食材丰富，味觉和口感都有兼顾。可能这就是津菜的智慧吧！</p>
<p>后来把这个发给了天津友人，他也知道这家店。评价相当不错，如果要去天津，务必要尝一尝！</p>
<hr>
<p>吃完饭之后回酒店的路上，看到有一家三福，以消食为目的去逛了逛，然后痛失一张粉红票票</p>
<p>前几个月看完葬送的芙莉莲之后，一直想买些小周边纪念一下，但是没有满意的，在三福发现了收藏卡，画面很棒。</p>
<p>除了芙芙，还看到了两个蝴蝶结，少女心突然颤动，一不小心就买了下来！谁可以拒绝可爱的蝴蝶结呢？</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_205429.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240816_205437.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<h2 id="遗憾日出，返程"><a href="#遗憾日出，返程" class="headerlink" title="遗憾日出，返程"></a>遗憾日出，返程</h2><p>回酒店之后早早的就休息了，因为明天想去海边看日出</p>
<p>市政很贴心的有一条四点出发的日出东疆公交专线，我们第二天就是乘坐这个去的</p>
<p>值得一提的是，前一天晚上看天气预报是多云，抱着赌一把的心态出发了</p>
<p>结果我赌输了 QAQ</p>
<p>云层很厚，没有橘红色的日出，东疆亲海公园虽然能下水但是也不干净</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_050541.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_050918.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_034417.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>于是回酒店继续睡，算是一个遗憾吧</p>
<hr>
<p>睡醒之后去滨海文化中心打卡了滨海图书馆</p>
<p>书山和科技感的设计新颖独特</p>
<p>也许是因为成为网红打卡地了吧，游览人数比较多，并没有符合图书馆的那份安静</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_120126.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_121449.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_115822.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>下午返回天津站附近，因为离得很近，所以准备看看世纪钟广场。结果世纪钟在修…</p>
<p>好像几年前世纪钟就坏掉停转了</p>
<p>然后去转了天津站附近的老街，很喜欢市中心老街的烟火气，如果下次来天津。我会想去哈尔滨路吃几次饭</p>
<p>可能正是因为这些老街里接地气的小吃，加上海河富有亲和力的市民文化，才会显得天津的节奏会舒缓一些吧</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_154133.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_161323.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_174332.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_180213.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_180041.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<hr>
<p>最后，到达天津站，卧铺一觉睡回家咯</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240817_192049.jpg" alt="拜拜~"></p>
<h1 id="回家的路上"><a href="#回家的路上" class="headerlink" title="回家的路上"></a>回家的路上</h1><p>在火车站的时候看到了 c 开头的火车。城际火车，忽然发觉，北京就和天津挨着</p>
<p>搜了一下从天津到故宫的行程，才一小时四十分钟! 比去滨海新区都快</p>
<p>如果不打算去天津海边的话，可以第三天去北京转转（？</p>
<p>要说这趟旅行中的遗憾，莫过于没有亲眼见证日出的那抹橘红了。其他的话，天津好像没有自然海岸线了，在出租车上的时候搜索了一下，十年前的填海造陆，把天然海岸线都埋在了地下，造陆之后利用率却很低</p>
<hr>
<p>在天津四天三夜，游玩体验很棒。</p>
<p>海河，历史建筑，海边的博物馆，美食。都留下了难忘的记忆</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Cache_-79a86ca7c0c1e7d1.gif"></p>
]]></content>
      <categories>
        <category>去玩咯</category>
      </categories>
  </entry>
  <entry>
    <title>长沙香香</title>
    <url>/posts/7223d12/</url>
    <content><![CDATA[<p><a href="/gallery/Album/2024/2024.08%E9%95%BF%E6%B2%99/">照片都在这里</a></p>
<h1 id="出发和到达"><a href="#出发和到达" class="headerlink" title="出发和到达"></a>出发和到达</h1><p>8 月 23 号从洛阳坐高铁到长沙游玩，住在长沙县，星沙地铁站附近。朋友家楼上的公寓式酒店</p>
<p>去长沙之前，朋友还让我带了几个烧饼（笑</p>
<p>第一次伴手礼给人带烧饼的</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240822_184157.jpg","alt":"这可太接地气了"},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_124839.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>到达长沙之后，收到了友人出差兰州带的博物馆文创</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_103613.jpg"></p>
<h2 id="撸猫"><a href="#撸猫" class="headerlink" title="撸猫"></a>撸猫</h2><p>到达长沙的第一件事情就是去朋友家撸猫</p>
<p>早在两年前，朋友在秦皇岛的时候我去住过，家里的两只猫猫太可爱了</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_175410.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_155100.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_155812.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>喂猫条的是我，被喂猫条的叫黑米，正在被朋友 rua 的猫猫叫正正</p>
<p>猫猫的记忆是短暂的，他们俩都不认识我了（哭</p>
<p>小时候我还抱过你呢！</p>
<h2 id="恰饭"><a href="#恰饭" class="headerlink" title="恰饭"></a>恰饭</h2><p>晚上在楼下吃了一家名叫壹盏灯的长沙菜</p>
<p>哇 好辣好辣 每个菜都有辣椒</p>
<p>但是好香，辣椒和肉就好像西红柿和鸡蛋一般相配</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_192203.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_192005.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_191709.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<h1 id="游玩长沙"><a href="#游玩长沙" class="headerlink" title="游玩长沙"></a>游玩长沙</h1><h2 id="松雅湖"><a href="#松雅湖" class="headerlink" title="松雅湖"></a>松雅湖</h2><p>到达第一天晚上，吃过饭之后，去了松雅湖</p>
<p>在松雅湖租了一辆快乐的三人自行车</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_203120.jpg"></p>
<p>松雅湖周围是很完善的骑行道，有不少单车佬在这里飙车，道路两边也有足够多的便利店和厕所</p>
<p>很明显是有市政管理支持的景区</p>
<p>除了骑行，还有一个人工沙滩（难道是海边错觉？</p>
<p>沙滩不大，但是好多人在这里玩，城市松弛感的体现</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_210448.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_210220.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_221111.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240823_220545.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>这趟骑行大概花了两个多小时，好累，但是好爽，运动的疲惫在愉快的情绪里是可以转换成轻盈感的</p>
<h2 id="城区漫步"><a href="#城区漫步" class="headerlink" title="城区漫步"></a>城区漫步</h2><p>第二天主要是逛街，这天走了两万三千步…</p>
<p>可能是因为在天津的运动量增加了体力上限，感觉好像没那么累</p>
<p>这一天的路线是：开福寺 - 黄兴路步行街 - 文和友 - 杜甫江阁</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_155834.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_153113.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_150255.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_145412.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_122929.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>进入文和友很震撼，复古做旧的年代风味很有趣。黄兴路步行街展现了长沙现代化的一面。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_150643.jpg" alt="来长沙的第一口臭豆腐"></p>
<h2 id="橘子洲"><a href="#橘子洲" class="headerlink" title="橘子洲"></a>橘子洲</h2><p>第三天睡了个大懒觉，下午去橘子洲坐小火车</p>
<p>年轻时代的毛泽东雕像，眼里有光，有未来，深邃而威严</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_172724.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_173154.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<h2 id="岳麓山的日出"><a href="#岳麓山的日出" class="headerlink" title="岳麓山的日出"></a>岳麓山的日出</h2><p>第四天的一大早，三点起床打车去岳麓山看日出。</p>
<p>和天津那次的海边不同，这天看到了日出</p>
<p>但是太阳被该死的国金大厦挡住了 QAQ</p>
<p>可恶啊！！！</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_053903.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_061642.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>日出真好，日出的时候没有声音</p>
<p>沿着岳麓山的下山道，逐渐走到了湖南大学</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_074906.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_071502.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>湖南大学好大好大… 上双一流大学是什么感觉捏…</p>
<h1 id="长沙香香"><a href="#长沙香香" class="headerlink" title="长沙香香"></a>长沙香香</h1><p>要说在长沙印象最好的东西，还是各路美食</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_110613.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_150455.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240824_210425.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_191307.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_191905.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_193143.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_203313.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_204051.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_211915.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240825_212956.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240826_105525.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>常德津市牛肉粉、臭豆腐、东瓜山香肠、紫苏桃子、黄油粑粑、热卤、茶颜悦色</p>
<p>在长沙没有喝茶颜的奶茶，只喝了果茶和鸡尾酒，鸡尾酒非常好喝，是忘不了的味道</p>
<p>长沙的臭豆腐和外面的真的不一样，香，脆，辣，呛！</p>
<p>在长沙不紧不慢过的十分惬意…</p>
<p>好羡慕友人四处移动的自由生活，把生活本身变成旅游的一部分</p>
]]></content>
      <categories>
        <category>去玩咯</category>
      </categories>
  </entry>
  <entry>
    <title>qq机器人框架--mirai</title>
    <url>/posts/6425a11a/</url>
    <content><![CDATA[<h1 id="在自己的电脑上搭建一个-qq-机器人"><a href="#在自己的电脑上搭建一个-qq-机器人" class="headerlink" title="在自己的电脑上搭建一个 qq 机器人"></a>在自己的电脑上搭建一个 qq 机器人</h1><h2 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h2><p><a href="https://github.com/mamoe/mirai">mirai</a><br><a href="https://docs.mirai.mamoe.net/">Mirai 文档</a><br><a href="https://mirai.mamoe.net/">Mirai 官方论坛</a></p>
<h2 id="环境准备：-JVM-环境要求"><a href="#环境准备：-JVM-环境要求" class="headerlink" title="环境准备： JVM 环境要求"></a>环境准备： JVM 环境要求</h2><blockquote>
<p>手动安装 <a href="https://adoptopenjdk.net/">AdoptOpenJDK</a> jdk-v11 以上</p>
</blockquote>
<h2 id="用到的插件："><a href="#用到的插件：" class="headerlink" title="用到的插件："></a>用到的插件：</h2><ul>
<li><a href="https://docs.mirai.mamoe.net/UserManual.html#%E5%90%AF%E5%8A%A8-mirai">mcl-install</a></li>
<li><a href="https://github.com/mamoe/mirai-console">mirai-console</a></li>
<li><a href="https://github.com/project-mirai/mirai-api-http">mirai-api-http</a></li>
<li><a href="https://github.com/project-mirai/chat-command">chat-command</a></li>
</ul>
<h2 id="通过-mirai-console-进行其他语言开发"><a href="#通过-mirai-console-进行其他语言开发" class="headerlink" title="通过 mirai-console 进行其他语言开发"></a>通过 mirai-console 进行其他语言开发</h2><p><a href="https://github.com/RedBeanN/node-mirai">node-mirai</a><br>社区</p>
<ul>
<li><a href="https://github.com/project-mirai">官方维护的项目</a></li>
<li><a href="https://mirai.mamoe.net/">Mirai 官方论坛</a></li>
<li><a href="https://github.com/project-mirai/awesome-mirai">awesome-mirai</a></li>
<li><a href="https://mirai.mamoe.net/category/6/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83?lang=zh-CN">社区项目发布</a></li>
<li><a href="https://github.com/project-mirai/mirai-plugin-center">插件中心（在建）</a></li>
</ul>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>在<a href="https://github.com/mamoe/mirai/blob/dev/docs/UserManual.md">这里</a>下载 mcl-installer<br>新建一个文件夹，把 mcl-installer 放进去并执行<br>运行<code>mcl.cmd</code>成功启动会看到绿色的<code>mirai-console started successfully</code></p>
<blockquote>
<p>MCL 详细用法<br><a href="https://github.com/iTXTech/mirai-console-loader">MCL 的 README.MD</a></p>
</blockquote>
<h1 id="开始使用前的准备工作"><a href="#开始使用前的准备工作" class="headerlink" title="开始使用前的准备工作"></a>开始使用前的准备工作</h1><p>刚刚安装好的 mirai-console 时没有任何功能的，所有功能将由插件提供</p>
<h2 id="可以通过-mcl-进行安装"><a href="#可以通过-mcl-进行安装" class="headerlink" title="可以通过 mcl 进行安装"></a>可以通过 mcl 进行安装</h2><p>MCL 文档：<a href="https://github.com/iTXTech/mirai-console-loader/blob/master/scripts/README.md">mirai-console-loader/scripts/README.md</a><br>安装 mirai-api-http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mcl --update-package net.mamoe:mirai-api-http --type plugin --channel stable</span><br></pre></td></tr></table></figure>

<p>和 chat-command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mcl --update-package net.mamoe:chat-command --channel stable --type plugin</span><br></pre></td></tr></table></figure>

<h2 id="也可以直接下载jar文件放进plugins文件夹中"><a href="#也可以直接下载jar文件放进plugins文件夹中" class="headerlink" title="也可以直接下载jar文件放进plugins文件夹中"></a>也可以直接下载<code>jar</code>文件放进<code>plugins</code>文件夹中</h2><p><strong><em>在安装完 chat-command 之后需要使用<code>/perm</code>命令开通权限才会有聊天回应</em></strong></p>
<h1 id="启动和使用-mirai"><a href="#启动和使用-mirai" class="headerlink" title="启动和使用 mirai"></a>启动和使用 mirai</h1><p>运行<code>mcl.cmd</code><br>第一次运行会初始化环境</p>
<h2 id="Mirai-项目结构"><a href="#Mirai-项目结构" class="headerlink" title="Mirai 项目结构"></a>Mirai 项目结构</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>scripts</td>
<td>存放启动器的脚本，一般不需要在意他们</td>
</tr>
<tr>
<td>plugins</td>
<td>存放插件</td>
</tr>
<tr>
<td>data</td>
<td>存放插件的数据，一般不需要在意它们</td>
</tr>
<tr>
<td>config</td>
<td>存放插件的配置，可以打开并修改配置</td>
</tr>
<tr>
<td>logs</td>
<td>存放运行时的日志，日志默认保留 7 天</td>
</tr>
</tbody></table>
<h2 id="使用一个插件"><a href="#使用一个插件" class="headerlink" title="使用一个插件"></a>使用一个插件</h2><p><a href="https://github.com/Samarium150/mirai-console-lolicon">mirai-console-lolicon</a><br>取 Releases 下载合适的 jar 包，然后存放在 plugins 文件夹中<br>重启 Mirai</p>
]]></content>
      <categories>
        <category>魔女的帽子</category>
      </categories>
      <tags>
        <tag>mirai</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个简单的直播服务(livego)</title>
    <url>/posts/bdd7a439/</url>
    <content><![CDATA[<p>平时偶尔会把动画片下载下来，在 B 站上直播（拒绝做正版受害者）</p>
<p>但是近两年 B 站总是掐我的直播，因为版权问题或者不够和谐的问题… 直播间甚至被封过好几次</p>
<p>我还是挺珍惜自己的 6 级号的，但是也确实想以这种最直接的方式给朋友安利动画</p>
<p>从直播技术的角度看，B 站也好，斗鱼也好，本质都是本地推流，服务器处理流，客户端通过服务器链接接收流并播放</p>
<p>那么也许我可以自己搭建一个直播间</p>
<p>经过一番谷歌和 ChatGPT，最后找到了 <a href="https://github.com/gwuhaolin/livego/blob/master/README_cn.md">livego</a> 这个项目</p>
<p>livego 的优点很明显，就是简单，非常简单，熟悉一下文档之后，一行命令就可以跑起来</p>
<h1 id="关于直播服务器"><a href="#关于直播服务器" class="headerlink" title="关于直播服务器"></a>关于直播服务器</h1><p>在印象里，直播一向都是很吃性能的一件事，他要捕捉画面，把画面转换成数据流，实时发送给服务端</p>
<p>但是以上这些都是客户端做的事情，实际上服务端对于性能的压力并不大，我测试过 1 核 2G 的服务器足够运行 livego 了</p>
<p>直播者 (OBS &amp; 推流链接) -&gt; 服务器 (livego) -&gt; 用户 (播放链接 &amp; 播放器)</p>
<h2 id="推流比特率和分辨率"><a href="#推流比特率和分辨率" class="headerlink" title="推流比特率和分辨率"></a>推流比特率和分辨率</h2><p>选择视频分辨率和相应的比特率。例如：</p>
<ul>
<li>720p (HD): 大约 2.5 Mbps</li>
<li>1080p (Full HD): 大约 5 Mbps</li>
<li>4K (Ultra HD): 大约 15-25 Mbps</li>
</ul>
<p>比特率越高，视频质量越好，但所需带宽也越高。</p>
<h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>带宽涉及到本地推流带宽和服务器带宽</p>
<p><strong>本地推流，本地上行带宽</strong></p>
<p>我家网络很菜，上行带宽是 5Mbps，也就是说，我在使用 obs 推流的时候，码率不能超过 5Mbps，否则直播会出现断断续续的情况。保险起见，我在 obs 设置的码率是 4000Kbps，勉强可以让 1920*1080 分辨率不那么失真</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722309514234.png"></p>
<p><strong>直播服务器带宽</strong></p>
<p>服务器需要接收到推流，并且把流分发给客户端。</p>
<p>所以，用户数量越大，所需要的带宽就越大，简要的计算方式如下</p>
<blockquote>
<p>总带宽需求 = 单用户带宽需求 × 同时观看人数</p>
</blockquote>
<p>以我个人的直播来讲，如果有 10 个人看，也就是需要 50Mbps 的带宽</p>
<h2 id="服务器选择"><a href="#服务器选择" class="headerlink" title="服务器选择"></a>服务器选择</h2><p>总结下来，我的需求是：</p>
<p>直播观看用户不多，但是也需要不小的带宽</p>
<p>直播次数不多，所以直播流量不大，可能一个月只有几个 G</p>
<p>CPU 和内存要求不高</p>
<p>那么哪里有这样的服务器呢…. 高带宽，低流量，低性能，这种配置也太奇怪了</p>
<p>首先排除轻量应用服务器，限定死带宽的服务器一定不行。</p>
<p>经过一番努力，我终于找到了合适的，很便宜，并且满足需求的！</p>
<p>阿里云 99 块钱一年的服务器</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722310478256.png"></p>
<p>虽然这个的固定带宽是 3M，但是可以通过升降配置把它改成按流量计费的</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722310567727.png"></p>
<p>改成按流量计费之后，甚至还退了 49 块钱！</p>
<p>也就是，50 块钱拿下了一个 2 核 2G 大带宽的服务器</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722310777439.png"></p>
<p>大概费用：每有一个人看，每小时大概 1 块钱流量费。我感觉很能接受</p>
<h1 id="部署-livego-和使用"><a href="#部署-livego-和使用" class="headerlink" title="部署 livego 和使用"></a>部署 livego 和使用</h1><h2 id="使用-docker-部署"><a href="#使用-docker-部署" class="headerlink" title="使用 docker 部署"></a>使用 docker 部署</h2><p>首先安装 docker，使用官方脚本安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>安装好之后，从 docker 启动，并且给容器添加一个 name，方便容器挂掉之后重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name livego-server -p 1935:1935 -p 7001:7001 -p 7002:7002 -p 8090:8090 -d gwuhaolin/livego</span><br></pre></td></tr></table></figure>

<p>在安全组放行端口，上面端口的用处，可以看这张图片的备注列</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722311180697.png"></p>
<h2 id="使用-livego"><a href="#使用-livego" class="headerlink" title="使用 livego"></a>使用 livego</h2><p>创建房间，像文档里一样，访问地址：</p>
<p><a href="http://ip/">http://ip</a> 地址:8090/control/get?room=movie</p>
<p>页面会出现一个 json，里面包含了一个 key</p>
<h3 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h3><p>使用 rmtp 协议进行推流</p>
<p>obs 相关设置</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722311564690.png"></p>
<h2 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h2><p>播放支持多种协议，也就是对应上面的端口</p>
<ul>
<li>RTMP: rtmp://ip:1935/live/movie</li>
<li>FLV: <a href="http://ip:7001/live/movie.flv">http://ip:7001/live/movie.flv</a></li>
<li>HLS: <a href="http://ip:7002/live/movie.m3u8">http://ip:7002/live/movie.m3u8</a></li>
</ul>
<p>安卓可以使用<a href="https://kmplayer.com/home">KMSPlayer</a>播放</p>
<p>windows 可以使用<a href="https://potplayer.daum.net/">potplayer</a></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722311925134.png"></p>
<p>macos 可以使用<a href="https://iina.io/">IINA</a></p>
<p>也可以自己使用 <a href="https://github.com/gwuhaolin/blog/issues/3">flv.js</a> 构建一个网页播放器</p>
]]></content>
      <categories>
        <category>魔女的帽子</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>明年继续努力啦</title>
    <url>/posts/5093a6d4/</url>
    <content><![CDATA[<h1 id="今年都做了些什么"><a href="#今年都做了些什么" class="headerlink" title="今年都做了些什么"></a>今年都做了些什么</h1><p>2021 年马上就结束了，今天是 2021.12.29。想到什么写什么，零零散散，写给自己</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/2022.png" alt="花汪的新年祝福"></p>
<p>不知不觉，距离新型冠状病毒肺炎出现已经两年了，这东西已经无法从我的人生中忽视掉了。新冠疫情深刻地改变了生活方式，以前是想去哪里就去哪里，现在旅行不仅在时间和行动上收到了限制，在个人的计划里更是一种奢侈。希望明年可以好起来吧</p>
<p>都怪拖延症…写了好久，本来打算在 12.31 写完的，结果拖到了今天（1 月 3 号），所以今年去年什么的…emmmm 我也不知道是那年，凑合看吧（</p>
<h2 id="好的地方"><a href="#好的地方" class="headerlink" title="好的地方"></a>好的地方</h2><p>夸夸自己</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/taiga.jpg" alt="今年是大河年！"></p>
<h3 id="技能进步"><a href="#技能进步" class="headerlink" title="技能进步"></a>技能进步</h3><p>前年（2020）从郑州来到上海，找了半个月的工作，确定了今年一年的生活方式。刚来上海的时候知识储备差的有点多，又找不到人问，不好意思问，就只能把搜索框作为自己的导师。这给我的职业发展提供了最底层的基础，也就是我一年内最常用的学习方法。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/lan.jpg" alt="郑州的小兰花"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/toshanghai.jpg" alt="To ShangHai"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/chudaoshanghai.jpg" alt="找工作"></p>
<p>还记得那年找工作蛮辛苦的</p>
<blockquote>
<p>技术能力上的进步可以这么总结：从不信任代码到不信有什么东西是搞不出来的</p>
</blockquote>
<p>我解决问题的方法论也有了雏形，用两个词来概括，格物，溯源</p>
<p>万物可分，有果必有因，遵循基础规律不停的分解问题，理清多个问题之间的联系，找到各个问题的根源所在。</p>
<h2 id="经济独立"><a href="#经济独立" class="headerlink" title="经济独立"></a>经济独立</h2><p>经济方面完成了养活自己的独立。虽说之前在福建的时候，已经不需要和家里要钱了，但是存不下来，不能满足自己对更好生活的期望，更不能反馈到家里。到了上海稳定之后，更大的挑战带来的收益也更大。现在终于有能力完成一些自己的想法了</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/A1231F983CF3BB9CD1575D53335C1B17.jpg"></p>
<h2 id="未来的学历"><a href="#未来的学历" class="headerlink" title="未来的学历"></a>未来的学历</h2><p>完成了成人高考，阶段性任务完成！</p>
<p>两年半之后就能破除找工作的学历限制了</p>
<p>不过我相信做技术这一行，能力还是最重要的</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/chengkao.jpg" alt="成考"></p>
<h2 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h2><p>清明节，劳动节，端午节的时候去其他城市游玩的很开心。</p>
<h3 id="苏州-amp-上海"><a href="#苏州-amp-上海" class="headerlink" title="苏州&amp;上海"></a>苏州&amp;上海</h3><p>清明和朋友去了苏州，打卡了拙政园，狮子林，平江古镇，体验到了一点江南的优雅精致（kora，上海明明也是江南地区！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/suzhou.jpg" alt="苏州"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/shizilin1.jpg" alt="狮子林"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/shizilin2.jpg" alt="狮子林"><br>狮子林的假山特别好玩</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/CFBF71494139FD3337AE1CC317E158B0.jpg" alt="拙政园"><br>课本上的拙政园</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E4%B8%83%E9%87%8C%E5%B1%B1%E5%A1%98.jpg" alt="七里山塘"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E6%A1%82%E6%BB%A1%E9%99%87.jpg" alt="桂满陇"></p>
<p>桂满陇的菜非常美味！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/huqiu.jpg" alt="虎丘"></p>
<p>海拔 37M 的高山！</p>
<p>在苏州有一点小小的遗憾，没有去到苏州博物馆。苏州博物馆的建筑很独特，只从外面看到了…</p>
<p>苏州玩了两天之后回到上海继续转了转，外滩，世纪公园散散步 おだやか…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/shanghai.jpg" alt="外滩"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/E832AD1E3EE2BCC722B9C74296678099.jpg" alt="世纪公园"></p>
<p>世纪公园的这张照片是我拍的最满意的一张！是和上海的朋友一起去逛的</p>
<h3 id="洛阳龙门石窟"><a href="#洛阳龙门石窟" class="headerlink" title="洛阳龙门石窟"></a>洛阳龙门石窟</h3><p>劳动节回家，和发小去了龙门石窟，在洛河边晃悠。果然根在洛阳，我喜欢洛河</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/luoyangqiao.jpg" alt="洛阳桥"></p>
<p>劳动节在洛阳桥上拍的照片</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/lushena.jpg" alt="卢舍那大佛"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/yihe.jpg" alt="伊河"><br>龙门石窟，还有伊河两岸。伊河两岸太美了</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/5B9D7AD75510A5C14D9A4489CA231582.jpg" alt="应天门博物馆"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/luotu.jpg" alt="夜晚的洛阳中心图书馆"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/ichigo.jpg" alt="草莓地"></p>
<p>家里的小草莓地，没有人管过…但是竟然结果了，还蛮好吃！虽然很小</p>
<h3 id="端午节的秦皇岛度假"><a href="#端午节的秦皇岛度假" class="headerlink" title="端午节的秦皇岛度假"></a>端午节的秦皇岛度假</h3><p>端午节去朋友家度假，秦皇岛是个好地方啊，宜人的温度，舒适的海风，早起赶海。非常难忘的一次旅行</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/qinhuangdaozhan.jpg" alt="秦皇岛站"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/heimi.jpg" alt="黑米"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/xiaozheng.jpg" alt="小正"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/heimihexiaozheng.jpg" alt="一起玩嘛~"><br>朋友家的两只喵，黑米和小正~</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/shanhaiguan.jpg" alt="山海关"><br>山海关！天下第一关</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/changchengruhaikou.jpg" alt="老龙头"><br>长城入海口<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/heihei.jpg" alt="笑（）"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/geziwo.jpg" alt="鸽子窝"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E5%87%8C%E6%99%A8%E8%B5%B6%E6%B5%B7%E7%9A%84%E6%94%B6%E8%8E%B7.jpg" alt="凌晨赶海的收获"><br>赶海太好玩了！真想再来一次，带上万全的工具！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/tiedao.jpg" alt="铁道"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/tiedaohaibian.jpg" alt="铁道的尽头"><br>还有一条很美很美的旧铁道</p>
<p>记得当时是毕业季，有不少人在这儿拍毕业照呢</p>
<p>铁道的尽头是柔软的海风</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/beijingst.jpg" alt="北京站"></p>
<p>回上海的时候路过了北京，当时还下了小雨</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/sanbu.jpg"><br>旅行就是边晃悠边聊天嘛</p>
<p>平平淡淡才是真…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E7%9C%9F%E8%AE%A9%E4%BA%BA%E8%84%B8%E6%89%81.png" alt="真让人脸扁"></p>
<h3 id="十一回家，看看洛河"><a href="#十一回家，看看洛河" class="headerlink" title="十一回家，看看洛河"></a>十一回家，看看洛河</h3><p>从端午到十一，是传送带一般的循环运动，上班，下班，睡觉…</p>
<p>这段时间仿佛得了五月病似的没有干劲（你有过几天的干劲？</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E5%9B%BD%E8%8A%B1%E5%9B%AD.jpg" alt="国花园，适逢花展"><br>十一回家，和老爸谈谈人生…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/luohedi.jpg" alt="家附近的洛河堤"></p>
<p>和家人散散步挺好的</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/dianshita.jpg" alt="诡异审美的洛阳电视塔"></p>
<p>以后会回家的吧…</p>
<blockquote>
<p><a href="https://music.163.com/#/song?id=469508285">铁道浪漫（谷村新司）</a><br>右延べるは　无残な梦への诱い<br>左のレールは　ささやかな幸福の诱い「いざない」</p>
</blockquote>
<h3 id="其他的一些地方"><a href="#其他的一些地方" class="headerlink" title="其他的一些地方"></a>其他的一些地方</h3><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/gucungongyuan.jpg" alt="顾村公园"><br>得到了一顶帐篷，和朋友去顾村公园搭帐篷拍羽毛球很愉快</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/luxun.jpg" alt="鲁迅公园"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/luxunbowuguan.jpg" alt="鲁迅博物馆"><br>鲁迅公园和鲁迅博物馆</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/bengbengbeng.jpg" alt="崩坏2&amp;涟泉大江户"><br>崩崩的线下坦诚相见</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/muxiao.jpg" alt="洛阳三中"><br>回去看了眼母校</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/gongqing.jpg" alt="共青森林公园"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/gongqingsenlin.jpg" alt="共青森林公园"><br>搬家之前去了趟共青森林公园</p>
<p>大概五六月份，买了服务器，建成了自己的 blog，然后把很早之前写的文章给搬了过来（凑数，以后会让 blog 更偏向生活</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/xin.jpg" alt="我收到的信，袋子是之前魔卡少女樱展的"></p>
<p>每隔几个月，就会和一个在部队里的朋友写信，频率很低，但是很有意思。不过我写字好丑啊 orz…</p>
<p>十月，我和朋友一起在上海宝山整租了一套房子，租房真贵啊…</p>
<p>离开了刚来上海时不舒服的住所</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/sipinglu.jpg" alt="以前的房间"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/chuangwai.jpg" alt="窗外"></p>
<p>新的住所可以燃气做饭，中间一两年没做菜，都快不知道怎么颠锅了</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/banjia.jpg"></p>
<p>搬家之后和上海朋友们的聚餐，不过大都不是我做的，</p>
<p>四月份，公司换了办公地址，从这里</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/gangtai.jpg" alt="港泰广场"></p>
<p>搬到了这里</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/hengli.jpg" alt="恒利国际大厦"></p>
<p>哦对了，我还留了很长的头发，扎起了鞭子~~为什么要留长头发呢…<br>因为好玩！（其实超麻烦的）<br>这个不给看！</p>
<h2 id="不好的地方"><a href="#不好的地方" class="headerlink" title="不好的地方"></a>不好的地方</h2><p>交际一如既往的不擅长，没能和身边很厉害的人关系特别好…</p>
<p>遇到了很麻烦的同事 orz</p>
<p>没攒住很多钱吧，但是日常生活的水平提高了很多</p>
<p>没有丰富的旅行是一大遗憾…</p>
<p>缺少运动啊，健康才是最重要的，鼻炎的困扰好难受啊！！</p>
<h1 id="想法和感慨"><a href="#想法和感慨" class="headerlink" title="想法和感慨"></a>想法和感慨</h1><p>健康真的很重要，自己独立在外，最痛苦的时候就是生病了，无助的感觉能把心灵摧垮</p>
<p>不愉快的时候就想办法让自己高兴</p>
<p>WLB，工作与生活应该分离，这点我做的很好，工作与生活平衡是非常重要的，不能持续加班，未来找工作我会拒绝掉严重加班的公司。</p>
<p><strong>能摸鱼的工作才能提升自己的能力</strong>，不能一个劲埋头写业务代码。真的真的会废掉的</p>
<p>我好羡慕这位程序媛：<a href="https://space.bilibili.com/42233366">被删</a>，这一年多很认同她的想法，处理同事关系，反内卷，生活与工作的平衡，以及写作和成长的方法。虽然我在一家小公司，朝九晚六很少有这种软技能的应用场景。但是依然获益匪浅，非常感谢</p>
<p>还有好多好多想法，一时半会儿写不出来了 orz，其实现在的时间是<code>new Date().toLocaleString()</code></p>
<p>打死你，是<code>2021/12/31 下午11:42:00</code></p>
<p>新朋友越来越少，高中的时候我认识了很多很多有趣的人，我喜欢他们。但是现在我的朋友圈仿佛已经封闭了。新朋友没有，老朋友渐渐地流失。我为什么这么害羞呢…我是不是应该主动一点 orz</p>
<p>意识到自己可能被人故意边缘化的时候，就会很心痛</p>
<p>算是职业发展的副作用吧，自己以前的一些宝贵的兴趣渐渐地被忽视，看的动画片少了，玩游戏也少了，动画片的幕后关注也少了…太可惜了，我会补回来的。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/lisamiya.png" alt="LisaMiya"></p>
<blockquote>
<p>对美少女和 Yuri 的爱是绝对的！！</p>
</blockquote>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/SayaKyoko.png" alt="SayaKyoko"></p>
<p>自己从小就是寄宿学校，一个星期住校五天回家两天，回家两天母上还带着我风里雨里的去奥数英语班，虽然现在感觉没什么用，但是对于教育，她们真的用心了也尽力了。父上总是很不好惹，小时候事情和母上讲得多，有时候还撒泼不讲理，毕竟在父上那里撒泼是要挨拖鞋的。现在和父上讲得更多，也更能理解父母的辛苦。</p>
<p>有时候就想啊…我现在在上海，他们是什么想法。虽然每次回家都会告诉我洛阳很有发展潜力，未来创业支持我，希望我可以在家乡扎根发展。我能理解，我也想回家，但是在家时间一长就会因为各种问题吵起来，这是我的情绪控制能力不够。</p>
<p>父母在家的生活还不错，不需要节俭，虽然他们吃过苦，有节俭的习惯。身体也还算健康，这让我很放心。我在上海也尽可能地让家里放心。这样的距离给了我自由，但是给了父母什么…我也不知道该怎么做，定期往家里打点钱，多少分享点生活的近况。但是对他们来说，只要在外地，我就是不可及的。</p>
<p>养了这么大的孩子终于独立了，却不能长久地在身边。等孩子有能力的时候自己彻底的老了，又不想给孩子添麻烦 orz。这不是我想看到的，太残酷了</p>
<p>大桥卓弥的<a href="https://music.163.com/#/song?id=492053">ありがとう</a>，反复听过好几遍…</p>
<h1 id="明年做些什么事"><a href="#明年做些什么事" class="headerlink" title="明年做些什么事"></a>明年做些什么事</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/2022.jpg"></p>
<h2 id="安稳又有进步的生活"><a href="#安稳又有进步的生活" class="headerlink" title="安稳又有进步的生活"></a>安稳又有进步的生活</h2><p>想搞一台台式机，虽然说了很久了还没买，手机笔记本什么的都换了一遍，平常忙起来打游戏的时间就很少。台式机对我来说也许是一个很少用的伪需求，但是玩游戏真的很快乐。即使时间很少，还是想玩的。</p>
<p>换一个稍微紧凑一点，工资更高的工作。多攒一些钱才能出去玩</p>
<p>想去长沙，广州，重庆。青藏也想去，但是有点难吧。明年要把江南的几个城市玩一遍！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1873B5E8B62C4EE7F354DFA34A827DF6.jpg" alt="小书柜"></p>
<p>我想有更多的收藏品，明年我要这些</p>
<ul>
<li>终将成为你，安达达与岛村村</li>
<li>补齐我的魔女之旅</li>
<li>蘑菇的拟态日常，我好喜欢蘑菇煎蛋啊</li>
<li>再抱一只 fufu！手办景品什么的不能轻易剁手了</li>
<li>少女终末旅行，画集</li>
<li>继续支持我家鹿乃</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/fufu.jpg" alt="fufu"></p>
<p>让自己的 Blog 更加得生活化，技术类文章还是会有的，但是质量要提高！我是有分享欲的，但是就是懒嘛。</p>
<ul>
<li>完善相册的功能，会记录一些出去玩的照片，日常生活，还有我家鹿乃！</li>
<li>我想做一个歌词页面，或者可以记录歌词片段的东西</li>
<li>看过的作品分享，动画片，电影，galgame 什么的。Hexo 有个豆瓣的插件。我应该会单独做一个系统</li>
<li>好好地介绍一下自己！</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/kano.jpg" alt="Kano"></p>
<h2 id="自己的创造力"><a href="#自己的创造力" class="headerlink" title="自己的创造力"></a>自己的创造力</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E5%B0%8F%E5%8E%A8%E5%A8%98Avatar.png"></p>
<p>我一直觉得创造些什么东西是非常棒的事情。插画师们塑造的一个个角色让我心动不已。GitHub 上好玩的开源代码库也给我带来了很多乐趣。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/baichuan.jpg"></p>
<p>明年就是毕业第三年了，工作理所应到的要手到擒来。除此之外，我要明确一下自己的发展方向。目前还在埋头处理业务，我应该能成为一个小团队的 leader，今年一年里思考了很多一个良好的团队应该是什么样子的问题。</p>
<p>我的理想工作是写自己想要的东西，和几个人一起创作出属于我们自己的 IP 或者产品。即使未来不创业，现在也要为创业积累硬实力</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/shirofune.jpg"></p>
<p>与创造力相并提的是行动力…今年我本来能做得更好的，行动力不足，很多事情都在拖延。比如墨刀上面的产品原型画了一个又一个，结果都是 demo 级别的…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/neko.jpg"></p>
<ul>
<li>建设一个类似于<a href="https://firenzia.github.io/sakura-ui/">Sakura UI</a>的小组件库，这是一个很简单的组件库，我觉得我能做到</li>
<li>Memories，一个记录和推荐动画片，galgame 的网站。现在只有前端的简单页面。</li>
<li>今年最少要啃掉的技术类书籍<ul>
<li>JavaScript 设计模式</li>
<li>CSS 世界 / CSS 新世界</li>
<li>狼书三卷</li>
</ul>
</li>
<li>一个自己的工具库，封装一些 DOM 处理，数据处理之类的函数，以 npm 模块发布</li>
<li>可以管理网站的后台系统，涉猎一点用前端的技术去开发 App</li>
<li>python 得玩儿的更熟一点，Renpy 一直都是我的行动力之痛</li>
<li>mirai robot 再丰富一点，写几个好玩的插件</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/mirai.png" alt="Mirai"></p>
<h2 id="健康和锻炼"><a href="#健康和锻炼" class="headerlink" title="健康和锻炼"></a>健康和锻炼</h2><p>啊我的…腰</p>
<p>每天起床扭扭屁股弯弯腰 ww</p>
<p>保证平均七个小时以上的睡眠</p>
<p>每天一万步，或者一公里跑步</p>
<p>把牙齿看好，没有一口好用的牙就没有美味！</p>
<p>年中一次的全身体检</p>
<p>控制好体重！</p>
<h2 id="性格和交际"><a href="#性格和交际" class="headerlink" title="性格和交际"></a>性格和交际</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/neko.jpg"></p>
<p>提升一点沟通能力吧，降低知识的诅咒，做到更全面的换位思考。</p>
<p>我觉得自己应该稍微主动一点，把和集中于几个人的聊天和分享扩散到更多的人。每天上班下班的生活中，确实找不到什么亮点。灰色的循环…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/wuwuwuw.jpg" alt="呜呜呜"></p>
<p>继续保持自己的简单透明，坦诚对待身边的人</p>
<p>继续抵制大数据推送，有选择地摄取信息和知识。不随波逐流，不脱离自我</p>
<p><a href="https://www.pc426.com/">学会思考，停止盲从</a></p>
<p>抵制大数据推送的同时，我也丧失了很多很多的信息来源。忙碌紧凑的时间还有孤僻的性格，让我放弃了一个又一个曾经很愉快的论坛社区，我已经没有地方玩了。曾经自己建立的群也没有了新的活力。我应该把这些都捡起来。如果眼睛可以初步过滤信息，不让某些东西进入脑子里就好了</p>
<p>大学以来，我的活动轨迹就越来越小，对线上交流从参与变成了观望和放弃。我也知道自闭是不对的…</p>
<p>如果有机会像前年一样加入一个字幕组，或者和一群人搞一些什么事情就好了。</p>
<h2 id="经济上"><a href="#经济上" class="headerlink" title="经济上"></a>经济上</h2><p>我相信钱不是省出来的，而是通过把握机遇和提升自己创造出来的</p>
<p>但是不必要的开销还是要砍掉</p>
<p>换一份工作，是最直接的攒钱方式</p>
<p>今年电子产品换了一个遍儿，所以明年就减少这部分的开销</p>
<p>吃喝的花销不会继续增加，旅行的比例要增加</p>
<p>房租是没办法的，上海的房租，呸，呸呸呸</p>
<p>基金之类的以钱生钱的理财，今年一年还亏了一千块钱 orz，但是找到玩这个东西的感觉了</p>
<p>放长线，放平心态。今年的目标是把去年的捞回来，然后投资增值百分之 10 吧</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/jiayou.jpg"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E5%94%94.jpg"></p>
]]></content>
      <categories>
        <category>年末记忆</category>
      </categories>
  </entry>
  <entry>
    <title>也许是上海最难忘的一年</title>
    <url>/posts/8052be14/</url>
    <content><![CDATA[<p>这篇文章拖了太久了… 但是依然有很多事情想要记录下来</p>
<p>也许大多都不是高兴的吧</p>
<h1 id="今年都做了什么"><a href="#今年都做了什么" class="headerlink" title="今年都做了什么"></a>今年都做了什么</h1><h2 id="辞去工作准备旅游"><a href="#辞去工作准备旅游" class="headerlink" title="辞去工作准备旅游"></a>辞去工作准备旅游</h2><p>首先就是辞职</p>
<p>大概二月份的时候提出离职，三月离开了现在这家公司</p>
<p>辞职的原因很多</p>
<ul>
<li>公司技术部团队很小，一个前端（我）一个后端，一个设计师。以前的设计师跳槽了，新的是后来又招的。新的设计师的沟通方式和我俩合不来… 经常闹矛盾 orz 我是会躲避矛盾的那种人，于是小团队不合就成为了辞职的原因之一</li>
<li>公司社保欠缴一年多，虽然工资有发，但是员工人人都担心着公司是不是快不行了（其实并没有），因为社保的问题，也有些不愉快</li>
<li>在这家公司一年半，确实开阔了视野（毕竟是坐落在上海市中心的留学公司），技术上也有不小的进步，但是这个公司的项目用的技术并不先进，基本都是在维护。我想找一个新的工作，尝试开阔自己的技术面</li>
<li>我想玩，上班挺累的，像辞职去旅游，也和朋友约好了时间，已经订好了三月份的机票</li>
</ul>
<p>于是我就辞职了…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/8b336bdf9e74c16aefc2833a5d0117d8.jpg" alt="公司前的成都北路高架"></p>
<h2 id="遭遇疫情"><a href="#遭遇疫情" class="headerlink" title="遭遇疫情"></a>遭遇疫情</h2><p>但是辞职后马上遇到了天灾人祸，也就是让我感觉最难受最难忘的上海疫情封城</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/4915f01dab18f81145e122706e1e8851.jpg" alt="当时住在上海宝山区"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/a1df48433b001b350b058e3a01833936.jpg" alt="住处小区"></p>
<p>维基百科上称这次疫情封城为：<a href="https://zh.m.wikipedia.org/wiki/2022%E5%B9%B43%E6%9C%88%E4%B8%8A%E6%B5%B7%E5%B8%822019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85%E8%81%9A%E9%9B%86%E6%80%A7%E7%96%AB%E6%83%85">2022 年 3 月上海市 2019 冠状病毒病聚集性疫情</a></p>
<p>当时和在上海的朋友一起买好了去重庆的机票，也因为重庆市政府发布的通告上海游客落地需要隔离半个月以上而取消了。取而代之，3.17 我们去辰山植物园散了散步，那天还下小雨</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/fe92961d7b5a4ecc12aa3fe0fc2f0328.jpg"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/36f7836b3a52e5eed9472e9e54f22352.jpg"></p>
<p>内心是很难受的… 谁能想到这次封锁强度之大。</p>
<p>实际上，从三月底开始，手机里的新照片就少了很多</p>
<p>封城前的小区，很漂亮</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/4a31e755f49598e5e94ccee4b7987677.jpg" alt="草地落花"></p>
<p>平日在家里的时候，家门都不让出，每天门口有人来做核酸检测，阳性就会被拉去隔离，后来阳性太多，变成了居家隔离。</p>
<p>那时候的人们感觉自己好像在玩生化危机…</p>
<p>在上海还出现了食物供应链问题。不过好在我的仓鼠属性，我在家里囤了许多干货，方便面，干米线，腐竹之类的… 勉强过的还算可以。至少没有挨饿</p>
<p>因为不能出门，每天除了对着电脑，只能在窗户口看看。满满铁窗泪</p>
<p>疫情期间，我的窗外<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/03bbf8db1280c20fac34db1093f60f37.jpg"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/0fe7ed3f89527ddd295dcb641ed6abde.jpg"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/0bf9cc3e96d0e34f6465ee531d8821b0.jpg" alt="窗外的大白，我讨厌大白"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/105f0ef3db2fba8c66b52c38a61713ee_720.jpg" alt="我讨厌核酸，但是全都是这东西"></p>
<p>当时的乐趣来源也就是给小草浇浇水，打打游戏什么的…<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/5714529726c7b53f2311d4ad320863bf.jpg"></p>
<p>一度还把自己喝醉了，我从来没有喝醉过，那是我长这么大第一次喝醉，大概在四月份，心情非常糟糕<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/be0db404ba0fe632928562d8e96349eb.jpg"></p>
<p>三月底的时候，我还试过找工作。当时想要入职堆糖网，那个做壁纸图库的网站。</p>
<p>我在堆糖面试了三轮技术面试，每次都一个多小时，最后以为稳了，结果三月底，大概 27 号的时候开始彻底封城。心仪的工作也因此没有了</p>
<p>度过了三个月，期间有悲痛欲绝的像失恋一般的伤心，还有浑浑噩噩地打艾尔登法环，最后卡在艾尔登之兽前面。也没有当上艾尔登之王</p>
<h2 id="解封之后重新找工作"><a href="#解封之后重新找工作" class="headerlink" title="解封之后重新找工作"></a>解封之后重新找工作</h2><p>六月初的时候终于解封了，可以去其他地方</p>
<p>先去了上海松江区的佘山。和在上海的发小一起去的。之后发小就回家了，也是对上海挺失望的<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/0d2fbf279c66b44afff4783fb77597f3.jpeg" alt="佘山俯瞰，虽然这个山只有二三百米高"></p>
<p>开始找工作，疫情刚结束，工作实在是很难找。不过依然拿到了 offer</p>
<p>虽然拿到了 offer，不太想去，因为看起来公司里成员年龄都很大，而且是那种加班光荣的企业文化…</p>
<p>后来尝试面试米哈游，不过因为学历问题挂掉了初筛（呜呜呜</p>
<p>抱着对米哈游的好奇心，投了一个外包到米哈游的岗位，面试虽然比其他甲方公司的面试还要难，但是依然拿下了。</p>
<p>经过一番犹豫，哪怕是外包，还是进了米家</p>
<ul>
<li>想要了解大公司的工作模式和流程（虽然大公司的繁文缛节早有耳闻，但是这些对于只在小公司干过的我，确实是很欠缺的东西）</li>
<li>文化认同，我希望在这里能认识到一些志同道合的朋友（确实结交到了很厉害又合得来的朋友）</li>
<li>不管怎么说… 我也是崩坏 2 时期就开始玩米家游戏的老玩家，虽然我只玩过崩 2 崩 3</li>
<li>工作环境，工作时间符合我所期望的，薪资也不错</li>
</ul>
<p>入职之后，感觉即使是外包，依然感觉是比小公司要强一点的。哪怕这只是开始………</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/3ce202f2d830419b0c8a0c8d17da9d49.jpeg" alt="因为不好意思问米咖在哪里，所以忘记用掉的迎新卡"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1614ef4f644869978291c7928a792545.jpeg" alt="办公室里的猫猫"></p>
<h2 id="新工作稳定，搬家"><a href="#新工作稳定，搬家" class="headerlink" title="新工作稳定，搬家"></a>新工作稳定，搬家</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/b709ca961e91fa7f6072a9278c0fb03c.jpeg" alt="搬家前的月亮"></p>
<p>十月份在宝山的租房就到期了，找到了新的室友一起租房，新住址在上海七宝<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/ca8992a3928dc2594b2acee7e866762b.jpeg" alt="小区里的小河"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/7b9c23e3eef59078bdafb8c8761a826b.jpeg" alt="刚搬家进去的房间"></p>
<h2 id="生活平稳向上"><a href="#生活平稳向上" class="headerlink" title="生活平稳向上"></a>生活平稳向上</h2><p>枫林园区<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/3c7ccc3ce4c96bc95d4d6a0410c26bd8.jpeg" alt="呵，米哈游的夕阳"></p>
<p>十月底的时候，意识到自己缺乏运动了。因为上班距离不到 9 公里，所以打算买一辆自行车</p>
<p>于是.. 铛铛~ 美利达 Crossway90<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/32a978d63388ee13352c8d5966be34e4.jpeg"></p>
<p>骑自行车上班确实有不一样的体验<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/885388d949f814bc0744a61d327a5cdd.jpeg" alt="七宝宝龙大蚂蚁"></p>
<h1 id="今年的旅游足迹"><a href="#今年的旅游足迹" class="headerlink" title="今年的旅游足迹"></a>今年的旅游足迹</h1><h2 id="上海青浦太阳岛"><a href="#上海青浦太阳岛" class="headerlink" title="上海青浦太阳岛"></a>上海青浦太阳岛</h2><p>公司团建去的这个地方，很不错呢。在不用担心花费的时候度假，松弛感确实很舒服。</p>
<p><a href="/gallery/Album/2022/2022.01%E4%B8%8A%E6%B5%B7%E9%9D%92%E6%B5%A6%E5%A4%AA%E9%98%B3%E5%B2%9B">一些照片</a></p>
<h2 id="春节回家"><a href="#春节回家" class="headerlink" title="春节回家"></a>春节回家</h2><p>这个大概不算旅游，我也只拍了一张照片。但是非常喜欢<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/18c7964e5ba663e5a4a59d102b1fbc60.jpeg" alt="夜晚的洛河岸"></p>
<h2 id="六月上海闲逛"><a href="#六月上海闲逛" class="headerlink" title="六月上海闲逛"></a>六月上海闲逛</h2><p>六月份解封之后，去了佘山，去了<a href="/gallery/Album/2022/2022.06%E4%B8%8A%E6%B5%B7%E8%B1%AB%E5%9B%AD">豫园</a>，总之就是闲逛，只能在上海本地</p>
<h2 id="新年旅行-宁波"><a href="#新年旅行-宁波" class="headerlink" title="新年旅行-宁波"></a>新年旅行-宁波</h2><p>在 22 年的结尾，我和朋友一起去了宁波，宁波给我留下了很好的印象呢</p>
<p>东钱湖的干芦苇，虽然是冬天，但那就是我心中的江南风景卷</p>
<p>宁波博物馆很好看，不论是内在的文物，还是建筑本身的设计感。《三体》的史强办公室就在这里取的景</p>
<p>品尝了一下宁波汤圆，缸鸭狗，印象是贵！太贵了…五十一笼的小笼包，吃的我好心疼… 另外缸鸭狗的糖桂花很不错</p>
<p>然后是印象极其深刻的芥末海蜇… 想起来就头皮发麻！</p>
<p><a href="/gallery/Album/2022/2022.12.31%E5%AE%81%E6%B3%A2/">照片点这里</a></p>
]]></content>
      <categories>
        <category>年末记忆</category>
      </categories>
  </entry>
  <entry>
    <title>在重复的每一天里看星星</title>
    <url>/posts/3625dd20/</url>
    <content><![CDATA[<h1 id="星星点点的记忆"><a href="#星星点点的记忆" class="headerlink" title="星星点点的记忆"></a>星星点点的记忆</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1686050041079.jpg"></p>
<h2 id="上海大雪"><a href="#上海大雪" class="headerlink" title="上海大雪"></a>上海大雪</h2><p>虽然不知道地球什么时候毁灭，但是上海确实下大雪了，虽然很短暂</p>
<video controls width="100%">
  <source src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/video_20230115_124246.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>

<p>(视频里大名鼎鼎的七宝万科，好像已经没了)</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/af3320469f48a72a80be9b9a3bb7cb12.jpeg" alt="雪花飘飘和飞机"></p>
<h2 id="春节回家"><a href="#春节回家" class="headerlink" title="春节回家"></a>春节回家</h2><p>在洛河边拍出了一张朦朦胧胧的照片，非常喜欢</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240731233101.jpg"></p>
<p>春节假期，在洛阳去了偃师的虎头山和首阳山，普通的散步道，简单愉快</p>
<p><a href="/gallery/Album/2023/2023.01%E6%B4%9B%E9%98%B3%E5%81%83%E5%B8%88/">照片在这里</a></p>
<p>从洛阳回上海坐飞机，到达上海的时候是夜晚</p>
<p>有幸看到了非常漂亮的俯瞰夜景</p>
<video controls width="100%">
  <source src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/video_20230130_182343.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>

<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20230130_181334.jpg"></p>
<h2 id="露营的想法"><a href="#露营的想法" class="headerlink" title="露营的想法"></a>露营的想法</h2><p>三月份是最有活力的时候，工作稳定，生活轻松。加上天气慢慢温暖，有了倾向户外的想法</p>
<p>春天的时候，去公园里和朋友一起坐着晒太阳，打打羽毛球。很舒服呢</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20230225_134635.jpg" alt="一些露营装备"></p>
<h2 id="团建"><a href="#团建" class="headerlink" title="团建"></a>团建</h2><p>在米哈游的团建，实际上就是出去吃饭。不论是正式员工还是 mi 岗员工，每个月都有 170 的团建报销额度。</p>
<p>所以团建单纯就是把这 170 给霍霍掉，总不能便宜了公司对吧</p>
<p>印象里项目组整体出去有两次，一次去吃了高丽菜，产品同事带领的。一次是项目管理带领的去玩（我没参加）</p>
<p>相比项目组整体，前端自己去的次数比较多（目的地海底捞居多）</p>
<p>不过捏… 据同事的不完全统计，每次一起下馆子，就会有个人被辞退或者离职</p>
<p>hhh…</p>
<h2 id="用心推荐的上海动物园"><a href="#用心推荐的上海动物园" class="headerlink" title="用心推荐的上海动物园"></a>用心推荐的上海动物园</h2><p>四月份，已经暖和起来了，去了上海动物园。</p>
<p>十分感叹，这才是我梦想中的动物园啊…</p>
<p><a href="/gallery/Album/2023/2023.04%E4%B8%8A%E6%B5%B7%E5%8A%A8%E7%89%A9%E5%9B%AD/">这里是在动物园拍的照片</a></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240801231933.png" alt="我喜欢小熊猫，最初就是冲着小熊猫去的"></p>
<h2 id="喜欢的生日礼物"><a href="#喜欢的生日礼物" class="headerlink" title="喜欢的生日礼物"></a>喜欢的生日礼物</h2><p>今年过生日收到了一盏星空投影灯，在夜晚，我的天花板会变成一片星空</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20230525_225140.jpg" alt="我喜欢星星灯！"></p>
<h2 id="小浪底水库"><a href="#小浪底水库" class="headerlink" title="小浪底水库"></a>小浪底水库</h2><p>六月端午，刚好是小浪底水库调水，和老爸开车就去了，场面相当壮观</p>
<div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/video_20230624_100113.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p><a href="/gallery/Album/2023/2023.06%E6%B4%9B%E9%98%B3%E5%B0%8F%E6%B5%AA%E5%BA%95/">更多照片在这里</a></p>
<h2 id="BW-amp-南京东路的二次元街道"><a href="#BW-amp-南京东路的二次元街道" class="headerlink" title="BW &amp; 南京东路的二次元街道"></a>BW &amp; 南京东路的二次元街道</h2><p>七月份参加了国内规模比较大的漫展，bilibili world</p>
<p>和高中时代带我一起玩 ACGN 的大姐姐一起去的，是为我打开新世界大门的大姐姐！</p>
<p>因为有前辈一起逛街聊天，所以非常愉快，这场漫展本身就是一个消费平台，并没有让人感动的氛围</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240802000238.png" alt="3023年了还能看到乌贼娘的痛车"></p>
<p><a href="/gallery/Album/2023/2023.07BilibiliWorld/">更多照片在这里哦</a></p>
<p>第二天去逛了淮海中路那边孤独摇滚联动的索尼店，其实是因为耳机坏了，去取修好的耳机（WF1000xm4）</p>
<p>不得不说索尼的品控真的很一般</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240802000550.png" alt="这套镭射卡，店里不给卖！结果最后我在网上买到了"></p>
<p>八月份的时候，有个朋友从亚美利加回国，准备在上海找个短期工作，并且体验一下魔都的二次元味道。</p>
<p>我们一起去了雾雨咖啡厅，一家东方主题的小咖啡店。店里铺满了店长的周边，是梦幻的小屋呢</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240802092636.png"></p>
<p>之后一起去了百米香榭，看到了很多二次元遗老的周边。果然心动的东西还是要去中古店找啊</p>
<p><a href="/gallery/Album/2023/2023.08%E4%BA%8C%E6%AC%A1%E5%85%83%E6%8E%A2%E5%BA%97/">这里是逛街的照片</a></p>
<h2 id="和表弟一起过十一假期"><a href="#和表弟一起过十一假期" class="headerlink" title="和表弟一起过十一假期"></a>和表弟一起过十一假期</h2><p>十月份的时候，毕业许久没找到工作的表弟决定来上海试试</p>
<p>但是从一开始我就没有抱有很大的希望</p>
<p>因为我觉得，找不到工作的原因并不是能力不够或者什么，而是不知道找什么，术业有专攻，没有专攻就不会有术和业</p>
<p>教给弟弟怎么找房子，然后找工作也给了一些建议，能做的事情也尽可能的帮了</p>
<p>之后，<a href="/gallery/Album/2023/2023.10%E5%8D%81%E4%B8%80/">十一假期就一起去逛景区啦</a></p>
<h2 id="函授学位证"><a href="#函授学位证" class="headerlink" title="函授学位证"></a>函授学位证</h2><p>十月底参加了学位证考试，请假去河南焦作的河南理工大学考试</p>
<p>这是我头一次来学校里面，学校还蛮大的，风景很不错</p>
<p>考试很简单，单考一门英语，难度还可以，程序员英语勉勉强强给糊弄过去了</p>
<p>十一月份的时候得到考试通过的结果，剩下的只有毕业论文就毕业啦</p>
<p>考完试，下午去爬云台山，云台山能玩两天的，不过和家人只逛了一下午，晚上就回家了</p>
<p><a href="/gallery/Album/2023/2023.10%E7%84%A6%E4%BD%9C/">照片在这里</a></p>
<h2 id="新的电子产品"><a href="#新的电子产品" class="headerlink" title="新的电子产品"></a>新的电子产品</h2><p>十一月份花了好多钱 QAQ</p>
<p>先后买了 MacBook 和小米手机</p>
<p>Mac 主要用来做开发用，写笔记什么的很舒服（但是从事后看来，我还是太理想了，装上 windows 虚拟机打 galgame 也挺舒服的（（（<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20231113_205048.jpg"></p>
<p>自己用贴纸装饰了手机，我喜欢小一点的屏幕，小米 14 是今年发布的手机中唯一一个个头比较小的（除了 iphone15）<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Image_1699971720201.jpg" alt="喵 喵 阿梓喵"></p>
<h1 id="工作心情"><a href="#工作心情" class="headerlink" title="工作心情"></a>工作心情</h1><p>春节后，工作地点就被调换了。本来是在枫林园区的，那边很好，办公室人也不太多，相对自由。</p>
<p>工作虽然比较多，但是也能每天安排在下班前搞定。</p>
<p>在枫林的日子整体是比较轻松愉快的，和同事也建立了深厚的友谊</p>
<p>由于我们是给原神组（甲方）做平台的，甲方希望我们和他们坐在一起，这样对接更方便…</p>
<p>听起来是很合理，但是实际上却非常不正确。</p>
<p>实际上，甲方是提出需求的，而且我们项目组这边有专门负责对接需求并且将需求转化为项目排期和需求文档（PRD）的产品经理和项目管理，实际上甲方对接的目标是两位 PM 就对了（产品和项目管理）</p>
<p>原神组权力还是比较大的，说让我们过去，我们就得过去。</p>
<p>理想中的大厂程序员，埋头实现需求，和上下游同事做好沟通就可以了。这样才能把程序员的价值发挥到最大化，就我本身而言，我也期望这样。实现自己价值的同时还能学习，还不被公司里的冗杂事情所干涉。</p>
<p>过去之后就不一样了，甲方会直接找到我们开发，同时也会给产品和项管更大的压力。总而言之，先前建立的工作流被新插入的，不懂开发的其他组给破坏了</p>
<p>工作排期出现了严重问题，产品也趋向于不合理，开发也经常做起客服的工作</p>
<p>除此之外，测试那边填上了一个不解决问题不工作，每天玩企业微信，只会问责的领导。</p>
<p>从测试那边开始，卷起来了。因为不合理的流程和不干活的人，这份工作逐渐也变得困难</p>
<p>对大家直接的影响就是，纯粹的工作时间变少了，工作量增加且不合理，排期更紧张，同事关系变得糟糕，压力更大</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20230320_194715.jpg" alt="下班路上哗啦啦的大雨"></p>
<p>这种崩坏是渐进的，从三月份开始，直到我今年（24）年离职。从我的视角来看，从三月份到 24 年三月份，先前努力工作的人要么被辞退，要么开始摆烂等着被辞退，实际不工作，喜欢搞流程，对上管理的那些人留了下来。</p>
<p>到 23 年年底，实际上已经有产品缩水的现象了，要么产品妥协，要么砍掉需求。因为实际问题是做不完，所有人每天加班也做不完。</p>
<p>也就是这个原因吧，我对米哈游失望了。</p>
<p>我是不怎么加班的，我痛恨体制性加班，为了给人做样子而加班。我会想尽办法去在上班的时间内完成我的工作</p>
<p>我相信我只要把精力投入工作，上班时间不摸鱼，下班时间自然也能走。</p>
<p>事实上我做到了，即使恪守不加班原则，我也完成了分配给我的需求，并且高质量完成（没出过什么线上问题）</p>
<p>所以，可能不太愉快，可能非常辛苦，但是我对自己在米哈游时期的表现是满意的</p>
<p>即使米哈游的工作氛围辜负了我的期望，我也没有认为自己选择来这里是错误的</p>
<p>我得到了我想要的东西</p>
<ul>
<li>大公司的经验</li>
<li>喜欢的游戏公司的憧憬</li>
<li>技术进步，代码更规范</li>
<li>结交到新的朋友</li>
</ul>
<h1 id="失去的东西和得到的东西"><a href="#失去的东西和得到的东西" class="headerlink" title="失去的东西和得到的东西"></a>失去的东西和得到的东西</h1><p>一整年都在殷实的工作，解决过各种问题，也见过职场百态</p>
<p>失去最多的东西是活力，因为上班很累，回到家之后如果不是有游戏搭子粘着我打游戏，甚至连电脑都懒得开….</p>
<p>去年写日记的习惯，今年也没有了。虽然在工作里积累了很多经验，但是博客更新却变少了</p>
<p>看的动画片少了。缺少了努力追逐偶像，追逐角色的动力，现在只是去关注，出周边了买，出视频了看，只能得到一时的满足</p>
<p>虽然有经常出去玩，但是生活的乐趣确实减少了。</p>
<p><strong>未来会以守护爱好作为前提去工作</strong>！</p>
<p>与此同时，得到的也很多嘛</p>
<p>首先就是钱钱，这一年确实赚到了钱钱，而且买了好多周边和手办，成就了学生时代的梦想（我的圆神手办！）</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240323_185019.jpg"><br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240323_185416.jpg"></p>
<p>这一年在互联网上和朋友交流更多，试着和大家见面，收到了不少的礼物。非常开心，非常珍贵</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240413_190517.jpg"></p>
<p>各种信件，还有来自霓虹的留学生信件，同事去霓虹旅游带给我的伴手礼护身符，作为生日礼物的 cd…</p>
<p>这些都是猫咪的宝物！</p>
<p>这一年吃到了很多美食，国内的国外的各种不同风格的菜。味蕾环游世界</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20230826_122300.jpg" alt="土耳其烤肉"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20231230_185647.jpg" alt="德意志香肠"></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>今年难忘的游戏：塞尔达，星之卡比<br>今年的年度歌手依然是鹿乃<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/7bc27ccca67cf84e.jpg"></p>
<p>总结下来，这是平稳和积累的一年</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/799dc46c3b47fa08.jpg" alt="月光！"></p>
]]></content>
      <categories>
        <category>年末记忆</category>
      </categories>
  </entry>
  <entry>
    <title>休息一下继续出发</title>
    <url>/posts/eb63e3a5/</url>
    <content><![CDATA[<div class="note orange flat"><p>文章写于 8 月份，这一年还没过完呢，后续还会更新</p>
</div>

<h1 id="摇曳吼姆"><a href="#摇曳吼姆" class="headerlink" title="摇曳吼姆"></a>摇曳吼姆</h1><p><a href="/gallery/Album/2024">2024 年所有的照片都在这里</a></p>
<p>封面：《变成菜变成花》</p>
<h2 id="天冷我不冷，逛街！"><a href="#天冷我不冷，逛街！" class="headerlink" title="天冷我不冷，逛街！"></a>天冷我不冷，逛街！</h2><p>我说谎了，其实我超懒的，我好怕冷，我好懒….</p>
<p>是有一个朋友把我给拉出来了，一月一号元旦，我们去了徐汇的美罗城</p>
<p>目的地是橡子共和国，吉卜力的周边专买店，以及美罗城其他的一些二次元店铺（太有活力了！）</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240802193120.png" alt="战利品！呜呜呜，花了七百多！"></p>
<p>算是给魔女宅急便这个动画片补票，所以相当满足</p>
<hr>
<p>之后春节，在武汉的朋友回家之前来上海旅游，我就请了假和他一起逛二次元圣地魔都（？）</p>
<p>我们在 B 站的会员购上发现了一个 LoveLive 同好会的售票，最初以为是小型漫展。感觉只是逛店也好无聊，所以两个人就一起参加了这个同好会</p>
<p>这是我头一次去 Live house 在此之前我只在孤独摇滚里见过 Live House</p>
<p>这个不能被称之为漫展，因为这就是同好会！</p>
<p>先从检票说起，门口的检票是很无所谓的，甚至… 后面直接把检票给撤了。检票的好处是可以拿电子票换取两张明信片</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240131_201232.jpg" alt="还有一个吧唧"></p>
<p>因为是 Live House 所以主要是演出，除了演出没有其他的</p>
<p>这是我参加过最最最有 ACG 氛围的演出了，台上的 coser 用心的表演，台下的每个观众都跟着唱</p>
<p>刚进去的一瞬间我是震惊的，我是不是来错地方了… 哇！我的浓度远远不够</p>
<p>后面，我和朋友推测这是一个社团搞的活动，台下的大都是熟人，他们好像都认识？</p>
<div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"https://honyan-gallery.oss-cn-hangzhou.aliyuncs.com/Album/2024/2024.01%E6%84%9A%E5%9B%AD%E8%B7%AF%E6%96%B0%E6%AD%8C%E7%A9%BA%E9%97%B4LoveLive%E5%90%8C%E5%A5%BD%E4%BC%9A/VID_20240131_154109.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>总之，这是我去过最棒的一次 ACG 演出，没有任何一次漫展或者剧场比得上这次！</p>
<h2 id="自驾舟山，学习开车"><a href="#自驾舟山，学习开车" class="headerlink" title="自驾舟山，学习开车"></a>自驾舟山，学习开车</h2><p>清明节假期的时候，我和两位关系很好的同事一起，租车去舟山自驾游玩。其目的一是玩，二是学习开车。</p>
<p>我高中毕业的时候就拿到驾照了，但是家里只有手动挡的车，我一开车老爸就骂我。索性不开了，反正我在外面也是打车比较多。目前没有开车的场景</p>
<p>有计划回家自驾游之后，开车就变成了比较重要的技能，于是下决心自己在上海学车！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803101800.png" alt="跨海大桥，自由的空气"></p>
<p>旁边有老司机同事坐着，也不会像老爸一样怼我。车撞坏了也有全险，没有心理包袱很快就上手了：在舟山三天是我开的，高速上也开了一段。开车还是好玩的~ 稍微有些累</p>
<p>在舟山前两天玩的蛮开心！去了海滩，第一天吃的鱼很棒，之后去普陀岛逛的有些累。第三天从绍兴回上海</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803101844.png"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803101922.png" alt="背着我的鹿乃一起去的"></p>
<p>从结交到朋友这方面出发，我还是非常感谢米哈游的</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/2024-%E8%88%9F%E5%B1%B1.jpg" alt="观沧海的两位大哥"><br>在舟山岛留下了不错的回忆</p>
<h2 id="跑路跑路"><a href="#跑路跑路" class="headerlink" title="跑路跑路"></a>跑路跑路</h2><p>在<a href="/posts/3625dd20/">去年的文章</a>里提到过，现在的工作因为一些没意义的东西变得令人失望。</p>
<p>到今年三月份的时候，身边的同事都要走光了，原来十几个人的前端团队，现在只剩下五六个了</p>
<p>三月份我也接到了裁员的通知，意料之中，或者有点期待吧，因为早先熟悉的同事都不在了，大家上班也没有了最初的冲劲，每天打交道的人都满口黑话，不切实际，需求还没进入开发就先推卸未来的事故责任，说几句就令人厌烦。</p>
<p>二月份的时候就在想，如果离职了，应该好好休息几个月。因为现在工作不好找，既然不好找就更不应该在裁员潮和人竞争。家里也有不少事情，家里在盖房子，而且这几年都没回家，没有关注过家人的生活状态。回家之后也想给自己充充电，学点新技能，寻找一些新的爱好</p>
<p>和长沙工作的朋友，活力满满的天津友人，以及几个无所不能的网友讨论了上班和休息的事情，也得到了支持</p>
<p>四月底的时候离职了，把行李打包回家，我在上海的行李好多（我真的是来过日子的，不只是打工），邮寄花了一千还多。</p>
<p>走之前逛了好多馆子，一直想去但是没去成的天文馆水族馆自然博物馆。上海的展馆还是非常棒的</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803103021.png" alt="sakana~~~ chinanago~~"></p>
<h2 id="从杭州回家"><a href="#从杭州回家" class="headerlink" title="从杭州回家"></a>从杭州回家</h2><p>行李寄回家之后，先去了杭州，游玩了西湖和良渚。</p>
<p>杭州的风景真棒啊！</p>
<p>吃了传说中无敌难吃的杭帮菜，西湖醋鱼</p>
<p>但是不够难吃，有点失望，后来问了店家，店家说稍微有些改进，把做醋鱼的西湖草鱼换成了鲈鱼（我就说嘛，吃起来没有土腥味也没有刺）</p>
<p>群友描述醋鱼的味道是这样的：浓郁的土腥伴随着酸涩不和谐的浓醋在嘴里爆开，漱口都难以清除的味道</p>
<p>嗯… 出于以上好奇去吃的… 所以稍微有点落差（不够难吃）</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803103352.png"></p>
<h2 id="回到洛阳生活"><a href="#回到洛阳生活" class="headerlink" title="回到洛阳生活"></a>回到洛阳生活</h2><p>虽然在外很长时间，但是各种生活习惯还是源自于洛阳的，比如自己做晚饭的话喜欢弄汤菜馍。</p>
<p>回洛阳之后才知道洛阳的美食是什么，油泼面，烧烤（每个地方的烧烤都不一样），糖葫芦，米皮凉皮擀面皮馄饨细米线，牛肉汤羊肉汤驴肉汤。卤肉和烧饼，烧鸡….</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240628_194847.jpg" alt="emmmmmm"></p>
<p>回家之后想做的事情</p>
<ul>
<li>拿到本科毕业证和学士学位证</li>
<li>考取摩托车驾照，买摩托车</li>
<li>装饰一下自己的屋子，搞出一张理想的桌面</li>
<li>更换证件，身份证，驾照</li>
<li>开车自驾游</li>
<li>玩好多我想玩的游戏</li>
<li>关注一下家里盖房子的事情</li>
<li>整理网站，更换域名和服务器</li>
<li>学习一下服务端渲染框架</li>
<li>思考未来去哪里生活</li>
</ul>
<p>事情算是不少的，不过时间很充裕</p>
<p>基本上是都完成了</p>
<h1 id="本田小狼与我"><a href="#本田小狼与我" class="headerlink" title="本田小狼与我"></a>本田小狼与我</h1><p>因为今年看了一个动画片，<a href="https://bangumi.tv/subject/294337">本田小狼与我</a></p>
<p>印象里，摩托车是很猛汉有些危险的东西，但是以这个动画片为契机去深入了解之后，我也懂得了摩托车的魅力</p>
<p>作为交通工具，有他独特的浪漫，就像小狼说的，Cub 可以带我去任何地方，但是 Cub 也有做不到的事情…</p>
<p>本田小狼有独特的青春的味道，不同于挥洒汗水映出彩虹的热血，而是温和平静的自我满足和愉悦，发动机的震动和开阔的视野在心里开拓出了一片新世界</p>
<p>最好的风景在路上</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240624_132101.jpg" alt="我的Cub"></p>
<p>六月底，拿到驾照之后，骑着摩托车去了一次洛阳陆浑，绕湖骑行的感觉真好</p>
<h1 id="可爱的安达达和岛村村"><a href="#可爱的安达达和岛村村" class="headerlink" title="可爱的安达达和岛村村"></a>可爱的安达达和岛村村</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Image_1707734292627.jpg"></p>
]]></content>
      <categories>
        <category>年末记忆</category>
      </categories>
  </entry>
  <entry>
    <title>什么是知识的诅咒</title>
    <url>/posts/4f7c2db1/</url>
    <content><![CDATA[<h2 id="什么是知识的诅咒"><a href="#什么是知识的诅咒" class="headerlink" title="什么是知识的诅咒"></a>什么是知识的诅咒</h2><blockquote>
<p><a href="https://www.zhihu.com/question/37635606">回答出处</a><br>当一个人知道一件事后，他就无法想象自己是不知道这件事的。</p>
</blockquote>
<p>人类有太多矛盾来源于信息(知识)不平等…</p>
<br>

<p>如果我不会 XXX…</p>
<br>

<p>平常会有人去思考这种问题吗，肯定是不会的，因为<code>自然而然</code>是不需要思考的，当实际地去思考这种问题时，会感觉十分可怕</p>
<br>

<p>因为信息的不平等，势必会造成立场不同…</p>
<br>

<p>身处知识的诅咒中，应该更多得去尝试理解，并非理解知识，而是去理解对方所处的知识环境。</p>
]]></content>
      <categories>
        <category>日常和心情</category>
      </categories>
  </entry>
  <entry>
    <title>刻在DNA里的食谱</title>
    <url>/posts/9e6b2ff9/</url>
    <content><![CDATA[<p>也许有那么几个小吃，听说过的人不多，甚至可能只有我吃过<br>小的时候我妈会给我做一些她看来很普通的东西给我吃。长大之后我才发现很少有人这样吃…<br>这些味觉记忆对于我来说都是珍贵的宝物</p>
<div class="note orange flat"><p>目前还没有拍照，等未来做了想起来我会加上照片的<br>嗯！一定会的！</p>
</div>

<h2 id="糖焙芝麻"><a href="#糖焙芝麻" class="headerlink" title="糖焙芝麻"></a>糖焙芝麻</h2><p>印象里这个是治咳嗽的偏方，用红糖做的。<br>后来我自己学会做了家里面的芝麻就…随后便开发了白糖版本<br>不过我觉得红糖更好吃</p>
<p>食材：</p>
<ul>
<li>白糖或红糖</li>
<li>芝麻(最好是生芝麻)</li>
</ul>
<p>这个超级简单的，连油都不需要放<br>凉锅撒上芝麻铺底，之后把糖洒在芝麻上面，这个量需要稍微控制一下<br>糖太多的话做出来就会比较硬，而且很甜很甜<br>糖太少的话芝麻会凝固不到一起…</p>
<p>开小火，很小的火，能把锅烧热就行的火<br>开始的时候不用管，等温度慢慢上来了之后，糖会融化<br>糖开始融化的时候，用不锈钢勺子慢慢拨动<br>等糖液化，焦化，就可以出锅了…<br>在冷却的时候，要稍微拍散一点，或者平铺在干燥的盘子上（不管用什么盛，一定不能有水）</p>
<p>冷却之后就可以吃啦…<br>是那种熟芝麻的香味混合焦化的糖的味道</p>
<h2 id="艾叶炒鸡蛋"><a href="#艾叶炒鸡蛋" class="headerlink" title="艾叶炒鸡蛋"></a>艾叶炒鸡蛋</h2><p>这个也是母上大人不知道从哪里听来的偏方…<br>可以驱寒，治感冒<br>流清鼻涕的时候吃这个确实有用</p>
<p>食材：</p>
<ul>
<li>盐</li>
<li>艾叶</li>
<li>鸡蛋</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/aiye.jpg"></p>
<p>鸡蛋碗里打散<br>艾叶去梗，用手碾的稍微碎一点<br>把艾叶洒在蛋液上，平铺一层就够了<br>艾叶放得太多会苦，而且会上火</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/aiye2.jpg"></p>
<p>锅里油烧热，倒入艾叶和蛋液的混合物，下锅就会凝固<br>先不着急打散或者反面，让鸡蛋下面稍微脆一点会很棒<br>煎熟撒盐就好啦</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/aiye3.jpg"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/aiyeok.jpg"></p>
<p>味道嘛…这个可能真的不是每个人都能接受的<br>艾叶的味道非常神奇，典型的中药香味，香味非常独特，而且很浓郁。<br>盐的作用仅仅是底味，其实也完全可以不加的</p>
<h2 id="煎香肠"><a href="#煎香肠" class="headerlink" title="煎香肠"></a>煎香肠</h2><p>有一种淀粉肠叫香嫩煎烤旺，双汇的<br>超市里面五块钱十根，超便宜的…<br>直接吃的话很难吃，反正我是不喜欢</p>
<p>不知道洛阳外面有没有赶会这种活动，就是一堆接地气的小地摊儿，在每个月固定的时间出来摆摊<br>赶集会嘛…我想应该是有的<br>赶会里就有不少卖这种煎香肠的，学校门口，尤其是小学门口也有很多</p>
<p>现在的烤冷面啊，炒面什么的，用的香肠是王中王或者台湾烤肠，虽然质量是比淀粉肠好得多，但是我觉得都没有淀粉肠煎的好吃</p>
<p>食材：</p>
<ul>
<li>油</li>
<li>淀粉肠（香嫩煎烤旺）</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/0B8D368891FB6DD0605F117A28235259.jpg"></p>
<p>把油烧热，香肠下锅不停地滚，表面焦黄之后撒上盐出锅<br>趁热吃，无敌好吃！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/xiangchang.jpg"></p>
<h2 id="腌生芹菜"><a href="#腌生芹菜" class="headerlink" title="腌生芹菜"></a>腌生芹菜</h2><p>这个是我爸首创的，现在我觉得我腌的比我爸腌的好吃<br>记得有一年赌气，晚上不跟他们吃完饭，自己躲屋子里面拿了根生芹菜，喝了点白开水…<br>黑历史…天呐…别学我犯傻</p>
<p>生芹菜直接吃很难吃，不信你试试</p>
<p>食材：</p>
<ul>
<li>芹菜，大芹菜或者西芹都可以</li>
<li>油</li>
<li>八角，茴香，香叶，葱花</li>
<li>糖，盐</li>
<li>醋</li>
<li>生抽</li>
<li>鸡精或者味精</li>
</ul>
<p>生腌就是生腌，不焯水<br>芹菜洗干净切成丁放碗里<br>加糖，醋，生抽<br>凉锅凉油，放进去一颗八角，一片香叶，一捏茴香，用小火把油烧热，火越小越好，这个过程时间稍微长一点<br>感觉自己手指头戳进锅里马上就会熟的时候，把葱花倒进去，开最大火爆香葱花<br>葱花黄了的时候赶紧关火<br>激动人心的时刻来了，把热油，连着葱花，香料一起倒进调好的芹菜碗里<br>噼里啪啦撩起白烟，太爽了！<br>这个时候加入适量鸡精，用干净筷子尝一粒芹菜的甜咸，最后放盐，搅匀<br>放凉之后封上保鲜膜，冰箱冷藏室半天到一天的时间就可以吃啦<br>腌的时间越久，芹菜的生味就越淡，和调料融合的就越好，一般不要超过一天半</p>
<div class="note flat"><p>其他还有的以后再写啦…<br>未来再做这些的时候拍个照片~</p>
</div>
]]></content>
      <categories>
        <category>日常和心情</category>
      </categories>
  </entry>
  <entry>
    <title>岛村抱月的一段话</title>
    <url>/posts/69888b58/</url>
    <content><![CDATA[<p>どっちかなんて　聞かないで欲しい</p>
<p>こんなことが続いて 疲れないはずばない</p>
<p>私は少しずつ削れていて まもうしていく感じだ</p>
<p>でも 一人は退屈だ</p>
<p>それは孤独よりずっと辛いたいがたい病気だ</p>
<p>それに抵抗する薬は</p>
<p>人とのあいだに 生まれる見えないものしかないだろ</p>
<p>だがら私は これからもまもうしていく</p>
<p>自分を保つために すこしずつ失っていくのだ</p>
<p>うまくいかなくで たくさん傷づけても</p>
<p>恨まないで</p>
<blockquote>
<p>安達としまむら</p>
</blockquote>
]]></content>
      <categories>
        <category>日常和心情</category>
      </categories>
  </entry>
  <entry>
    <title>最近在准备成考</title>
    <url>/posts/f0f9a3bb/</url>
    <content><![CDATA[<div class="note #41b6e6 flat"><p>2021.9.24</p>
</div>

<h2 id="最近的事"><a href="#最近的事" class="headerlink" title="最近的事"></a>最近的事</h2><p>目前着力于十月份的成人高考<br>博客更新会放缓一些…<br>（反正也没人看）<br>公司里也有些忙…没有好多鱼鱼可以摸了 orz</p>
<hr>

<p>毕业两三年越来越觉得专科学历往上发展受限制太大…<br>成考不见得有多大用处，但肯定有用<br>至少稍微了解一点马克思主义的皮毛还是挺有趣的</p>
<hr>

<p>自己的数学能力是真的不行….<br>准备一下政治，准备准备英语就差不多了<br>毕业之后看的国外网站也不少，但实际一做题发现什么都不会<br>果然学语言还是词汇量最重要啊…<br>程序语言也要至少记一记 Api</p>
<hr>

<p>反正一直忙着就对啦<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/sayachan.jpg" alt="saya"></p>
]]></content>
      <categories>
        <category>日常和心情</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客的使用笔记</title>
    <url>/posts/369146d4/</url>
    <content><![CDATA[<h1 id="文章置顶与置底"><a href="#文章置顶与置底" class="headerlink" title="文章置顶与置底"></a>文章置顶与置底</h1><p>在 Front-matter 区域添加 sticky 字段可以设定文章的置顶与置底，亦可以设置文章的排列顺序</p>
<p>这个功能是 <code>hexo-generator-index</code> 插件所提供的</p>
<p><a href="https://github.com/hexojs/hexo-generator-index">具体文档在这里</a></p>
<p>将 <code>sticky</code> 设置为 <code>true</code> 或者大于 1 的数字，可以设置置顶</p>
<p>将 <code>sticky</code> 设置为 <code>-1</code> 可以设置置底</p>
<h1 id="文章隐藏"><a href="#文章隐藏" class="headerlink" title="文章隐藏"></a>文章隐藏</h1><p>如果有一些文章只想记录不想发布在网站上，可以使用<code>hexo-hide-posts</code>插件</p>
<p>在 Front-matter 中设置 <code>hidden</code> 属性为 <code>true</code> 即可</p>
<p><a href="https://github.com/prinsss/hexo-hide-posts">文档在这里</a></p>
<h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p>一直用 <code>video</code> 标签插入视频，但是每次都要写好麻烦，而且不同浏览器的原生 video 标签样式是不同的</p>
<p>于是找到了 <code>hexo-tag-dplayer</code> 这个插件，用法很简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% dplayer url=&quot;&quot; key=value ... %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="hideToggle-标签"><a href="#hideToggle-标签" class="headerlink" title="hideToggle 标签"></a>hideToggle 标签</h1><p>有时候想要隐藏一些内容，手动点击才打开</p>
<details class="toggle" ><summary class="toggle-button" style="">点我打开</summary><div class="toggle-content"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle 点我打开 %&#125;</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>
</div></details>

<h1 id="更多标签"><a href="#更多标签" class="headerlink" title="更多标签"></a>更多标签</h1><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">butterfly.org 文档</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PicGo搭建图床（阿里云OSS）</title>
    <url>/posts/969161ab/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为<a href="https://hexo.io/zh-cn/docs/asset-folders">Hexo 的图片管理方式</a>非常不尽人意（也可能是我不习惯吧），所以产生了使用外部链接解决静态资源的问题。萌生出了搭建图床的想法，在 GitHub 上找到了<a href="https://github.com/Molunerfinn/PicGo">Picgo</a>这个软件<br><a href="https://molunerfinn.com/PicGo/">Picgo 官网</a></p>
<hr>
<p>这篇文章主要有以下几个步骤：</p>
<ol>
<li>开通购买阿里云对象存储服务</li>
<li>配置对象存储 OSS</li>
<li>域名购买和备案</li>
<li>OSS 绑定自定义域名</li>
<li>Picgo 配置</li>
<li>SSL 证书（HTTPS）</li>
</ol>
<h1 id="开通购买阿里云对象存储服务"><a href="#开通购买阿里云对象存储服务" class="headerlink" title="开通购买阿里云对象存储服务"></a>开通购买阿里云对象存储服务</h1><p>注册登录阿里云，搜索并找到<a href="https://www.aliyun.com/product/oss">对象存储 OSS</a><br>点击购买，选 40G 的就够了，很便宜 一年才九块钱<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/4HWG8%25%60F16%28NJPX6WL%28%60M2U.png" alt="购买OSS"><br>买好了之后进入控制台，开始进行配置</p>
<h1 id="配置对象存储-OSS"><a href="#配置对象存储-OSS" class="headerlink" title="配置对象存储 OSS"></a>配置对象存储 OSS</h1><p>进入<a href="https://oss.console.aliyun.com/overview">OSS 控制台</a><br>点击 Bucket 列表，创建 Bucket<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/W%604Q6BN7K67K79P1Y%25%29QCFI.png" alt="创建Bucket"><br>页面里会出现一个表单，根据需求自己填一下，注意设置公共读<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%28%24%7E%5B_8Z1JQXSF%287%285ERL2%7BU.png" alt="创建Bucket表单"><br>创建好之后，点击 bucket 名字进入存储空间在这里自己看着摸索啦…<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/%60%600%7D%7B0P3LA%7D5LFVXKDHEKRF.png" alt="Bucket管理"></p>
<h1 id="域名购买和备案"><a href="#域名购买和备案" class="headerlink" title="域名购买和备案"></a>域名购买和备案</h1><p>域名购买就不用说了…<br>备案是个无比烦人的事情…….</p>
<h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>由于 OSS 设置自定义域名需要已备案的域名，域名需要有一个服务器载体<br>所以<a href="https://www.aliyun.com/product/ecs">再买个服务器</a>吧…反正以后也是有用的…<br>买完之后，可以在<a href="https://ecs.console.aliyun.com/">服务器的控制台</a>找到<strong>公网 IP</strong></p>
<h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>记住公网 IP，去域名的服务商那里，解析域名<br>这里以腾讯云为例(至于为什么不是阿里一套包办，因为这个域名几年前就买了一直没用过)…<br>进入<a href="https://console.cloud.tencent.com/domain">腾讯云域名服务台</a>，点击解析<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/DO1%7BL1YXBR%5DC%5DJJPZV2E%28%60G.png" alt="腾讯云域名控制台"><br>在这里，把记录类型为 A 的记录值，更改为之前记录的公网 IP，<br>添加一条记录，记录类型为 CNAME，记录值为对象存储的域名：Bucket 名.oss-cn-地区.aliyuncs.com</p>
<blockquote>
<p>这是为了以后对象存储自定义域名方便</p>
</blockquote>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/F%24%7DAACOW80%288L7M%7DVNX%24PP4.png"></p>
<h2 id="进行备案"><a href="#进行备案" class="headerlink" title="进行备案"></a>进行备案</h2><p>进入阿里云，找到<a href="https://beian.aliyun.com/pcContainer/myorder">ICP 备案</a><br>根据表单一步一步地填写信息就好了…<br>备案有一些需要注意的：</p>
<ul>
<li>各地区备案政策不同</li>
<li>有些地区备案需要居住证，有些不需要</li>
<li><strong>网站备注一定要描述清楚</strong></li>
</ul>
<h1 id="OSS-绑定自定义域名"><a href="#OSS-绑定自定义域名" class="headerlink" title="OSS 绑定自定义域名"></a>OSS 绑定自定义域名</h1><p>进入 OSS 控制台-&gt;进入 Bucket-&gt;传输管理-&gt;域名管理-&gt;绑定域名<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/7RN%28OG1C%60BMOB%7E%24%24Q%24WRF30.png"></p>
<h1 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h1><p><a href="https://github.com/Molunerfinn/picgo/releases">去官网下载 PicGo</a><br>安装-&gt;运行-&gt;图床设置-&gt;阿里云 OSS<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/WUP36%7BW%5DK%24ZUVIS_FENS%5BLW.png" alt="配置PicGo"></p>
<h2 id="KeyId-amp-keySecret"><a href="#KeyId-amp-keySecret" class="headerlink" title="KeyId&amp;keySecret"></a>KeyId&amp;keySecret</h2><p>keyId 即 AccessKeyId<br>KeySecret 即 AccessKeySecret<br>进入<a href="https://account.console.aliyun.com/">阿里云控制台</a><br>鼠标放在头像上，选择<a href="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/26%28%5D%29%7B%29P1VFQ2XC4%7BJT%40AY1.png">AccessKey 管理</a><br>此时会弹出一个安全提示：询问是否继续使用 AccessKey<br>按个人需求即可<br>不论哪种方式，点击创建 AccessKey 按钮（使用子账户也有这个按钮）<br>验证身份信息，成功后将会弹出创建成功的弹窗，以及 ID 和 Secret 的信息<br>复制粘贴进对应的输入框就 OK 啦</p>
<h2 id="存储空间名-amp-存储区域"><a href="#存储空间名-amp-存储区域" class="headerlink" title="存储空间名&amp;存储区域"></a>存储空间名&amp;存储区域</h2><p>存储空间名，就是 Bucket 名<br>存储区域，在上海就是 oos-cn-shanghai，在北京就是 oss-cn-beijing</p>
<h1 id="SLL-证书，使用-HTTPS"><a href="#SLL-证书，使用-HTTPS" class="headerlink" title="SLL 证书，使用 HTTPS"></a>SLL 证书，使用 HTTPS</h1><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>进入域名解析控制台，点击 SSL：<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/(JS[9VZJ_$K$%%EVW0CMN5N.png"><br>申请 SSL 证书<br>等一段时间后，就可以申请成功，成功后可以下载证书<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Y($C%607PW6C%5BGQY$@72EUV~X.png"></p>
<h2 id="证书托管"><a href="#证书托管" class="headerlink" title="证书托管"></a>证书托管</h2><p>证书下载之后，压缩包里有.pem 和.key 的文件<br>进入 OSS 控制台<br>进入 Bucket-&gt;汆熟管理-&gt;域名管理<br>点击证书托管<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/H6IHMG_KTK%7DCK2Y6%5D7B%7D)UH.png"><br>把.pem 放进公钥一栏<br>把.key 放进私钥一栏<br>点击上传并托管就完成了</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次摩旅：洛阳-西安</title>
    <url>/posts/70ac33cd/</url>
    <content><![CDATA[<p>写下这篇文章的时候已经是十一假期了</p>
<p>我已经在西安暂住下来，并且开始逐渐了解这座城市</p>
<hr>
<p>我做了一件很不得了的事情，至少我自己觉得很厉害！</p>
<p>9.24 和 9.25 这两天的时间，骑上我的本田 cc110，从洛阳到达了西安</p>
<p>完成了人生第一次摩托车旅行</p>
<h1 id="每年最完美的季节"><a href="#每年最完美的季节" class="headerlink" title="每年最完美的季节"></a>每年最完美的季节</h1><p>小熊说，Cub 可以带我去任何地方，我还想去更远的地方</p>
<p>芝麻凛的爷爷说，我刚拿到驾照可能会不知道，季节交替的时候正式摩托旅行的好时机</p>
<div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Yuru%20Camp%20Season%203%2009%20%E7%89%87%E6%AE%B5.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>

<p>摩托旅行是视野最开阔的旅行方式，有速度，有风，眼前所有的东西全是景色</p>
<h1 id="出发前的心情和准备"><a href="#出发前的心情和准备" class="headerlink" title="出发前的心情和准备"></a>出发前的心情和准备</h1><h2 id="喜欢的事情"><a href="#喜欢的事情" class="headerlink" title="喜欢的事情"></a>喜欢的事情</h2><p>早在今年一月份的时候，看了动画片《本田小狼与我》</p>
<p>再之后，看了《摇曳露营 3》</p>
<p>这两个动画片让我知道摩托车可以是生活的一部分，是一种人生态度，是可以陪伴到老的东西</p>
<p>是接近我的理想，值得我去向往和追求的事物</p>
<p>七月份拿到驾照和车之后，我就摩拳擦掌想要试一次摩托旅行。于是从家里骑到了陆浑水库</p>
<p>在陆浑环湖骑行了一圈。我确信我做了正确的决定，我喜欢的就是这样的东西</p>
<p>我觉得这是给自己放暑假期间做的最有意义的事情了</p>
<h2 id="悠闲，还有些害怕"><a href="#悠闲，还有些害怕" class="headerlink" title="悠闲，还有些害怕"></a>悠闲，还有些害怕</h2><p>暑假过的很快，弟弟的暑假在九月份结束了，我意识到我差不多也该重新组织自己的生活了</p>
<p>我想把骑行继续下去，所以目光看向了洛阳旁边的城市西安，我觉得西安应该是一个很舒服的地方，吃得惯住得惯，骑行环境好，机车天堂</p>
<p>了解长途骑行的知识，护具的选购，防御性驾驶等等</p>
<p>买了护膝护肘护腰，一个很满意的后座包…</p>
<p>不害怕是不可能的，我知道国道路况没那么好，国道上非常多的挂车，可能会遇到横风，甚至落石</p>
<p>我也知道，如果出事故，一切都会结束。是很可怕的事情…</p>
<p>除此之外，我去西安是找工作的，如果没找到的话会怎样，重新安排之后的事情…</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240923_180908.jpg" alt="前一天的黄昏"></p>
<p>做出决定的时候，是稍微有些焦虑的，甚至犹豫这趟危险的骑行是不是不对的</p>
<p>后来朋友一句话把我点醒了</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20241005135813.png" alt="生活是体验"></p>
<p>在后座包上扣了芙莉莲的吧唧，伊蕾娜和小熊的挂饰，还有友人送的护身符</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20241005_230238.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20241005_230216.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>带着些许畏惧，还有许许多多期待，开始了第一次摩旅</p>
<h1 id="出发，我一直都在路上"><a href="#出发，我一直都在路上" class="headerlink" title="出发，我一直都在路上"></a>出发，我一直都在路上</h1><p>9.24 上午，去邻村喝了碗豆腐脑，吃了两个水煎包回家。把沉重的后座包放在车上</p>
<p>准备出发的时候遇到老爸，原来是出门给我买了点吃的，几个苹果，一袋玉米肠，还有点心。叮嘱我在路上多休息休息</p>
<p>由于行李空间有限，我只带了玉米肠和一个苹果还有说不出的感谢</p>
<p>穿上护具，目标 大雁塔，出发</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_095235.jpg" alt="背景就是我家"></p>
<h2 id="第一天：洛阳-潼关"><a href="#第一天：洛阳-潼关" class="headerlink" title="第一天：洛阳 - 潼关"></a>第一天：洛阳 - 潼关</h2><p>出发不一会儿就从瀍河上了洛阳段的 310 国道</p>
<p>一个转弯进入国道，视野开阔起来，洛阳段的国道修得真好，双向六车道，路边是山山水水和村庄</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_112030.jpg"></p>
<p>也许是因为我的详细计划，选了一个晴天的工作日，国道并没有我想象的那么危险，虽然大车也不少，但是路很宽</p>
<p>我骑在最右车道最右侧 30 公分的距离，如果左后视镜里有大车出现，我就乖巧地借用非机动车道，然后减速让大车先走</p>
<p>遵循这样的让车规则，渐渐在国道上稳定下来，不一会儿就到了三门峡</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_115032.jpg"></p>
<p>中午从义马下了国道，去吃了午饭，在饭店里休息了一个小时，继续出发！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_123242.jpg"></p>
<p>下午也是一路骑行，在每个服务区都做了休息</p>
<p>一下午在服务区一共遇到了五个摩友，他们有来自山西的，来自陕西的，甚至还有江苏的大哥</p>
<p>在服务区简单聊天十分愉快，大家都会相互夸赞，聊一聊车，聊一聊沿路的景点</p>
<p>很少和陌生人聊的这么愉快过</p>
<p>休息之后各自分别，打一个再见的招呼，继续旅行，有几个大哥还会在下个服务区碰面</p>
<p>实际上，我骑车的速度要比导航计算的速度更慢</p>
<p>六点的时候太阳落山，骑车是最不舒服的，虽然有遮光镜，但是太阳光依然会直射前方…</p>
<p>但是有些不服输吧，心里想着第一天要进入陕西界</p>
<p>终于到了潼关，在此落脚，还吃了个肉夹馍~</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_144022.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_151821.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_151831.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_154609.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_174457.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_181336.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_185622.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_204858.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240924_202615.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>如此，第一天的旅行结束了</p>
<h2 id="第二天：潼关-西安"><a href="#第二天：潼关-西安" class="headerlink" title="第二天：潼关 - 西安"></a>第二天：潼关 - 西安</h2><p>前一天在酒店提前查了一下陕西段国道的路况（因为在渭南市下国道的时候，那段路实在有些糟糕）</p>
<p>改变了路线，决定不再走 310 国道，取而代之的是堤顶路</p>
<p>骑过之后才知道，堤顶路是沿着渭河修建的一条穿过渭南-西安-宝鸡的道路</p>
<p>这条路简直是为了旅游者而修建的，限高 2.2m，限速 60，意味着没有大车，希望旅行者慢慢走</p>
<p>这条路两边是田地，村庄，渭河。红绿顶非常少，甚至还有农民在路上晒玉米（毕竟是这个季节嘛</p>
<p>好在车非常少，景色优美，骑行心情悠然自得，太享受了</p>
<p>这张照片是从国道走入一条无名道路上，这条道路连接着国道和堤顶路，走上这条无名路我就知道自己选对路了！</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_110425.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_105154.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_105200.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_105601.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_110015.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_110026.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_110319.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>如此惬意，美好，自由</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_111458.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_113452.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_114403.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_114433.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_114758.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_115155.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_120043.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_120051.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_120620.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>沿着这条路继续走下去，穿过了田野，穿过了华阴，见到渭河</p>
<p>这一路没有什么饭店，但是休息也没有国道上那么嘈杂，想停就停，停下也很安静</p>
<p>摘掉头盔，大口呼吸空气，吃点火腿肠，咬一口大苹果</p>
<p>休息的一刻，我也是自然的一部分</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_121533.jpg" alt="源远流长"></p>
<p>慢慢悠悠地，西安人民欢迎您</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_125837.jpg" alt="西安界"></p>
<p>在西安界内，也是先沿着渭河堤走，渭河就在旁边</p>
<p>到西安之后明显发现摩托车变多了，好多酷炫的摩托佬</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_133014.jpg","alt":""},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_131734.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p>大概四点半的时候到达大雁塔，大雁塔红绿灯前草草拍了个照片，旅程算是结束了</p>
<p>我做到了！！</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/IMG_20240925_154043.jpg" alt="到达！"></p>
<h1 id="到达后的感想"><a href="#到达后的感想" class="headerlink" title="到达后的感想"></a>到达后的感想</h1><details class="toggle" ><summary class="toggle-button" style="">一点点骑行建议</summary><div class="toggle-content"><p><strong>路线</strong></p>
<p>第一天：洛阳-潼关：310 国道<br>第二天：潼关-西安：堤顶路</p>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Screenshot_2024-09-19-18-28-21-200_com.autonavi.m.jpg","alt":"原定路线：310国道"},{"url":"https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/Screenshot_2024-10-05-20-21-46-270_com.autonavi.m.jpg","alt":"第二天的路线：堤顶路"}]</div>
      <div class="gallery-items">
      </div>
    </div>

<p><strong>准备</strong></p>
<p>出发前的准备非常重要，除了头盔护具这些提高生存率的东西之外</p>
<p>头盔最好是全盔，舒适性方面最重要的是不让眼睛吹风，这个非常非常重要，甚至可以准备一点玻璃酸钠滴眼液</p>
<p>衣服要考虑防风性能，晚上的时候也要兼顾保暖</p>
<p>护腰可以尝试一下，骑行是非常累的，想办法减轻自己的疲劳</p>
<p><strong>休息</strong></p>
<p>带一点咖啡因饮料也许可以集中精神，牛磺酸饮料对减轻疲劳也有用</p>
<p>合理安排骑行时间，最好每个小时休息一次，休息的时候吃点东西（带糖分的最好</p>
<p>关注油耗，国道上加油站比较少，加油很可能要下国道</p>
<p><strong>时间</strong></p>
<p>朝西方向骑行的时候，五六点钟太阳会直射眼睛，最好在这个时间前就休息吧</p>
<p>天黑不骑车，危险倍增，夜晚国道上大车会变得很多，最好的时间是工作日的上午和下午</p>
<p><strong>防御性驾驶</strong></p>
<p>防御性驾驶一定要学一下，或者锻炼一下</p>
<p>摩托车在国道上出事一般都是会转生异世界的….</p>
<p>而摩托车视野最开阔，天然适合防御性驾驶</p>
<p>预测未来道路会发生的事情，主动让车</p>
<p>国道非机动车道最好不要走，路的质量很糟糕，还有玻璃碴子…</p>
<p><strong>横风</strong></p>
<p>摩托车避免不了横风问题，国道上没有城市的高楼，横风会强劲又突然</p>
<p>需要特别注意两类横风</p>
<p>一个是自然横风，经过山和桥的时候，可能会遭遇很突然的风，甚至吹偏一个车道</p>
<p>一个是大车从身边穿过的风，挂车从身边过去的时候那个压迫感…. 过去之后会有个向大车方向吸过去的风，这个也不容小觑</p>
<p>对付横风最好的方法是减速，本田小狼速度上 70 就能感觉到横向风的影响，80 的时候会变得严重，骑帅不骑快就好啦！</p>
<p>对付大车的横风，就是走最右车道和减速让行（不要停车），走最右车道是因为不会被两个大车夹在中间</p>
</div></details>

<p>第一次摩旅毕业了！</p>
<p>出发前是害怕和不安</p>
<p>出发后是紧张，稳稳骑行，珍惜自己的生命，感慨国道上开阔的视野</p>
<p>对骑车技术有把握之后，开始欣赏沿路的美景，享受旅行</p>
<p>到达目的地后，先前的不安和紧张都不再有了，取而代之的是豁然开朗！</p>
<p>还有对自己的肯定：我做到了！！</p>
<p>最初考虑，我会在西安住上一个月去找工作</p>
<p>但是当我到达的时候，已经觉得骑到西安这件事本身的价值已经超越了找工作，担心找不到工作的忧愁也不存在了</p>
<p>毕竟，西安不是我的终点，只是其中一站而已</p>
<p>在民宿住下之后去泡了个澡，把疲惫溶解在温泉里…</p>
<p>真让人脸扁~~</p>
<p><strong>旅途的风景都在路上，生活是体验。我一直都在路上，我一直都在体验</strong></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20241005223412.png"></p>
]]></content>
      <categories>
        <category>本田小狼与我</category>
      </categories>
      <tags>
        <tag>摩托车</tag>
      </tags>
  </entry>
  <entry>
    <title>7个作弊般的实用设计技巧（翻译）</title>
    <url>/posts/aa010669/</url>
    <content><![CDATA[<div class="note orange flat"><p>原文链接：<a href="https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886">7 Practical Tips for Cheating at Design</a></p>
<p>原文作者：Adam Wathan &amp; Steve Schoger</p>
<p>一篇讲程序员自己构建页面的技巧的文章，Tailwind CSS 作者写的。</p>
<p>这些技巧确实很实用</p>
<p>自己翻译的，英语水平很一般，查单词意思整理语言之后写下来的东西。不免有错误，欢迎指出</p>
</div>

<h1 id="7-个作弊般的实用设计技巧"><a href="#7-个作弊般的实用设计技巧" class="headerlink" title="7 个作弊般的实用设计技巧"></a>7 个作弊般的实用设计技巧</h1><h2 id="用策略来改善你的设计，而不是用天赋。"><a href="#用策略来改善你的设计，而不是用天赋。" class="headerlink" title="用策略来改善你的设计，而不是用天赋。"></a>用策略来改善你的设计，而不是用天赋。</h2><p>每个开发者都不可避免地会遇到需要自己去决定页面设计的场景，不论开发者们是否喜欢。</p>
<p>也许公司没有一个全职的设计师，或者你自己想做一些什么东西。也许你正在 hacking 一个项目，并且你喜欢这个项目比另一个 bootstrap 网站更好看。</p>
<p>这很容易让你甩甩手抱怨，_干哦，我这辈子估计都弄不好，我又不是个设计师_。但事实证明，有很多技巧可以让你快速地提升设计等级，而且不一定非得有平面设计师的背景。</p>
<p>今天，这儿有些简单的好点子可以该改善你的设计</p>
<hr>
<h2 id="1-使用颜色（color）和粗细（weight）来控制等级，而不是大小（size）"><a href="#1-使用颜色（color）和粗细（weight）来控制等级，而不是大小（size）" class="headerlink" title="1.使用颜色（color）和粗细（weight）来控制等级，而不是大小（size）"></a>1.使用颜色（color）和粗细（weight）来控制等级，而不是大小（size）</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_KYZikUrx9F02cJU9kpn_gQ.png"></p>
<p>设计 UI 的时候，一个常见的错误是想把重要信息的字体大小设置的更大一些。</p>
<p><em>这个不是很重要吗，让他大点儿啊。</em></p>
<p><em>这个次要，那就小点儿。</em></p>
<p>比起让 font-size 承担所有的区别，不如试试让 color 和 font-weight 来做这件事。</p>
<p><em>这个不是很重要吗，让他粗点儿。</em></p>
<p><em>这个没那么重要，用个轻点的颜色就好了。</em></p>
<p>试着用起来两到三种 color 来区分着重项：</p>
<ul>
<li>用一个暗（dark）一些的颜色（注意不是黑色 black）来修饰主要的内容，比如大标题</li>
<li>用灰色来修饰次要的内容，比如一篇文章的发表日期</li>
<li>用浅灰色来修饰辅助性的内容，比如页脚的版权声明</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_2YuCOOCjdMEJxg-Lb6G2FA.png"></p>
<p>类似地，两个 font-weight 也能做到：</p>
<ul>
<li>对于大多数的内容使用通常的 font-weight（400 或者 500）</li>
<li>对于想要强调的文本使用更重的 font-weight（600 或者 700）</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_AHrVF0vTtj-yoyhmBNHNLA.png"></p>
<p><strong>日常工作中，不要使用低于 400 的 font-weight</strong>，他们可以用于大标题，但小标题实在太小了。如果你想用轻一些的字重来淡化某些内容，可以使用淡一些的颜色或者较小的字体来替代。</p>
<hr>
<h2 id="2-不要在有颜色的背景上使用灰色字体"><a href="#2-不要在有颜色的背景上使用灰色字体" class="headerlink" title="2.不要在有颜色的背景上使用灰色字体"></a>2.不要在有颜色的背景上使用灰色字体</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_ajjrhpp-l3GDG7ne7Am8fw.png"></p>
<p>使用一个看起来轻一点的灰色字体去淡化内容在白色背景里是个不错的方法，但是在有颜色的背景里就不怎么棒了。</p>
<p>这是因为往往我们觉得灰色字体在白色背景上，相对黑色而言<em>对比度会降低</em>。</p>
<p>事实上，<strong>让文本逐渐接近背景色可以创造出层次感</strong>，而不是使用灰色。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_CNaej5BrPr9lWTMAfllfdw.png"></p>
<p>有两种方法可以在有颜色的背景上处理对比度：</p>
<h3 id="1-减少白色字体的透明度"><a href="#1-减少白色字体的透明度" class="headerlink" title="1. 减少白色字体的透明度"></a>1. 减少白色字体的透明度</h3><p>使用带有透明度的白色字体，可以让背景色渗入到字体中一些，从而淡化文字在背景中的显示。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_OMntEW2V5jPXrZR6CjrBFQ.png"></p>
<h3 id="2-手动地从背景色中采集一个颜色"><a href="#2-手动地从背景色中采集一个颜色" class="headerlink" title="2. 手动地从背景色中采集一个颜色"></a>2. 手动地从背景色中采集一个颜色</h3><p>当背景图是图片或者花纹时，或者降低了透明度之后，感觉字体很沉闷，这个方法要比减少透明度更好。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_d5Ft9yND08hTdmXgFTLQJw.png"></p>
<p>调一个色调和背景相同，饱和度和亮度不同的颜色。这个颜色让你看起来舒服就好。</p>
<hr>
<h2 id="3-调一调阴影的偏移量"><a href="#3-调一调阴影的偏移量" class="headerlink" title="3.调一调阴影的偏移量"></a>3.调一调阴影的偏移量</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_LisFGBtYOvR-3cwFTzTDUw.png"></p>
<p>比起使用更大的模糊和扩散值让阴影让盒子更加醒目，不如加一个垂直方向的偏移。</p>
<p>这会让盒子看起来更加自然，因为它模拟了一个从上面照射下来的光源。就像是我们在现实中看东西的视角。</p>
<p>这个建议同样适用于诸如 input 输入框之类的内阴影的使用。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_qWSsYovqBDKF87f1IVMHsQ.png"></p>
<p>如果你觉得这些关于阴影的设计很有意思，可以尝试一下这本神奇的读物：<a href="https://material.io/design/material-design/elevation-shadows.html"> Material Design Guidelines</a>。</p>
<hr>
<h2 id="4-少用一些边框"><a href="#4-少用一些边框" class="headerlink" title="4.少用一些边框"></a>4.少用一些边框</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_fNm6hXxnBvIcHGp9DQRdRQ.png"></p>
<p>当你想让两个元素分开的时候，不要立即给他们之间塞一个分隔线。</p>
<p>虽然边框是一个区分多个元素很好的做法，但它并不是唯一的方法。使用太多的边框容易让界面看起来繁杂凌乱。</p>
<p>接下来你想使用边框的时候，不妨试试这些建议：</p>
<h3 id="1-使用-box-shadow-替代"><a href="#1-使用-box-shadow-替代" class="headerlink" title="1.使用 box-shadow 替代"></a>1.使用 box-shadow 替代</h3><p>盒子阴影可以像边框一样勾勒出一个元素的轮廓，在达到分隔元素目的的同时，微妙地不让人觉得繁杂。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_Pm5PyS0vZ65GuGu8erPRfA.png"></p>
<h3 id="2-使用两个不同的背景色"><a href="#2-使用两个不同的背景色" class="headerlink" title="2.使用两个不同的背景色"></a>2.使用两个不同的背景色</h3><p>给两个相邻的元素加上稍稍不同的背景色，可以让人们感受到两个元素的差异。如果你在不同的背景色中间增加了边框，试试把边框去掉。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_qWSsYovqBDKF87f1IVMHsQ.png"></p>
<h3 id="3-添加一点额外的空隙"><a href="#3-添加一点额外的空隙" class="headerlink" title="3.添加一点额外的空隙"></a>3.添加一点额外的空隙</h3><p>有没有什么更好的方法可以更简单的让元素显得分离呢？在不添加新的 UI 的情况下，用空隙把元素分开是个不错的方法。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_7CEsoYdtFPjMBqpDB58HqQ.png"></p>
<hr>
<h2 id="5-不要让小的图标显得炸裂（Don’t-blow-up-icons-that-are-meant-to-be-small）"><a href="#5-不要让小的图标显得炸裂（Don’t-blow-up-icons-that-are-meant-to-be-small）" class="headerlink" title="5.不要让小的图标显得炸裂（Don’t blow up icons that are meant to be small）"></a>5.不要让小的图标显得炸裂（Don’t blow up icons that are meant to be small）</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_57g05Gl-FjDtcCUtaPPOLw.png"></p>
<p>如果你的设计需要用到一些大图标（_比如页面中有特征的区域_），你也许会本能的拿起一些免费图标就用，比如<a href="https://fontawesome.com/">FontAwesome</a>或者<a href="http://www.zondicons.com/">Zondicons</a>。然后增加图标的尺寸，直至满足自己的需求。</p>
<p>反正它们是矢量图，增加尺寸也不会糊？</p>
<p>确实，矢量图放大也不会糊。<strong>在 16-24 像素下绘制的图标，硬生生地放大三四倍，怎么看都不会让人觉得专业。</strong>他们会因为缺少细节而显得又矮又胖。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_dJyk3SNvrxuTEuZa7fiY0g.png"></p>
<p>如果你得到的是一个小图标，并且没有什么其他的填充。那么可以试试把它放在一个有形状的背景中。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_Og6TmKmbZg7qauQymzhxBQ.png"></p>
<p>这么做可以让图标更加符合它本身设计时的尺寸，同时也填充了更大的空间。</p>
<p>如果你有足够的预算，那么你可以设计一些用得到的大尺寸图标，比如<a href="https://heroicons.com/">Heroicons</a>或者<a href="https://useiconic.com/">Iconic</a>。</p>
<h2 id="6-用一些突出的有颜色的边框，给平淡的设计加点料"><a href="#6-用一些突出的有颜色的边框，给平淡的设计加点料" class="headerlink" title="6.用一些突出的有颜色的边框，给平淡的设计加点料"></a>6.用一些突出的有颜色的边框，给平淡的设计加点料</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_uwsVo34TWzKM91Gyqsh88Q.png"></p>
<p>如果你不是个平面设计师，那么该如何在你的 UI 里添加一些摄影或者插画那样的视觉魅力呢。</p>
<p>一个简单的小技巧，在你的 UI 里添加一些彩色的边框，从而让整个界面看上去不那么平淡乏味。</p>
<p>举个例子，比如这个提示框的沿边：</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_jEivJuYRI3PbrGYVccKkHA.png"></p>
<p>…或者这个高亮的导航：</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_7Pf5gu0r3uPi7W5vR9dcWQ.png"></p>
<p>…甚至横跨整个页面布局：</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_YMrMBgjpbuTs_WqdbhymNg.png"></p>
<p>这不需要任何平面设计天赋就可以创造一个多彩的 UI，而且可以很大程度的让人觉得你的网站很有“设计感”。</p>
<p><em>觉得配色很难？试试从一个有边界的调色板里（比如<a href="https://dribbble.com/shots">Dribbble’s color search</a>）选择颜色。这样可以避免被传统的无边界调色板淹没灵感。</em></p>
<hr>
<h2 id="7-不是每个按钮都必须要有背景色"><a href="#7-不是每个按钮都必须要有背景色" class="headerlink" title="7.不是每个按钮都必须要有背景色"></a>7.不是每个按钮都必须要有背景色</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_SIfuJd-3ZFYyA_W1Nme1Yw.png"></p>
<p>当用户在界面上进行操作时，很容易掉进一些带有语义的设计陷阱里。</p>
<p>像 Bootstrap 这样的框架，在你添加按钮的时候，会鼓励你使用一个有语义性的样式：</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_2xkDfSjvq7Xyb_ceInrMpw.png"></p>
<p><em>“这是个有积极性的操作？给这个按钮加上绿色。”</em></p>
<p><em>“这是要删除数据？把这个按钮变红。”</em></p>
<p>语义是按钮设计的一个重要组成，但是通常会忽略一个维度更高的设计：<strong>重要性的层次结构</strong>。</p>
<p>页面上的每个操作都在一个表示重要性的金字塔中。大多数页面里都只有一个真正的主要操作，几个不太重要的次级操作，以及一些很少使用的第三级操作。</p>
<p><strong>在设计这些操作的时候，更重要的是传达它们在重要性金字塔中的位置。</strong></p>
<ul>
<li>主要操作应该是很明显的，坚实的（solid），高对比度的背景色非常合适</li>
<li>次要操作应该是明确的，但不突出。低对比度的背景色，或者大纲样式是不错的选择</li>
<li>三级操作应该是可以发现但是不显眼的。把它们设计成跟链接差不多的样式最合适了</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1__tq33tZkr3DZuZgP08Jcrw.png"></p>
<p><em>“那一些破坏性的操作呢，应该把他们都做成红色吗？”</em></p>
<p>并不一定！如果这个破坏性操作不是这个页面的主要操作，那么给他二级或者三级操作的处理方式更合适。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_1CxYaUc6Bk-pTRXH5TQonw.png"></p>
<p>保存一个又大又红又粗的样式，来修饰页面上具有破坏性的主要操作。比如这个弹窗：</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_cuYcwjOO26sKHImHaY6yFA.png"></p>
<hr>
<h2 id="觉得这篇文章不错？我们刚出了一本书！"><a href="#觉得这篇文章不错？我们刚出了一本书！" class="headerlink" title="觉得这篇文章不错？我们刚出了一本书！"></a>觉得这篇文章不错？我们刚出了一本书！</h2><p><a href="https://www.refactoringui.com/book">Refactoring UI</a>。我们所知道的关于设计的一切都打包在这里，包含了一本书，一些截图，一个组件库以及一些定制设计的资源等。</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/1_sU4xq5W_xPjKPvSvQvOOzw.png"></p>
<p>已经有<a href="https://www.refactoringui.com/book/kind-words">超过六千人</a>购买了，而且风评相当不错。</p>
<p>如果有兴趣，可以到<a href="https://www.refactoringui.com/book">RefactoringUI.com/book</a>去学到更多的东西，并且下载一个样本。</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapbox使用笔记</title>
    <url>/posts/2416a3fc/</url>
    <content><![CDATA[<h1 id="什么是-mapbox"><a href="#什么是-mapbox" class="headerlink" title="什么是 mapbox"></a>什么是 mapbox</h1><p>近期公司有一个在地图上展示大量数据的项目。需要可以在国内访问国外的地图，同时可以累加开发</p>
<p>最后我们找到了一个相当靠谱但是也比较复杂的地图库，就是 mapbox</p>
<p>就记录一下自己看过和用过的吧</p>
<p><a href="https://www.mapbox.cn/">mapbox 中国</a></p>
<p><a href="https://www.mapbox.cn/mapbox-gl-js/api/">mapbox gl js</a></p>
<p><a href="https://docs.mapbox.com/">mapbox 文档</a></p>
<p>mapbox 中国也有文档，但是不是最新的，不过可以参考</p>
<h2 id="mapbox-GL-应该怎么用"><a href="#mapbox-GL-应该怎么用" class="headerlink" title="mapbox GL 应该怎么用"></a>mapbox GL 应该怎么用</h2><p>假设想搞出来这样一个东西，一个可以操作的地图上，有上亿的数据需要显示，这时候 mapbox gl 就非常合适</p>
<p>前端需要做的是根据<code>mapbox gl js</code>的文档完成地图上的一些交互功能，比如地图控件，地图层的控制，地图的缩放移动事件等等。后端需要准备一份数据，毕竟那么多的点点不是随机生成的呀，具体的细节我不太清楚，<a href="https://docs.mapbox.com/studio-manual/examples/">就只放一份文档在这里</a>。地图的层数据，甚至地图的样式，都是一个链接。前端拿到这个链接之后就可以获取到数据，按照 mapbox 的约定将数据呈现地图里</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/mapbox-cnn.png" alt="美国人种分布"></p>
<h1 id="先把地图搞出来"><a href="#先把地图搞出来" class="headerlink" title="先把地图搞出来"></a>先把地图搞出来</h1><p>上手最快的方法，就是看<a href="https://docs.mapbox.com/mapbox-gl-js/example/">Examples</a></p>
<p>正确引入地图的 script 和 link 之后，和绝大多数地图一样，接管一个 html 元素，把地图 new 出来就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 哦对了，还要记得设置accsessToken</span></span><br><span class="line">mapboxgl.<span class="property">accessToken</span> = <span class="string">&quot;你的accessToken&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: <span class="string">&quot;map&quot;</span>, <span class="comment">// container ID</span></span><br><span class="line">  <span class="attr">style</span>: <span class="string">&quot;mapbox://styles/mapbox/streets-v11&quot;</span>, <span class="comment">// style URL</span></span><br><span class="line">  <span class="attr">center</span>: [-<span class="number">74.5</span>, <span class="number">40</span>], <span class="comment">// starting position [lng, lat]</span></span><br><span class="line">  <span class="attr">zoom</span>: <span class="number">9</span>, <span class="comment">// starting zoom</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="mapbox-GL-的一些概念"><a href="#mapbox-GL-的一些概念" class="headerlink" title="mapbox GL 的一些概念"></a>mapbox GL 的一些概念</h1><p>这关系到怎么去使用 mapbox 的功能</p>
<p>只说一些简单常用的</p>
<p>复杂的拎出来单独写写</p>
<h2 id="Map，也就是-new-mapboxgl-Map"><a href="#Map，也就是-new-mapboxgl-Map" class="headerlink" title="Map，也就是 new mapboxgl.Map"></a>Map，也就是 new mapboxgl.Map</h2><p>主要的作用是初始化地图，得到一个地图的实例</p>
<p>传入参数，确定地图最初的样子</p>
<p>得到这个地图实例之后，<a href="https://docs.mapbox.com/mapbox-gl-js/api/map/">就可以操作很多事情了</a></p>
<h2 id="控件-Controls"><a href="#控件-Controls" class="headerlink" title="控件(Controls)"></a>控件(Controls)</h2><p>地图的控件，也就是地图的缩放按钮，导航按钮，比例尺之类的东西</p>
<p>这些都很简单啦</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键方法</span></span><br><span class="line"><span class="comment">// addControl  第一个参数是控件，第二个参数是位置</span></span><br><span class="line">map.<span class="title function_">addControl</span>(<span class="keyword">new</span> mapboxgl.<span class="title class_">NavigationControl</span>(), <span class="string">&quot;top-left&quot;</span>);</span><br><span class="line"><span class="comment">// getCanvas  返回地图的canvas元素</span></span><br><span class="line"><span class="keyword">const</span> canvas = map.<span class="title function_">getCanvas</span>();</span><br><span class="line"><span class="comment">// getContainer  返回地图的容器</span></span><br><span class="line"><span class="keyword">const</span> container = map.<span class="title function_">getContainer</span>();</span><br></pre></td></tr></table></figure>

<h2 id="地图的限制-Constraints"><a href="#地图的限制-Constraints" class="headerlink" title="地图的限制(Constraints)"></a>地图的限制(Constraints)</h2><p>主要用来获得一些地图的属性，或者对地图进行一些选项设置</p>
<p>列举几个常用的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">getMinZoom</span>();</span><br><span class="line">map.<span class="title function_">setMinZoom</span>();</span><br><span class="line">map.<span class="title function_">getMaxZoom</span>();</span><br><span class="line">map.<span class="title function_">setMaxZoom</span>();</span><br><span class="line"><span class="comment">// ----</span></span><br><span class="line"><span class="comment">// map.resize()</span></span><br><span class="line"><span class="comment">// Resize the map when the map container is shown</span></span><br><span class="line"><span class="comment">// after being initially hidden with CSS.</span></span><br><span class="line"><span class="keyword">const</span> mapDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (mapDiv.<span class="property">style</span>.<span class="property">visibility</span> === <span class="literal">true</span>) map.<span class="title function_">resize</span>();</span><br></pre></td></tr></table></figure>

<h2 id="地图的状态-Movement-state"><a href="#地图的状态-Movement-state" class="headerlink" title="地图的状态(Movement state)"></a>地图的状态(Movement state)</h2><p>地图是否正在移动，是否正在缩放，是否正在旋转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">isMoving</span>();</span><br><span class="line">map.<span class="title function_">isZooming</span>();</span><br><span class="line">map.<span class="title function_">isRotating</span>();</span><br></pre></td></tr></table></figure>

<h2 id="标记-Markers"><a href="#标记-Markers" class="headerlink" title="标记(Markers)"></a>标记(Markers)</h2><p>在地图上做一个点标记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> marker = <span class="keyword">new</span> mapboxgl.<span class="title class_">Marker</span>(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">  <span class="attr">draggable</span>: <span class="literal">true</span>, <span class="comment">// 能否拖拽</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">setLngLat</span>([<span class="number">30.5</span>, <span class="number">50.5</span>]) <span class="comment">// 设置marker的位置</span></span><br><span class="line">  .<span class="title function_">addTo</span>(map); <span class="comment">// 把marker放进地图里</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.mapbox.com/mapbox-gl-js/api/markers/#marker">选项有好多，还可以设置图片啊偏移啊什么的</a></p>
<h2 id="地图事件和事件的挂载卸载-events-amp-working-with-events"><a href="#地图事件和事件的挂载卸载-events-amp-working-with-events" class="headerlink" title="地图事件和事件的挂载卸载(events &amp; working with events)"></a>地图事件和事件的挂载卸载(events &amp; working with events)</h2><p><a href="https://docs.mapbox.com/mapbox-gl-js/api/map/#instance-members-working-with-events">挂在和卸载地图的事件用的是<code>map.on</code>, <code>map.off</code>, <code>map.once</code></a></p>
<p>第一个参数是事件名，比如 click，第二个参数是地图的层 id，类似于指定事件的 target，第三个参数是时间触发的函数(listener)</p>
<p><a href="https://docs.mapbox.com/mapbox-gl-js/api/map/#map-events">一些常用的事件</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩放结束事件 zoomend</span></span><br><span class="line"><span class="comment">// 根据缩放等级改变一个元素里的内容</span></span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&#x27;zoomend&#x27;</span>， <span class="string">&#x27;layer_id&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> zoom = map.<span class="title function_">getZoom</span>()</span><br><span class="line">  <span class="keyword">const</span> countTip = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.count-tip span&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span>(zoom &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    countTip.<span class="property">textContent</span> = <span class="string">&#x27;5000&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(zoom &gt;= <span class="number">4</span> &amp;&amp; zoom &lt; <span class="number">7</span>) &#123;</span><br><span class="line">    countTip.<span class="property">textContent</span> = <span class="string">&#x27;1000&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(zoom &gt;= <span class="number">7</span> &amp;&amp; zoom &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    countTip.<span class="property">textContent</span> = <span class="string">&#x27;500&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(zoom &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    countTip.<span class="property">textContent</span> = <span class="string">&#x27;200&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="生命周期-Lifecycle"><a href="#生命周期-Lifecycle" class="headerlink" title="生命周期(Lifecycle)"></a>生命周期(Lifecycle)</h2><p>地图的生命周期函数，比如加载之后触发一个事件，出错了的事件…</p>
<p><a href="https://docs.mapbox.com/mapbox-gl-js/api/map/#events-lifecycle">看文档</a></p>
<p>常用的是 load</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;&#125;);</span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A load event occurred.&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>还有 error</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> mapboxgl.<span class="title class_">Map</span>(&#123;&#125;);</span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A error event occurred.&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="图片-images"><a href="#图片-images" class="headerlink" title="图片(images)"></a>图片(images)</h2><p>给地图里面添加图标之类的东西，需要先<code>loadImage</code>然后<code>addImage</code></p>
<p>然后再<code>loadImage</code>的 callback 中继续</p>
<p>loadImage 的第一个参数是图片的链接，或者 base64，第二个参数是回调</p>
<p>addImage 的第一个参数是给图片一个名字，第二个参数是图片，<a href="https://docs.mapbox.com/mapbox-gl-js/api/map/#map#addimage">第三个参数是一些选项</a></p>
<blockquote>
<p>The image as an HTMLImageElement , ImageData , ImageBitmap or object with width , height , and data properties with the same format as ImageData</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要在地图层中加载图片</span></span><br><span class="line">map.<span class="title function_">loadImage</span>(<span class="string">&quot;path/to/image.png&quot;</span>, <span class="function">(<span class="params">error, image</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  map.<span class="title function_">addImage</span>(<span class="string">&quot;image-name&quot;</span>, image);</span><br><span class="line">  <span class="comment">// map.addSource()</span></span><br><span class="line">  <span class="comment">// map.addLayer()</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 另一种</span></span><br><span class="line"><span class="keyword">const</span> icon = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">icon.<span class="property">src</span> = <span class="string">&quot;path/to/image.png&quot;</span>;</span><br><span class="line">icon.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  map.<span class="title function_">addImage</span>(<span class="string">&quot;icon-name&quot;</span>, icon);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;layout&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;icon-image&quot;</span>: <span class="string">&quot;college-icon&quot;</span>,</span><br><span class="line">  <span class="comment">// &quot;icon-size&quot;: 0.6,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="地图上的弹窗-popup"><a href="#地图上的弹窗-popup" class="headerlink" title="地图上的弹窗(popup)"></a>地图上的弹窗(popup)</h2><p>地图上点击某个点打开一个泡泡框是常见的需求，<a href="https://docs.mapbox.com/mapbox-gl-js/api/markers/#popup">地图提供了一个泡泡框的类</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> layer_id = <span class="string">&quot;LayerId&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> popup = <span class="keyword">new</span> mapboxgl.<span class="title class_">Popup</span>(&#123;</span><br><span class="line">  <span class="attr">closeButton</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">closeOnClick</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">maxWidth</span>: <span class="string">&quot;300px&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changePointer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  map.<span class="title function_">getCanvas</span>().<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&quot;pointer&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">openPopupCallback</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 事件参数里有很多东西，比如这个点的坐标，这个点的数据...</span></span><br><span class="line">  <span class="keyword">const</span> coordinates = e.<span class="property">features</span>[<span class="number">0</span>].<span class="property">geometry</span>.<span class="property">coordinates</span>.<span class="title function_">slice</span>();</span><br><span class="line">  <span class="comment">// 泡泡框出现的方向</span></span><br><span class="line">  <span class="comment">// https://docs.mapbox.com/mapbox-gl-js/example/popup-on-click/</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(e.<span class="property">lngLat</span>.<span class="property">lng</span> - coordinates[<span class="number">0</span>]) &gt; <span class="number">180</span>) &#123;</span><br><span class="line">    coordinates[<span class="number">0</span>] += e.<span class="property">lngLat</span>.<span class="property">lng</span> &gt; coordinates[<span class="number">0</span>] ? <span class="number">360</span> : -<span class="number">360</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = e.<span class="property">features</span>[<span class="number">0</span>].<span class="property">properties</span>.<span class="property">some_data</span>;</span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">`&lt;a&gt;一段自定义的html，也可以插入<span class="subst">$&#123;data&#125;</span>，弹出框的内容，可以使用css修改样式&lt;/a&gt;`</span>;</span><br><span class="line">  popup.<span class="title function_">setLngLat</span>(coordinates).<span class="title function_">setHTML</span>(content).<span class="title function_">addTo</span>(map);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">closePopupCallback</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  map.<span class="title function_">getCanvas</span>().<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&quot;mouseenter&quot;</span>, layer_id, changePointer);</span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&quot;mouseenter&quot;</span>, layer_id, openPopupCallback);</span><br><span class="line">map.<span class="title function_">on</span>(<span class="string">&quot;mouseleave&quot;</span>, layer_id, closePopupCallback);</span><br></pre></td></tr></table></figure>

<h2 id="一些复杂的，或者更重要的"><a href="#一些复杂的，或者更重要的" class="headerlink" title="一些复杂的，或者更重要的"></a>一些复杂的，或者更重要的</h2><ul>
<li>数据源和地图层(source &amp; layer)</li>
<li>数据源的 type</li>
<li>表达式(Expressions)</li>
</ul>
<h1 id="数据源和地图层"><a href="#数据源和地图层" class="headerlink" title="数据源和地图层"></a>数据源和地图层</h1><p>在地图上显示各种不同的信息，每个信息都是一个层（layer），地图是由多个层组成的。而层依赖于数据，没有数据源，就无法生成一个层。</p>
<h2 id="数据源（Source）"><a href="#数据源（Source）" class="headerlink" title="数据源（Source）"></a>数据源（Source）</h2><p><a href="https://docs.mapbox.com/mapbox-gl-js/api/sources/">https://docs.mapbox.com/mapbox-gl-js/api/sources/</a></p>
<p><a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/">https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/</a></p>
<p>数据源为地图层提供了数据，没有数据，层的显示毫无意义。</p>
<p>addSource 的第一个参数是这个数据源的 id，层通过这个 id，可以使用到数据源</p>
<p>Source 的 type 是 vector 时，url 的值就是后端给的。而 geojson 是一份静态资源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">addSource</span>(<span class="string">&quot;colleges&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;geojson&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&quot;/path/to/data.geojson&quot;</span>,</span><br><span class="line">  <span class="comment">// cluster: true,</span></span><br><span class="line">  <span class="comment">// clusterMaxZoom: 10,</span></span><br><span class="line">  <span class="comment">// clusterRadius: 50,</span></span><br><span class="line">  <span class="comment">// type: &#x27;vector&#x27;,</span></span><br><span class="line">  <span class="comment">// url: &#x27;mapbox://username.sourcecode&#x27;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="地图层（Layer）"><a href="#地图层（Layer）" class="headerlink" title="地图层（Layer）"></a>地图层（Layer）</h2><p><a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/">地图层</a>是依附于地图基底（style）上的，在使用<code>map.setStyle()</code>之后，地图层就会被清空。同时，地图层依赖于数据源。</p>
<p>数据源也可以作为一个选项卸载 addLayer 中。</p>
<p>数据源的 type 是<code>vector</code>时，<code>source-layer</code>是必选参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">addLayer</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;LayerId&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">  <span class="comment">// source: &#123;</span></span><br><span class="line">  <span class="comment">//   type: &#x27;vector&#x27;,</span></span><br><span class="line">  <span class="comment">//   url: &#x27;mapbox://username.sourcecode&#x27;,</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">minzoom</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">maxzoom</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="string">&quot;source-layer&quot;</span>: <span class="string">&quot;source-layer-code&quot;</span>,</span><br><span class="line">  <span class="attr">paint</span>: &#123;</span><br><span class="line">    <span class="string">&quot;circle-radius&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">stops</span>: [</span><br><span class="line">        [<span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">7</span>, <span class="number">2</span>],</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;circle-color&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;match&quot;</span>,</span><br><span class="line">      [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;type_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;w&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#41b3eb&quot;</span>,</span><br><span class="line">      <span class="string">&quot;b&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#f38b3c&quot;</span>,</span><br><span class="line">      <span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#81d693&quot;</span>,</span><br><span class="line">      <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#3453a4&quot;</span>,</span><br><span class="line">      <span class="string">&quot;h&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#cb3233&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#f9e33e&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>每个层都有一个 id，可以通过这个 id 对层进行控制，比如隐藏掉一个地图层</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">setLayerProperty</span>(<span class="string">&quot;LayerId&quot;</span>, <span class="string">&quot;layer_option&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="数据源的-type"><a href="#数据源的-type" class="headerlink" title="数据源的 type"></a>数据源的 type</h1><p>目前后端给到的 source 有两种，第一种是<code>GeoJSON</code>，另一种是<code>Vector</code></p>
<p>在 mapbox 里，不同的 source 有不同的功能，比如 GeoJSON 可以聚合，而 Vector 就不可以</p>
<h2 id="GeoJSON"><a href="#GeoJSON" class="headerlink" title="GeoJSON"></a>GeoJSON</h2><p>顾名思义，GeoJSON 是一个关于地理数据的一个 JSON 格式</p>
<p><a href="https://geojson.org/">GeoJson 的文档标准</a></p>
<p><a href="https://docs.mapbox.com/mapbox-gl-js/api/sources/#geojsonsource">mapbox 里对关于 GeoJSONSource 的文档</a></p>
<p>在 mapbox 里，GeoJson 可以使用聚合(cluster)显示的功能，可以看<a href="https://docs.mapbox.com/mapbox-gl-js/example/cluster-html/">这个例子</a></p>
<p>GeoJSON 它是可以是一个文件，也可以是 json 字符串，但是读取都在前端。所以无法避免被爬取。如果是比较小的数据，可以用这个格式</p>
<h2 id="Vecter"><a href="#Vecter" class="headerlink" title="Vecter"></a>Vecter</h2><p><a href="https://docs.mapbox.com/api/maps/vector-tiles/">Vector 是托管在 mapbox 服务器上的</a>，是一个通过算法压缩过的数据格式，可以用来传输大量的位置点。<a href="https://docs.mapbox.com/mapbox-gl-js/example/data-driven-circle-colors/">比如这个美国人种分布的散点图例子</a></p>
<p>Vector 类型不支持聚合，但是可以通过 Layer 的<code>minzoom</code>和<code>maxzoom</code>控制显示。</p>
<h1 id="表达式-Expressions"><a href="#表达式-Expressions" class="headerlink" title="表达式(Expressions)"></a>表达式(Expressions)</h1><p>表达式是 Mapbox 的一个特色了，哇，这个用起来好复杂的，但是做内容匹配很方便</p>
<p><a href="https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/">文档在这里</a></p>
<p>表达式的语法很简单，就是一个 JavaScript 数组，这个数组的每个元素都有特别的意义，数组会返回一个值。其本质是个 JavaScript 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里以表达式的rgb方法为例，写一个类似的JavaScript函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rgb</span> = (<span class="params">r, g, b</span>) =&gt;</span><br><span class="line">  <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span>[</span><br><span class="line">    <span class="comment">// r g b 是参数，`rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)`是返回值 rgb是方法的名字 r g b 三个参数都是数值型的</span></span><br><span class="line">    <span class="comment">// 换成表达式这么写</span></span><br><span class="line">    (<span class="string">&quot;rgb&quot;</span>, number, number, number)</span><br><span class="line">  ];</span><br><span class="line"><span class="comment">// 这个数组会被转化成JavaScript并执行，最后返回一个rgb色值</span></span><br><span class="line"><span class="comment">// 第一个参数是函数名，从 length: 1 的元素开始，后面的元素都是函数的参数 数组最后会return计算结果</span></span><br></pre></td></tr></table></figure>

<p>表达式可以嵌套，因为表达式返回的是一个值，这个值当然可以作为参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 还以rgb为例，做一个计算过的rgb</span></span><br><span class="line"><span class="comment">// rgb的三个参数是数值，所以嵌套表达式返回的结果应该也是数值</span></span><br><span class="line">[<span class="string">&quot;rgb&quot;</span>, <span class="number">200</span>, [<span class="string">&quot;*&quot;</span>, <span class="number">100</span>, <span class="number">2</span>], <span class="number">200</span>][</span><br><span class="line">  <span class="comment">// 嵌套的第二层表达式的结果是 100 * 2 = 200</span></span><br><span class="line">  <span class="comment">// 所以上面的嵌套表达式就是</span></span><br><span class="line">  (<span class="string">&quot;rgb&quot;</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">];</span><br><span class="line">(<span class="string">&quot;rgb(200, 200, 200)&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>部分表达式可以访问到数据源，匹配出合适的结果，下面的这个<code>paint[&#39;circle-color&#39;]</code>属性中，使用了 match 表达式，第二个参数从数据集中选择了数据源，之后第三个参数是匹配到的值，第四个参数是遇到这个属性显示的颜色。就好像<code>switch case</code>。而最后一个<code>#f9e33e</code>是一个默认值。就好像<code>switch case default</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;paint&#x27;</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;circle-radius&#x27;</span>: <span class="number">1.5</span>,</span><br><span class="line">  <span class="string">&#x27;circle-color&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;match&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;ethnicity&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#41b3eb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#f38b3c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#81d693&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#3453a4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#cb3233&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#f9e33e&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用表达式，可以做很多奇妙的事情，比如不同的值显示不同的颜色（上面的）。甚至切割加工字符串，过滤掉某些值等等</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Mapbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapbox难题解决记录</title>
    <url>/posts/76e49fb1/</url>
    <content><![CDATA[<h1 id="和后端一起遇到过的麻烦"><a href="#和后端一起遇到过的麻烦" class="headerlink" title="和后端一起遇到过的麻烦"></a>和后端一起遇到过的麻烦</h1><p>本来是想写在上一篇里面的，但是上篇已经写得很长了…</p>
<p>而且想到未来可能会遇到更多要解决的问题。就重新记录了一篇文章</p>
<h2 id="优化初始地图打开速度"><a href="#优化初始地图打开速度" class="headerlink" title="优化初始地图打开速度"></a>优化初始地图打开速度</h2><p>数据量的问题通过分层解决，我们做了个全美人种分布的图层，首页显示了百万个点。这些点不仅影响了页面的打开速度，还对服务器造成了压力，同时浏览器渲染这些点也比较吃力</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/mape1.png"></p>
<p>把后端做了多个 vector 源，前端写多个 layer，初始只展示数据量最小的源</p>
<p>接着把 script 标签从 api.mapbox.com 的 js 文件迁移到本地，从 network 里看到，mapbox-gl.js 这个文件的加载速度减少了好几秒</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;script src=&#x27;https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/plugins/mapbox-2.3.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src=&quot;https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/plugins/mapbox-2.3.1/mapbox-gl-geocoder-4.7.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图标卡顿重叠"><a href="#图标卡顿重叠" class="headerlink" title="图标卡顿重叠"></a>图标卡顿重叠</h2><p>另一个数据层有三十多万个数据点，并且用图标分类显示每个点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// addLayer option</span></span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;symbol&quot;</span>,</span><br><span class="line"><span class="string">&quot;layout&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;icon-image&quot;</span>: <span class="string">&quot;xxx-icon&quot;</span>,</span><br><span class="line">  <span class="string">&quot;icon-size&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;stops&quot;</span>: [</span><br><span class="line">      [<span class="number">5</span>, <span class="number">0.6</span>],</span><br><span class="line">      [<span class="number">14</span>, <span class="number">0.8</span>]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;icon-allow-overlap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我加了<code>icon-allow-overlap</code>的选项，图标确实不重叠了，页面直接卡爆了…</p>
<p>经过测试，是<code>&quot;type&quot;: &quot;symbol&quot;</code>渲染的问题，对比 circle，symble 会卡顿很多。</p>
<p>symble 适合稍微小一点的数据集，大量的数据会造成卡顿。</p>
<h2 id="添加层控制的按钮"><a href="#添加层控制的按钮" class="headerlink" title="添加层控制的按钮"></a>添加层控制的按钮</h2><p>需求是点击按钮隐藏层，再次点击显示层，<a href="https://docs.mapbox.com/mapbox-gl-js/example/toggle-layers/">这个例子可以拿来参考</a></p>
<p>关键方法是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">setLayoutProperty</span>(</span><br><span class="line">  layerId,</span><br><span class="line">  <span class="string">&quot;visibility&quot;</span>,</span><br><span class="line">  <span class="string">&quot;visible&quot;</span> <span class="comment">// none</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>但是地图一个功能有多个层，我把层分类和层 id 写在了 button 元素上，点击按钮的时候先处理一下层的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 四个按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;active&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer</span>=<span class="string">&quot;Ethnicity&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer-id</span>=<span class="string">&quot;Ethnicity_5000,Ethnicity_1000,Ethnicity_500,Ethnicity_200&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe686;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>人种层开关<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/a</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;active&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer</span>=<span class="string">&quot;Colleges&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer-id</span>=<span class="string">&quot;Colleges,Colleges-count&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe672;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>院校层开关<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/a</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer</span>=<span class="string">&quot;Companies&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layer-id</span>=<span class="string">&quot;Companies,Companies-count&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe671;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>公司层开关<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/a</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">layer</span>=<span class="string">&quot;Crimes&quot;</span> <span class="attr">layer-id</span>=<span class="string">&quot;Crimes&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe873;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>犯罪数据层开关<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">layerSwitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> layerBtns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#menu a&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> map = <span class="variable language_">this</span>.<span class="property">map</span></span><br><span class="line">    layerBtns.<span class="title function_">forEach</span>(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">      link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="keyword">const</span> layer = link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;layer&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> ids = link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;layer-id&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> legendsElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.<span class="subst">$&#123;layer&#125;</span>-legends`</span>)</span><br><span class="line">        ids.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> id = name.<span class="title function_">trim</span>()</span><br><span class="line">          <span class="keyword">const</span> visibility = map.<span class="title function_">getLayoutProperty</span>(id, <span class="string">&#x27;visibility&#x27;</span>)</span><br><span class="line">          <span class="keyword">if</span> (visibility === <span class="string">&#x27;visible&#x27;</span> || visibility === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            map.<span class="title function_">setLayoutProperty</span>(id, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            legendsElement &amp;&amp; (legendsElement.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;active&#x27;</span></span><br><span class="line">            map.<span class="title function_">setLayoutProperty</span>(id, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;visible&#x27;</span>)</span><br><span class="line">            legendsElement &amp;&amp; (legendsElement.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;flex&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="地图对数据集大小的限制，导致数据集只能传递一个参数"><a href="#地图对数据集大小的限制，导致数据集只能传递一个参数" class="headerlink" title="地图对数据集大小的限制，导致数据集只能传递一个参数"></a>地图对数据集大小的限制，导致数据集只能传递一个参数</h2><p>这是后端遇到的问题，好像 vector 的数据集大小每超过一定限制，都会减少数据集中每个 feature 携带的属性。</p>
<p>传过来的数据集只有一个属性…</p>
<p>后端把需要展示的数据排列在字符串中，用特殊符号分割。</p>
<p>前端使用 mapbox 的表达式从这个字符串中根据特殊符号 split 出属性…这是一个不是办法的办法呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们约定的格式是</span></span><br><span class="line">data = <span class="string">&#x27;id@param1@param2@...&#x27;</span></span><br><span class="line"><span class="comment">// 我需要根据id，把数据分类用不同颜色展示</span></span><br><span class="line"><span class="comment">// 用js切分应该是</span></span><br><span class="line">data.<span class="title function_">split</span>(<span class="string">&#x27;@&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 但是表达式没有split方法，只有indexof和slice</span></span><br><span class="line">[<span class="string">&#x27;slice&#x27;</span>, [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;data&#x27;</span>], <span class="number">0</span>,[<span class="string">&#x27;index-of&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;data&#x27;</span>]]]</span><br><span class="line"><span class="comment">// 完整的匹配颜色表达式</span></span><br><span class="line"><span class="string">&#x27;circle-color&#x27;</span>: [</span><br><span class="line">  <span class="string">&#x27;match&#x27;</span>,</span><br><span class="line">  [<span class="string">&#x27;slice&#x27;</span>, [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;data&#x27;</span>], <span class="number">0</span>,[<span class="string">&#x27;index-of&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;data&#x27;</span>]]],</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#686de0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#535c68&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#6ab04c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#eb4d4b&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#be2edd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#f0932b&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#f9ca24&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#22a6b3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#f9ca24&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;#f9ca24&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h2 id="鼠标滚轮放在-Popup-上会滚动页面"><a href="#鼠标滚轮放在-Popup-上会滚动页面" class="headerlink" title="鼠标滚轮放在 Popup 上会滚动页面"></a>鼠标滚轮放在 Popup 上会滚动页面</h2><p>mapbox 地图中，滚轮有缩放的功能，但是在地图自带的弹出框上滚动鼠标滚轮，页面会滚动。这是非常不友好的交互…</p>
<p>这个还蛮简单的，禁用掉滚动就好啦</p>
<p>审查元素发现 popup 实际上是一个 html 弹出框，是 html 那就简单了。给地图容器元素添加点击事件，冒泡给 popup 包裹的元素，禁用掉滚轮事件</p>
<p>注意滚轮的事件是<code>wheel</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">disablePopupScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&#x27;.mapboxgl-popup&#x27;</span>)) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#map&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;wheel&#x27;</span>, callback)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#map&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据接口数据，初始化隐藏某些点"><a href="#根据接口数据，初始化隐藏某些点" class="headerlink" title="根据接口数据，初始化隐藏某些点"></a>根据接口数据，初始化隐藏某些点</h2><p><code>getHidePoint</code>是一个封装了 Ajax 的 promise</p>
<p>写一个 match 表达式，匹配数据给到的点，用<code>filter</code>或者<code>icon-image</code>隐藏掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hide = [];</span><br><span class="line"><span class="keyword">const</span> expression = [<span class="string">&quot;match&quot;</span>, [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;code&quot;</span>], <span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;&quot;</span>];</span><br><span class="line"><span class="title function_">getHidePoint</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    hide = res;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">values</span>(hide).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 需要隐藏的code</span></span><br><span class="line">      expression.<span class="title function_">push</span>(item.<span class="property">code</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// [&#x27;match&#x27;, [&#x27;get&#x27;, &#x27;code&#x27;], &#x27;placeholder&#x27;, &#x27;&#x27;, &#x27;hide-code&#x27;, &#x27;&#x27;, &#x27;hide-code2&#x27;, &#x27;&#x27;, ...]</span></span><br><span class="line">      map.<span class="title function_">addLayer</span>(&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">layout</span>: &#123;</span><br><span class="line">          <span class="string">&quot;icon-image&quot;</span>: expression,</span><br><span class="line">          <span class="string">&quot;icon-allow-overlap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Mapbox</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nvm-windows管理node版本</title>
    <url>/posts/e47dfff/</url>
    <content><![CDATA[<h1 id="使用-nvm-管理-node-版本"><a href="#使用-nvm-管理-node-版本" class="headerlink" title="使用 nvm 管理 node 版本"></a>使用 nvm 管理 node 版本</h1><p>最近频繁地被 node 版本伤脑筋…</p>
<ul>
<li>起因是 slidev，这个库看起来很好玩，事实上确实挺好玩的，但是需要 node 版本&gt;=14</li>
<li>在学习 node.js 的时候，我想安装最新的 v16 版本</li>
<li>需要用 node-mirai 开发 qq 机器人的 canvas 功能的时候，安装 node-canvas 疯狂报错，最后去 issue 里找到了一种降低 node 版本的解决办法…</li>
</ul>
<p><strong>好烦啊</strong></p>
<p>于是开始寻找管理 node 版本的东西</p>
<h1 id="n-和-nvm"><a href="#n-和-nvm" class="headerlink" title="n 和 nvm"></a>n 和 nvm</h1><p>最常用的两个工具，很遗憾，不支持 windows 系统<br>nvm 好像是支持的，在 gitbash 的环境下可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note: nvm also support Windows in some cases. It should work through WSL (Windows Subsystem for Linux) depending on the version of WSL. It should also work with GitBash (MSYS) or Cygwin. Otherwise, for Windows, afew alternatives exist, which are neither supported nor developed by us:</span><br><span class="line"></span><br><span class="line">重点翻译： 对于 Windows，存在一些替代方案，我们既不支持也不开发这些替代方案</span><br><span class="line"></span><br><span class="line">nvm-windows</span><br><span class="line">nodist</span><br><span class="line">nvs</span><br></pre></td></tr></table></figure>

<p>但是总感觉会出现莫名其妙的问题…</p>
<blockquote>
<p><a href="https://github.com/tj/n">n</a><br><a href="https://github.com/nvm-sh/nvm">nvm</a></p>
</blockquote>
<h1 id="最后选择了-nvm-windows"><a href="#最后选择了-nvm-windows" class="headerlink" title="最后选择了 nvm-windows"></a>最后选择了 nvm-windows</h1><blockquote>
<p><a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a><br><a href="https://github.com/coreybutler/nvm-windows/releases/">releases</a></p>
</blockquote>
<p>下载<code>nvm-setup.zip</code><br>无脑安装，一路下一步<br><strong>如果遇到弹窗，可能是说检测到了已经有安装了 node，是否让 nvm 接管已经安装的 node 版本</strong><br>选是</p>
<h1 id="nvm-的使用"><a href="#nvm-的使用" class="headerlink" title="nvm 的使用"></a>nvm 的使用</h1><p>安装一个版本(如 10.16.3)<br>如果要选择 32 位 在末尾加上 32</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 10.16.3</span><br><span class="line">---</span><br><span class="line">nvm install 10.16.3 32</span><br></pre></td></tr></table></figure>

<p>切换到一个版本(如 10.16.3)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 10.16.3</span><br></pre></td></tr></table></figure>

<p>卸载一个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm uninstall 10.16.3</span><br></pre></td></tr></table></figure>

<p>查看已安装所有版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure>

<p>显示 node 在什么环境下运行的(32 or 64)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm arch</span><br></pre></td></tr></table></figure>

<p>开启 node 版本管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm on</span><br></pre></td></tr></table></figure>

<p>关闭 node 版本管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm off</span><br></pre></td></tr></table></figure>

<p>设置 nvm 存放不同 node 的目录<br>如果 path 未设置，则显示当前目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm root &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>设置 node 镜像地址<br><a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm node_mirror &lt;node_mirror_url&gt;</span><br></pre></td></tr></table></figure>

<p>设置 npm 镜像地址<br><a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror &lt;npm_mirror_url&gt;</span><br></pre></td></tr></table></figure>

<h1 id="可能有其他问题"><a href="#可能有其他问题" class="headerlink" title="可能有其他问题"></a>可能有其他问题</h1><p>杀毒软件报毒：</p>
<blockquote>
<p>卸载掉杀毒软件</p>
</blockquote>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>前端团队的代码质量建设</title>
    <url>/posts/968a6851/</url>
    <content><![CDATA[<p>回忆一下在米哈游上班的两年学会最重要的东西，应该是大公司里前端团队的工作方式</p>
<p>在此之前，从事的项目都是小团队，一般只有一个前端开发（就是我）或者最多两个。代码想怎么写就怎么写。项目体量小所以混乱但高效</p>
<p>但是米哈游里的项目不同，有技术难点，开发团队人数多，上线质量要求高，沟通场景多，开发流程也比较严格。这种情况下，我欠缺的不再是解决问题的能力，而是对工作环境以及项目质量的适应性</p>
<h1 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h1><p>刚进入项目的时候只有五六个人，后来随着项目被上面重视，开始扩大规模，增加产能。人数最多的时候将近 20 人</p>
<p>随着人数增加出现过很多问题，比如合并代码丢失，大量代码冲突等问题。为了避免这些问题，做出了不少值得我学习的措施</p>
<h2 id="迭代开发之前"><a href="#迭代开发之前" class="headerlink" title="迭代开发之前"></a>迭代开发之前</h2><p>正常的流程是: 需求评审 -&gt; 设计评审 -&gt; 前后端技术评审 -&gt; 功能开发 -&gt; 测试用例评审 -&gt; 测试 -&gt; 产品和 UI 验收 -&gt; 发布</p>
<p>这样的流程在开发时基本上时清晰的，但是不可避免会出现开发测试期间需求变更的问题</p>
<p>在需求评审和技术评审的时候，程序员应该尽可能构建完整的开发思路，思考产品设计和现有功能的矛盾点，可行性如何，如果有问题，就告诉产品经理。这样做可以从需求合理性的角度避免开发期间的需求变更</p>
<p>（避免开发期间的需求变化就是<strong>减少加班</strong>）</p>
<h2 id="编辑器统一"><a href="#编辑器统一" class="headerlink" title="编辑器统一"></a>编辑器统一</h2><p>在项目中创建.vscode 文件夹，不要加入.gitignore，可以让团队每个人的编辑器设置保持一致。避免因为一些插件或者选项导致的提交冲突或者代码问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./.vscode</span><br><span class="line">├── extensions.json</span><br><span class="line">└── settings.json</span><br></pre></td></tr></table></figure>

<h2 id="依赖统一"><a href="#依赖统一" class="headerlink" title="依赖统一"></a>依赖统一</h2><p>为了保证所有人的开发环境一致，不要把 lock 文件放入.gitignore</p>
<p>如果对代码一致性要求严格，可以在 package.json 里锁定版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dayjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.10.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;diff-match-patch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dompurify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;downloadjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.4.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;echarts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;event-source-polyfill&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.31&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eventemitter3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exceljs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.3.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>创建.npmrc 文件，统一 npm 源，以及项目里的一些 npm 设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://XXX.com</span><br></pre></td></tr></table></figure>

<h2 id="建立-git-使用规范"><a href="#建立-git-使用规范" class="headerlink" title="建立 git 使用规范"></a>建立 git 使用规范</h2><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>米哈游的本地化项目里有清晰的分支意义，分支与运行环境相关联：</p>
<p>master：同步预发布环境代码，添加 tag 时可以选择发布生产环境</p>
<p>pre: 预发布环境（生产环境，测试数据）</p>
<p>dev: 测试环境（测试环境，测试数据）</p>
<p>feat: 测试环境</p>
<p>需求确定后，从 dev 分支拉出自己的开发分支（feat）进行开发，开发完成后合入 dev 分支进入测试阶段</p>
<h3 id="Merge-Request"><a href="#Merge-Request" class="headerlink" title="Merge Request"></a>Merge Request</h3><p>在此我只知道 pull request，拉去请求。团队内使用 gitlab，每当完成自己的 feat 分支开发时，会在 gitlab 上发起一个 merge request，代码 diff 通过 code review 之后才会合入 dev 分支</p>
<p>如果是需求开发，commit 的意义不需要保留，那么可以在 mr 的时候将多个 commit 压缩成一个</p>
<p>测试完成，进入预发环境的时候，会从 dev 提交一个 merge request 到 pre 分支，通过 diff 可以看到一次迭代修改的所有代码。根据 diff 进行 code review</p>
<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><p>为保证提交历史的干净整洁，团队没有采用传统的 merge 合并代码，而是 rebase。</p>
<p><a href="/posts/71e03861/">git rebase 相关的内容可以看这篇文章</a></p>
<p>既然使用了 rebase，有时候就需要对 commit 进行 drop 或者 squash 等一系列的操作。除了手动在命令行中使用<code>git rebase -i</code> 之外。更推荐使用 git 图形工具来做，比如<a href="https://git-fork.com/">fork</a></p>
<h3 id="commitizen-和-git-cz"><a href="#commitizen-和-git-cz" class="headerlink" title="commitizen 和 git-cz"></a>commitizen 和 git-cz</h3><p>使用 <a href="https://commitizen.github.io/cz-cli/">commitizen</a> 和 <a href="https://github.com/streamich/git-cz">git-cz</a> 来替代 <code>git commit -m</code> 可以约束项目参与者的提交信息</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240908182609.png"></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240908182645.png"></p>
<h1 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h1><p>除了团队协作中的约定，采用一些手段来确保项目成员所编写的代码质量也十分重要</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>如果项目比较大，业务逻辑复杂，引入 TS 是非常必要的。</p>
<p>编码效率方面，ts 会给出很好用的编辑器辅助</p>
<p>更重要的是代码的健壮性，给 JavaScript 添加类型约束之后，避免了很多 bug 的出现。而且在添加类型的过程中，也会修复许多的隐藏 bug</p>
<p><a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">tsconfig 的文档</a></p>
<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>ESLint 可以保证项目中的语言语法规范。</p>
<p>可以通过 .eslintrc 文件来约束语法使用，可以用.eslintignore 忽略某些文件的 ESLint 检查</p>
<p>项目里我们使用 ESLint + Prettier 格式化代码，ESLint 和 Prettier 可能会产生规则冲突，可以使用 <a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a> 这个工具辅助进行代码格式化</p>
<h2 id="husky-amp-lint-staged"><a href="#husky-amp-lint-staged" class="headerlink" title="husky &amp; lint-staged"></a>husky &amp; lint-staged</h2><p>除了写代码的时候进行格式化，在提交代码的时候也需要把暂存区的代码都进行一次 lint 和类型检查</p>
<p><a href="https://github.com/typicode/husky">husky</a>用来在运行 git 命令的时候运行一些函数或者其他命令。比如 pre-commit 钩子</p>
<p><a href="https://github.com/lint-staged/lint-staged">lint-staged</a>用来过滤出暂存区的更改</p>
<p>所以 ts + eslint + husky + lint-staged 可以在 pre-commit 的时候 对暂存区的代码进行 lint。从而保证了每次 commit 的代码都是符合 ESLint 规则且没有 TS 问题的</p>
<h2 id="流水线检查"><a href="#流水线检查" class="headerlink" title="流水线检查"></a>流水线检查</h2><p>除了提交的时候检查代码规范，还会在流水线运行的时候再做一次检查</p>
<p>流水线检查是为了避免代码合并后出现的问题</p>
<h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><p>清晰的模块划分可以提高代码的可维护性</p>
<p>我对模块的理解是：负责特定功能的独立的代码集合</p>
<p>模块之间可以有引用关系，但是引用关系必须是单向的。</p>
<p>项目中划分模块可以分为下面几种</p>
<ul>
<li>通用模块：一些通用逻辑，比如登录，用户信息，全局状态。这些应该被独立为模块</li>
<li>工具模块：工具函数，网络请求的封装，日志等</li>
<li>业务模块：业务逻辑的分割</li>
</ul>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是通过一些工具去验证程序的最小可测试部分是否按照期望结果运行</p>
<p>“单元”可能是一个函数，一个类，或者一个模块</p>
<p>单元测试的过程是：对单元指定运行环境，入参，期望结果。程序在指定环境中接收入参返回的结果是否与期望结果一致</p>
<p><a href="https://www.zhihu.com/question/28729261/answer/1058317111">关于什么是单元测试，单元测试的意义，以前的同事给过一篇知乎的答案来解释</a></p>
<p>在公司项目里，我们曾经使用 vitest 来做单元测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;@vitest/coverage-istanbul&quot;</span>: <span class="string">&quot;^0.33.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@vitest/coverage-v8&quot;</span>: <span class="string">&quot;^0.33.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@vitest/ui&quot;</span>: <span class="string">&quot;^0.33.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;vitest&quot;</span>: <span class="string">&quot;^0.32.4&quot;</span>,</span><br><span class="line"><span class="string">&quot;vitest-canvas-mock&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span>,</span><br><span class="line"><span class="string">&quot;msw&quot;</span>: <span class="string">&quot;^1.2.2&quot;</span>,  <span class="comment">// 用来mock请求</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; expect, test &#125; <span class="keyword">from</span> <span class="string">&quot;vitest&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./sum.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;adds 1 + 2 to equal 3&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="UI-自动化测试"><a href="#UI-自动化测试" class="headerlink" title="UI 自动化测试"></a>UI 自动化测试</h2><p>相比单元测试，UI 自动化更偏向于视图的实际表现</p>
<p>UI 自动化就好像模拟人类在网页上的操作行为，测试用例基本都可以转化为 UI 自动化用例来执行。</p>
<p>UI 自动化的行为逻辑实际上是：登录（如果需要） -&gt; 找到元素 -&gt; 触发事件 -&gt; 事件触发结果是否符合预期</p>
<p>可以使用 playwrite 库进行，以下是一个测试登录页面的例子</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AccountTest</span> = &#123;</span><br><span class="line">  <span class="attr">SUPER</span>: [<span class="string">&quot;account&quot;</span>, <span class="string">&quot;********&quot;</span>],</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">AccountTest</span> <span class="keyword">as</span> <span class="title class_">Account</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>封装测试工具</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e2e/utils.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; test, <span class="keyword">type</span> <span class="title class_">Page</span>, <span class="keyword">type</span> <span class="title class_">BrowserContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@playwright/test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"><span class="attr">page</span>: <span class="title class_">Page</span>, <span class="attr">account</span>: <span class="keyword">readonly</span> <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&quot;#/login&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">getByPlaceholder</span>(<span class="string">&quot;请输入您的用户名&quot;</span>).<span class="title function_">fill</span>(account[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">getByPlaceholder</span>(<span class="string">&quot;请输入您的密码&quot;</span>).<span class="title function_">fill</span>(account[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&quot;#login &gt; div.login-wrap &gt; form &gt; button&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">waitForURL</span>(<span class="string">&quot;**/*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> seed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomId</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now().toString(<span class="number">36</span>)&#125;</span>0<span class="subst">$&#123;seed++&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">describe</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">title</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">cfg</span>: &#123; account: <span class="keyword">readonly</span> <span class="built_in">string</span>[] &#125;,</span></span><br><span class="line"><span class="params">  <span class="attr">cb</span>: (parm: &#123; page: Page &#125;) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  test.<span class="title function_">describe</span>(title, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">ctx</span>: <span class="title class_">BrowserContext</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">page</span>: <span class="title class_">Page</span>;</span><br><span class="line">    test.<span class="title function_">beforeAll</span>(<span class="title function_">async</span> (&#123; browser &#125;) =&gt; &#123;</span><br><span class="line">      ctx = <span class="keyword">await</span> browser.<span class="title function_">newContext</span>();</span><br><span class="line">      page = <span class="keyword">await</span> ctx.<span class="title function_">newPage</span>();</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">login</span>(page, cfg.<span class="property">account</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page</span><br><span class="line">          .<span class="title function_">getByRole</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;我知道了&quot;</span> &#125;)</span><br><span class="line">          .<span class="title function_">click</span>(&#123; <span class="attr">timeout</span>: <span class="number">100</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.<span class="title function_">afterAll</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> page.<span class="title function_">close</span>();</span><br><span class="line">      <span class="keyword">await</span> ctx.<span class="title function_">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cb</span>(&#123;</span><br><span class="line">      <span class="keyword">get</span> <span class="title function_">page</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自动化用例编写成本比较高，而且会因为迭代造成较大的变动</p>
<h2 id="安全性检查"><a href="#安全性检查" class="headerlink" title="安全性检查"></a>安全性检查</h2><p>公司安全组会对项目进行安全性检查，寻找潜在的安全漏洞</p>
<p>主要包括 SQL 注入、XSS 攻击等</p>
<p>除此之外，npm 包也会要求使用公司的自建镜像。从而防止供应链攻击</p>
<h1 id="运行监控"><a href="#运行监控" class="headerlink" title="运行监控"></a>运行监控</h1><p>除了团队协作和代码规范，在代码发布到生产环境之后会采取一些措施来监控代码运行稳定性</p>
<h2 id="埋点"><a href="#埋点" class="headerlink" title="埋点"></a>埋点</h2><p>通过埋点收集用户行为，埋点可以让产品经理分析用户的使用习惯。也可以给开发者复现生产环境错误提供线索</p>
<p>这是一个简单的埋点上报接口类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">  <span class="attr">page</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">module</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">action</span>: <span class="string">&quot;click&quot;</span> | <span class="string">&quot;view&quot;</span> | <span class="string">&quot;scroll&quot;</span>;</span><br><span class="line">  <span class="attr">extra</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误监控"><a href="#错误监控" class="headerlink" title="错误监控"></a>错误监控</h2><p>通过 Sentry 等工具对生产环境进行错误监控，可以收集到生产环境下程序运行出现的错误</p>
<p>许多报错往往看似不影响程序正常执行，但是在某些边界场景中，就有可能造成生产事故</p>
<p>收集生产环境的错误，及时修复。就如同在清理项目里的定时炸弹</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>代码质量</tag>
      </tags>
  </entry>
  <entry>
    <title>实现简单的VDOM</title>
    <url>/posts/d267999e/</url>
    <content><![CDATA[<h1 id="VDom-的含义和实现"><a href="#VDom-的含义和实现" class="headerlink" title="VDom 的含义和实现"></a>VDom 的含义和实现</h1><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p>原文是一篇讲得很明白的文章，本文基本上是照着写了一遍<br>不但学到了 VDOM 相关的一些东西，原生 JS 的方法也熟悉了一遍，收获颇丰</p>
<blockquote>
<p><a href="https://xin-tan.com/2019-11-11-wirte-virtual-dom/">一文说清「VirtualDOM」的含义与实现</a></p>
</blockquote>
<h2 id="如何理解-VDom"><a href="#如何理解-VDom" class="headerlink" title="如何理解 VDom"></a>如何理解 VDom</h2><p>前端常做的事情就是根据数据状态的更新，来更新页面视图。然而频繁的更新 DOM 会造成回流或者重绘，引发性能下降，页面卡顿<br>因此我们需要方法<strong>避免频繁更新 DOM 树</strong><br>思路就是对比 DOM 差距，只更新需要更新的节点，而不是整棵树<br>实现这个算法的基础，需要遍历 DOM 树的结点，来进行比较更新<br>为了更快地处理，不使用 DOM 对象，而改用 JS 对象<br>他就像是 JS 与 DOM 之间的一层缓存</p>
<h2 id="如何表示-VDom"><a href="#如何表示-VDom" class="headerlink" title="如何表示 VDom"></a>如何表示 VDom</h2><p>借助 ES6 的 class，表示 VDom 的语义化更强。一个基础的 VDom 需要有标签名，标签属性以及子节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">tagName, props, children</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tagName</span> = tagName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了更方便调用（不用每次都 new），将其封装返回实例的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">el</span>(<span class="params">tagName, props, children</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Element</span>(tagName, props, children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用上面的方法表达 DOM 结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用 VDom 表示 ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> span = <span class="title function_">el</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, [<span class="string">&quot;span1&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> div = <span class="title function_">el</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">class</span>: <span class="string">&quot;test&quot;</span> &#125;, [span]);</span><br></pre></td></tr></table></figure>

<p>之后再对比和更新两棵 vdom 树的时候，将会涉及到将 VDom 渲染成真正的 Dom 节点。因此给<code>class Element</code> 增加<code>render</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">tagName, props, children</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tagName</span> = tagName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = children;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="variable language_">this</span>.<span class="property">tagName</span>);</span><br><span class="line">    <span class="comment">// 设置标签属性值</span></span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">this</span>.<span class="property">props</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span></span><br><span class="line">      dom.<span class="title function_">setAttribute</span>(name, <span class="variable language_">this</span>.<span class="property">props</span>[name])</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 递归更新子节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childDom =</span><br><span class="line">        child <span class="keyword">instanceof</span> <span class="title class_">Element</span></span><br><span class="line">          ? child.<span class="title function_">render</span>()</span><br><span class="line">          : <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(child);</span><br><span class="line">      dom.<span class="title function_">appendChild</span>(childDom);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何比较-dom-树，并且进行高效更新"><a href="#如何比较-dom-树，并且进行高效更新" class="headerlink" title="如何比较 dom 树，并且进行高效更新"></a>如何比较 dom 树，并且进行高效更新</h2><p>前面已经说明了 VDom 的用法与含义， 多个 VDom 就会组成一棵虚拟的 VDom 树<br>剩下要做的就是：<strong>根据不同情况，来进行树上结点的增删改操作</strong><br>这个过程分为<code>diff</code>和<code>path</code></p>
<ul>
<li>diff: 递归对比两棵 dom 树对应位置的差异</li>
<li>patch: 根据差异，进行节点的更新</li>
</ul>
<p>现在有两种思路，一种是先 diff 一遍，记录所有差异，再统一进行 patch<br>另一种是 diff 同时进行 patch<br>相比较，第二种方法少了一次递归查询，以及不需要构造过多对象，下面采用第二种思路</p>
<h3 id="变量的含义"><a href="#变量的含义" class="headerlink" title="变量的含义"></a>变量的含义</h3><p>将 diff 和 patch 的过程放入<code>updateEl</code>方法中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">HTMLElement</span>&#125; <span class="variable">$parent</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; <span class="variable">newNode</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; <span class="variable">oldNode</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateEl</span>(<span class="params">$parent, newNode, oldNode, index = <span class="number">0</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>所有以$开头的变量，代表真实DOM<br>参数index表示oldNode再$parent 的所有子节点构成的数组的下标</p>
<h3 id="1-新增节点"><a href="#1-新增节点" class="headerlink" title="1.新增节点"></a>1.新增节点</h3><p>如果 oldNode 为 undefined，说明 newNode 是一个新增的 DOM 节点。将其直接追加到 DOM 中即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEl</span>(<span class="params">$parent, newNode, oldNode, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!oldNode) &#123;</span><br><span class="line">    $parent.<span class="title function_">appendChild</span>(newNode.<span class="title function_">render</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-删除节点"><a href="#2-删除节点" class="headerlink" title="2.删除节点"></a>2.删除节点</h3><p>如果 newNode 为 undefined，说明新的 VDom 中，当前位置没有节点，因此需要将其从实际的 DOM 中删除<br>删除就调用$parent.removeChild(), 通过 index 参数，可以拿到被删除元素的引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEl</span>(<span class="params">$parent, newNode, oldNode, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!oldNode) &#123;</span><br><span class="line">    $parent.<span class="title function_">appendChild</span>(newNode.<span class="title function_">render</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">    $parent.<span class="title function_">removeChild</span>($parent.<span class="property">childNodes</span>[index]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-变化节点"><a href="#3-变化节点" class="headerlink" title="3.变化节点"></a>3.变化节点</h3><p>对比 oldNode 和 newNode，有三种情况，均可视为改变</p>
<ul>
<li>节点类型发生变化，文本变成 vdom，vdom 变成文本</li>
<li>新旧节点都是文本，内容改变</li>
<li>节点属性发生变化</li>
</ul>
<p>首先，借助 Symbol 更好地语义化声明三种变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CHANGE_TYPE_TEXT</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CHANGE_TYPE_PROP</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;props&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CHANGE_TYPE_REPLACE</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;replace&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>针对节点属性发生改变，没有现成 API 供我们批量更新，所以封装<code>replaceAttribute</code>方法，将新的 vdom 属性值直接映射到 dom 结构上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceAttribute</span>(<span class="params">$node, removedAttrs, newAttrs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!$node) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(removedAttrs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> $node.<span class="title function_">removeAttribute</span>(attr));</span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(newAttrs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span></span><br><span class="line">    $node.<span class="title function_">setAttribute</span>(attr, newAttrs[attr])</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 checkChangeType 函数判断变化的类型，如果没有变化，则返回空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkChangeType</span>(<span class="params">newNode, oldNode</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> newNode !== <span class="keyword">typeof</span> oldNode ||</span><br><span class="line">    newNode.<span class="property">tagName</span> !== oldNode.<span class="property">tagName</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">CHANGE_TYPE_REPLACE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> newNode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newNode !== oldNode) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">CHANGE_TYPE_TEXT</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> propsChanged = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(newNode.<span class="property">props</span>).<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">prev, name</span>) =&gt;</span> prev || oldNode.<span class="property">props</span>[name] !== newNode.<span class="property">props</span>[name],</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (propsChanged) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">CHANGE_TYPE_PROP</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 updateEl 中，根据 checkChangeType 返回的变化类型，做出对应处理<br>如果类型为空，则不进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEl</span>(<span class="params">$parent, newNode, oldNode, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> changeType = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!oldNode) &#123;</span><br><span class="line">    <span class="comment">// 新增节点</span></span><br><span class="line">    $parent.<span class="title function_">appendChild</span>(newNode.<span class="title function_">render</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    $parent.<span class="title function_">removeChild</span>($parent.<span class="property">childNodes</span>[index]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((changeType = <span class="title function_">checkChangeType</span>(newNode, oldNode))) &#123;</span><br><span class="line">    <span class="comment">// 检查节点的变更内容</span></span><br><span class="line">    <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_TEXT</span>) &#123;</span><br><span class="line">      <span class="comment">// 文字内容变化</span></span><br><span class="line">      $parent.<span class="title function_">replaceChild</span>(</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(newNode),</span><br><span class="line">        $parent.<span class="property">childNodes</span>[index]</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_REPLACE</span>) &#123;</span><br><span class="line">      <span class="comment">// 元素变更</span></span><br><span class="line">      $parent.<span class="title function_">replaceChild</span>(newNode.<span class="title function_">render</span>(), $parent.<span class="property">childNodes</span>[index]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_PROP</span>) &#123;</span><br><span class="line">      <span class="comment">// 元素上的属性变更</span></span><br><span class="line">      <span class="title function_">replaceAttribute</span>($parent.<span class="property">childNodes</span>[index], oldNode.<span class="property">props</span>, newNode.<span class="property">props</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-递归对子节点进行-diff"><a href="#4-递归对子节点进行-diff" class="headerlink" title="4.递归对子节点进行 diff"></a>4.递归对子节点进行 diff</h3><p>如果情况 1，2，3 都没有命重，那说明当前的新旧节点自身并没有变化<br>需要遍历他们的 children 数组，递归进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEL</span>(<span class="params">$parent, newNode, oldNode, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> changeType = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!oldNode) &#123;</span><br><span class="line">    $parent.<span class="title function_">appendChild</span>(newNode.<span class="title function_">render</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">    $parent.<span class="title function_">removeChild</span>($parent.<span class="property">childNodes</span>[index]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((changeType = <span class="title function_">checkChangeType</span>(newNode, oldNode))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_TEXT</span>) &#123;</span><br><span class="line">      $parent.<span class="title function_">replaceChild</span>(</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(newNode),</span><br><span class="line">        $parent.<span class="property">childNodes</span>[index]</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_REPLACE</span>) &#123;</span><br><span class="line">      $parent.<span class="title function_">replaceChild</span>(newNode.<span class="title function_">render</span>(), $parent.<span class="property">childNodes</span>[index]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (changeType === <span class="variable constant_">CHANGE_TYPE_PROP</span>) &#123;</span><br><span class="line">      <span class="title function_">replaceAttribute</span>($parent.<span class="property">childNodes</span>[index], oldNode.<span class="property">props</span>, newNode.<span class="property">props</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newNode.<span class="property">tagName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newLength = newNode.<span class="property">children</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> oldLength = oldNode.<span class="property">children</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newLength || i &lt; oldLength; ++i) &#123;</span><br><span class="line">      <span class="title function_">updateEl</span>(</span><br><span class="line">        $parent.<span class="property">childNodes</span>[index],</span><br><span class="line">        newNode.<span class="property">children</span>[i],</span><br><span class="line">        oldNode.<span class="property">children</span>[i]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的登录逻辑</title>
    <url>/posts/b46b5ff0/</url>
    <content><![CDATA[<h2 id="传统登录逻辑"><a href="#传统登录逻辑" class="headerlink" title="传统登录逻辑"></a>传统登录逻辑</h2><ol>
<li>输入账号密码，发送给服务端</li>
<li>服务端校验后，下发一个表示登录状态的<code>token</code>给客户端</li>
<li>每次发送需要登录的请求时，携带这个<code>token</code></li>
<li>当服务端认为<code>token</code>过期，返回前端信息，提示用户重新登陆</li>
</ol>
<blockquote>
<p>登录的本质是一个有用户登录状态信息的身份标识</p>
</blockquote>
<h2 id="微信小程序登录"><a href="#微信小程序登录" class="headerlink" title="微信小程序登录"></a>微信小程序登录</h2><p>在微信小程序中，可以通过微信提供的登录能力直接获取到微信官方所提供的身份标识<br>如此便可跳过密码账号的流程，简化传统登录过程</p>
<h2 id="微信小程序的登录流程"><a href="#微信小程序的登录流程" class="headerlink" title="微信小程序的登录流程"></a>微信小程序的登录流程</h2><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/wechat-login.webp" alt="微信小程序的登录流程"></p>
<ol>
<li>通过 wx.login 获取到用户的 code，判断用户是否授权读取用户信息</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录，完成后执行请求队列</span></span><br><span class="line"><span class="keyword">var</span> login = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!login_loading) &#123;</span><br><span class="line">    login_loading = <span class="literal">true</span>;</span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span>) &#123;</span><br><span class="line">          <span class="title class_">Api</span>.<span class="title function_">login</span>(res.<span class="property">code</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">loginRequest</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;session_key&quot;</span>, loginRequest.<span class="property">wechat_auth</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">            request_queue.<span class="title function_">forEach</span>(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">              request.<span class="title function_">resolve</span>(loginRequest.<span class="property">wechat_auth</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="string">&quot;getUser&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录失败！&quot;</span> + res.<span class="property">errMsg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 wx.request 方法请求服务端，服务端将 appid，appsecret 和 code 一起发送到微信服务器</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">&quot;url&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">code</span>: code,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>微信服务器将 openid 以及本次登录的会话密钥 session_key 返回给服务端（session_key 是对用户数据进行加密签字的密钥，为了自身应用的安全，session_key 不应该在网络上进行传输，不应该传输到客户端上）</li>
<li>服务端从数据库中查找 openid ，如果没有查到记录，说明用户没有注册</li>
<li>服务端查找到 openid 后，生成该用户的 session 返回给小程序</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步代码中的Api.login().then()</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>小程序将 session 存到 wx.storage 中</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步代码中的Api.login().then()</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;session_key&quot;</span>, loginRequest.<span class="property">wechat_auth</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>之后的请求，小程序先从 storage 中读取到 session 并带给服务端</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> login_loading = <span class="literal">false</span>; <span class="comment">// 登录标识</span></span><br><span class="line"><span class="keyword">var</span> request_queue = []; <span class="comment">// 正在登录时的请求队列</span></span><br><span class="line"><span class="keyword">var</span> session_key = <span class="string">&quot;&quot;</span>; <span class="comment">// 用户session，每次请求时需检测本地是否存储，并且是否过期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fly.interceptors.request.use中的代码</span></span><br><span class="line"><span class="comment">// 设置每次请求携带session</span></span><br><span class="line">fly.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="title function_">async</span> (request) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 查看网络状态 将wx.getNetworkType封装为promese</span></span><br><span class="line">  <span class="keyword">let</span> netType = <span class="keyword">await</span> <span class="title function_">getNetType</span>();</span><br><span class="line">  <span class="keyword">if</span> (netType === <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 无网络</span></span><br><span class="line">    wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;无网络&quot;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取session_key</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    session_key = wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;session_key&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&quot;url&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 登录时不需检测session_key</span></span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 同步检测session_key是否过期</span></span><br><span class="line">  <span class="keyword">var</span> sessionkeyCheck = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">checkSession</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 小程序端判断登录状态并且设置请求携带session</span></span><br><span class="line">  <span class="comment">// 有session_key存储在本地，且未过期</span></span><br><span class="line">  <span class="keyword">if</span> (session_key &amp;&amp; sessionkeyCheck) &#123;</span><br><span class="line">    request.<span class="property">body</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">wechat_auth</span>: session_key &#125;, request.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有session_key存储在本地时，或是session_key过期</span></span><br><span class="line">    session_key = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request_queue.<span class="title function_">push</span>(&#123; resolve, reject &#125;);</span><br><span class="line">      <span class="title function_">login</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    request.<span class="property">body</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">wechat_auth</span>: session_key &#125;, request.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>服务端比对 session 记录，校验有效期</li>
</ol>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/wechat-login-1.webp" alt="微信小程序的登录流程"></p>
<h2 id="检查登录状态"><a href="#检查登录状态" class="headerlink" title="检查登录状态"></a>检查登录状态</h2><p>以上登录逻辑中的第 8 个步骤即是检查登录状态，除此之外，微信提供了 wx.checkSession 方法可以检查微信登录状态是否过期</p>
<ul>
<li>如果过期，则发起登录流程</li>
<li>如过不过期，则继续使用本地保存的自定义登录状态</li>
</ul>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/wechat-checkSession.webp" alt="检查登录状态"></p>
<p><em>（其实看起来也并不简单，用户简单了开发者就麻烦一点）</em></p>
<blockquote>
<p>参考引用<br><a href="https://mp.weixin.qq.com/s/2d2ly1A7F62-mKl2Qldycw">https://mp.weixin.qq.com/s/2d2ly1A7F62-mKl2Qldycw</a></p>
</blockquote>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>记录各种各样的面试题</title>
    <url>/posts/a8791436/</url>
    <content><![CDATA[<div class="note skyblue flat"><p>这个文章主要用来收集一些面试题目</p>
<p>每次面试要共享屏幕手写面试题都会挂掉</p>
<p>有种尿尿被人看着的紧张感，脑袋里一片空白</p>
</div>

<h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h1><h2 id="依次执行一系列任务，并可以中断"><a href="#依次执行一系列任务，并可以中断" class="headerlink" title="依次执行一系列任务，并可以中断"></a>依次执行一系列任务，并可以中断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依次顺序执行一系列任务</span></span><br><span class="line"><span class="comment"> * 所有任务全部完成后可以得到每个任务的执行结果</span></span><br><span class="line"><span class="comment"> * 需要返回两个方法，start用于启动任务，pause用于暂停任务</span></span><br><span class="line"><span class="comment"> * 每个任务具有原子性，即不可中断，只能在两个任务之间中断</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">...Function</span>&#125; tasks 任务列表，每个任务无参、异步</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processTasks</span>(<span class="params">...tasks</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> isPaused = <span class="literal">false</span>; <span class="comment">// 用于控制是否暂停</span></span><br><span class="line">  <span class="keyword">let</span> currentTaskIndex = <span class="number">0</span>; <span class="comment">// 记录当前执行的任务索引</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动任务执行的函数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (currentTaskIndex &lt; tasks.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPaused) <span class="keyword">return</span>; <span class="comment">// 如果暂停则退出循环</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> task = tasks[currentTaskIndex]; <span class="comment">// 取当前任务</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">task</span>(); <span class="comment">// 执行任务，并等待任务完成</span></span><br><span class="line">      currentTaskIndex++; <span class="comment">// 更新任务索引</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暂停任务执行的函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">pause</span>(<span class="params"></span>) &#123;</span><br><span class="line">    isPaused = <span class="literal">true</span>; <span class="comment">// 设置为暂停状态</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 恢复任务执行的函数（从暂停的地方继续）</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resume</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPaused) &#123;</span><br><span class="line">      isPaused = <span class="literal">false</span>; <span class="comment">// 重置暂停状态</span></span><br><span class="line">      <span class="title function_">start</span>(); <span class="comment">// 继续执行任务</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; start, pause, resume &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task1</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task 1 done&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task2</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task 2 done&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task3</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task 3 done&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; start, pause, resume &#125; = <span class="title function_">processTasks</span>(task1, task2, task3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动任务</span></span><br><span class="line"><span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 秒后暂停任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">pause</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tasks paused&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 秒后恢复任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resume</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tasks resumed&quot;</span>);</span><br><span class="line">&#125;, <span class="number">4000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="闭包漏洞与解决"><a href="#闭包漏洞与解决" class="headerlink" title="闭包漏洞与解决"></a>闭包漏洞与解决</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj2[k];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何在不改变上面代码的情况下</span></span><br><span class="line"><span class="comment">// 修改 obj2对象</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;n&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">get</span>(<span class="string">&quot;n&quot;</span>).<span class="property">c</span> = <span class="number">1</span>;</span><br><span class="line">obj1.<span class="title function_">get</span>(<span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>解决闭包漏洞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将原型设置为null</span></span><br><span class="line"><span class="keyword">var</span> obj1 = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj2, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj2[k];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断访问的属性是否来自于对象本身</span></span><br><span class="line"><span class="keyword">var</span> obj1 = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj2.<span class="title function_">hasOwnProperty</span>(k)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;k&#125;</span>在此对象上不存在`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> obj2[k];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="todo-关于-interface-和-type"><a href="#todo-关于-interface-和-type" class="headerlink" title="(todo) 关于 interface 和 type"></a>(todo) 关于 interface 和 type</h2><h2 id="todo-useDebounce"><a href="#todo-useDebounce" class="headerlink" title="(todo) useDebounce"></a>(todo) useDebounce</h2><h2 id="使用数组-reduce-方法实现-forEach、map、filter"><a href="#使用数组-reduce-方法实现-forEach、map、filter" class="headerlink" title="使用数组 reduce 方法实现 forEach、map、filter"></a>使用数组 reduce 方法实现 forEach、map、filter</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">arr, cb</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">_, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(current, index, arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;, arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gpt</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myForEach</span>(<span class="params">arr, callback</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">_, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(current, index, arr); <span class="comment">// 执行回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// forEach 不需要返回值</span></span><br><span class="line">  &#125;, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">arr, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">_, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(<span class="title function_">cb</span>(current, index, arr));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;, arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gpt的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myMap</span>(<span class="params">arr, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    acc.<span class="title function_">push</span>(<span class="title function_">callback</span>(current, index, arr)); <span class="comment">// 将处理后的元素添加到结果数组</span></span><br><span class="line">    <span class="keyword">return</span> acc; <span class="comment">// 返回累加器</span></span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">_, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">cb</span>(current, index, arr)) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;, arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gpt的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFilter</span>(<span class="params">arr, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, current, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">callback</span>(current, index, arr)) &#123;</span><br><span class="line">      acc.<span class="title function_">push</span>(current); <span class="comment">// 如果符合条件，添加到结果数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc; <span class="comment">// 返回累加器</span></span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">forEach</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">map</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">filter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h2 id="写一个-Emitter，需要完成事件的注册、监听和释放"><a href="#写一个-Emitter，需要完成事件的注册、监听和释放" class="headerlink" title="写一个 Emitter，需要完成事件的注册、监听和释放"></a>写一个 Emitter，需要完成事件的注册、监听和释放</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写一个 Emitter Class。 需要完成 需要完成事件的注册、监听、及释放 如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">Emitter</span>();</span><br><span class="line"><span class="keyword">const</span> sub1 = emitter.<span class="title function_">subscribe</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(args));</span><br><span class="line"><span class="keyword">const</span> sub2 = emitter.<span class="title function_">subscribe</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(args));</span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">sub1.<span class="title function_">release</span>(); <span class="comment">// 注：这里是sub1 release，搞错扣分</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Emitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 存储事件名与其对应的订阅回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅事件</span></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果事件还没有被注册，初始化为空数组</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将回调函数添加到事件数组中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">push</span>(callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象，其中包含 release 方法，用于解除订阅</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">release</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">filter</span>(</span><br><span class="line">          <span class="function">(<span class="params">cb</span>) =&gt;</span> cb !== callback</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">      <span class="comment">// 触发该事件名下的所有回调</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> <span class="title function_">callback</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="todo-React：不使用-useEffect-实现-useMemo"><a href="#todo-React：不使用-useEffect-实现-useMemo" class="headerlink" title="(todo) React：不使用 useEffect 实现 useMemo"></a>(todo) React：不使用 useEffect 实现 useMemo</h2><h2 id="todo-Vue-从响应式数据创建到触发-watch-到重新渲染，中间发生了什么"><a href="#todo-Vue-从响应式数据创建到触发-watch-到重新渲染，中间发生了什么" class="headerlink" title="(todo) Vue: 从响应式数据创建到触发 watch 到重新渲染，中间发生了什么"></a>(todo) Vue: 从响应式数据创建到触发 watch 到重新渲染，中间发生了什么</h2><h2 id="todo-封装一个-JSONP-函数，并支持-thenable-属性"><a href="#todo-封装一个-JSONP-函数，并支持-thenable-属性" class="headerlink" title="(todo) 封装一个 JSONP 函数，并支持 thenable 属性"></a>(todo) 封装一个 JSONP 函数，并支持 thenable 属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 JSONP 方法，并支持 thenable 特性</span></span><br><span class="line"><span class="comment">// 即 JSONP(url).then(funciton(onReslove,onReject)&#123;&#125;)形式调用</span></span><br></pre></td></tr></table></figure>

<h2 id="找出最接近的值"><a href="#找出最接近的值" class="headerlink" title="找出最接近的值"></a>找出最接近的值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尽里不使用 JS 特有的语法糖，尽里不使用如 Array.sort 等语言特有的方法。</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">55</span>, <span class="number">78</span>, <span class="number">99</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回最接近输入值的数字，如果有多个，返回最大的那个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125;<span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findNext</span>(<span class="params">n, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> difference;</span><br><span class="line">  <span class="keyword">let</span> matched = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = arr[i];</span><br><span class="line">    <span class="keyword">const</span> absDiff = <span class="title class_">Math</span>.<span class="title function_">abs</span>(current - n);</span><br><span class="line">    <span class="keyword">if</span> (difference === <span class="literal">undefined</span>) difference = absDiff;</span><br><span class="line">    <span class="keyword">if</span> (difference === <span class="number">0</span>) &#123;</span><br><span class="line">      matched = current;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (difference &gt; absDiff) &#123;</span><br><span class="line">      difference = absDiff;</span><br><span class="line">      matched = current;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (difference === absDiff) &#123;</span><br><span class="line">      matched = matched &gt; current ? matched : current;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> matched;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findNext</span>(<span class="number">1</span>, arr2)); <span class="comment">//should print 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findNext</span>(<span class="number">44</span>, arr2)); <span class="comment">// should print 55</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findNext</span>(<span class="number">6</span>, arr2)); <span class="comment">//should print 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findNext</span>(<span class="number">7</span>, arr2)); <span class="comment">//should print 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findNext</span>(<span class="number">8</span>, arr2)); <span class="comment">//should print 9</span></span><br></pre></td></tr></table></figure>

<p>分析</p>
<blockquote>
<p>遍历一遍，比较绝对值，绝对值为 0 那就是命中<br>绝对值越小，就记录下来<br>绝对值相等，就比大小</p>
</blockquote>
<h2 id="todo-网站中图片的优化处理"><a href="#todo-网站中图片的优化处理" class="headerlink" title="(todo) 网站中图片的优化处理"></a>(todo) 网站中图片的优化处理</h2><p>如果网站里有非常多的图片，并且要求图片质量，应该怎么做优化</p>
<h2 id="todo-函数柯里化"><a href="#todo-函数柯里化" class="headerlink" title="(todo) 函数柯里化"></a>(todo) 函数柯里化</h2><h2 id="todo-设计模式相关"><a href="#todo-设计模式相关" class="headerlink" title="(todo) 设计模式相关"></a>(todo) 设计模式相关</h2><p>面试中被问到让写设计模式的模板，一时间大脑空白</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>单例模式的定义</strong>是一个构造函数或者类，最多只能有一个实例，即使多次构造，如 create 方法或者 new 或者其他… 均不会出现新的实例</p>
<p>实现思路，记录已创建的实例，并判断</p>
<p><strong>使用场景</strong>是一些只能存在一个实例的地方，比如覆盖全屏的 loading，共享的资源，如配置文件，状态库</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">_instance</span>: <span class="title class_">Singleton</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">public</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 允许new一次，new多次会报错</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Singleton</span>.<span class="property">_instance</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error: 单例已构建，使用getInstance访问&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="title class_">Singleton</span>.<span class="property">_instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(name?: <span class="built_in">string</span>): <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">_instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">_instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">_instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&quot;First Instance&quot;</span>); <span class="comment">// 正常创建</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">name</span>); <span class="comment">// 输出 &quot;First Instance&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(); <span class="comment">// 通过 getInstance 获取实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">name</span>); <span class="comment">// 输出 &quot;First Instance&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance3 = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&quot;Second Instance&quot;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure>

<p>也可以用闭包实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getInstance</span>(<span class="params">name = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="title function_">createInstance</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>通过一些方式，将一个接口转换为另一个接口所需要的形态</p>
<p>使用场景如版本迭代对旧数据的兼容，对通过对接口数据的处理，兼容到不同的应用</p>
<h3 id="工厂模式和抽象工厂"><a href="#工厂模式和抽象工厂" class="headerlink" title="工厂模式和抽象工厂"></a>工厂模式和抽象工厂</h3><p><strong>共同点：</strong>隐藏了具体产品的细节（产品类），并隐藏产品创建的具体过程（工厂函数）。在使用的时候都通过工厂函数的接口来获取产品实例</p>
<p><strong>不同点：</strong></p>
<ul>
<li>概念：工厂模式用于创建单一产品，抽象工厂通过提供一个工厂接口来创建一组相关联的产品</li>
<li>复杂度：抽象工厂模式是解决产品组合而拓展的工厂模式</li>
</ul>
<p><strong>工厂模式：</strong>将创建实例的逻辑封装在工厂方法中，简化实例的创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name + <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">productFactory</span>(<span class="params">type, name</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>(name);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>(name);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Invalid product type&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用工厂创建</span></span><br><span class="line"><span class="keyword">const</span> productA = <span class="title function_">productFactory</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;product &quot;</span>);</span><br><span class="line"><span class="keyword">const</span> productB = <span class="title function_">productFactory</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;product &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展：禁止直接 new 具体产品类，只能通过工厂函数创建</span></span><br><span class="line"><span class="comment">// 方案一 闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="comment">// class ProductA</span></span><br><span class="line">  <span class="comment">// class ProductB</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&quot;A&quot;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二 使用 Symbol 保护构造函数</span></span><br><span class="line"><span class="keyword">const</span> factorySymbol = <span class="title class_">Symbol</span>(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">token: symbol</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (token !== factorySymbol)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Use factory to create instances.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&quot;A&quot;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>(factorySymbol);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>抽象工厂模式：</strong>抽象工厂模式有产品族和多工厂的概念，工厂通过抽象化之后，多个工厂可以组合出不同的产品，并且有相同的接口</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TextBox</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// button具体产品 - windows</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;windows button&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// button具体产品 - mac</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mac button&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// textbox具体产品 - windows</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsTextBox</span> <span class="keyword">implements</span> <span class="title class_">TextBox</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;windows textbox&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// textbox具体产品 - mac</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacTextBox</span> <span class="keyword">implements</span> <span class="title class_">TextBox</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mac textbox&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过抽象工厂创建具体工厂</span></span><br><span class="line"><span class="comment">// 组合UI的抽象工厂</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UICreator</span> &#123;</span><br><span class="line">  <span class="title function_">createButton</span>(): <span class="title class_">Button</span>;</span><br><span class="line">  <span class="title function_">createTextBox</span>(): <span class="title class_">TextBox</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体工厂 - windows</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsUICreator</span> &#123;</span><br><span class="line">  <span class="title function_">createButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createTextBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsTextBox</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacUICreator</span> &#123;</span><br><span class="line">  <span class="title function_">createButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacButton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createTextBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacTextBox</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创造具体的UI，亦可以用type = &#x27;mac&#x27; | &#x27;windows&#x27; 替换参数，但是拓展性稍差</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uiCreator</span>(<span class="params"><span class="attr">creator</span>: <span class="title class_">UICreator</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> button = creator.<span class="title function_">createButton</span>();</span><br><span class="line">  <span class="keyword">const</span> textBox = creator.<span class="title function_">createTextBox</span>();</span><br><span class="line"></span><br><span class="line">  button.<span class="title function_">render</span>();</span><br><span class="line">  textBox.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">uiCreator</span>(<span class="keyword">new</span> <span class="title class_">MacUICreator</span>()); <span class="comment">// uiCreator(factoryType)</span></span><br></pre></td></tr></table></figure>

<p><strong>实际应用：</strong></p>
<p>工厂模式：</p>
<ul>
<li>简单的对象创建</li>
<li>减少重复代码</li>
<li>解耦抽象类和业务代码</li>
<li>隐藏复杂的对象构造</li>
<li>例如: 创建不同的用户</li>
</ul>
<p>抽象工厂模式：</p>
<ul>
<li>创建一族有关联的产品</li>
<li>保证产品一致性</li>
<li>多平台或多配置</li>
<li>复杂系统架构</li>
<li>例如：跨平台 UI 库</li>
</ul>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">update</span>(<span class="attr">state</span>: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="attr">observer</span>: <span class="title class_">Observer</span>[];</span><br><span class="line">  <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">attach</span>(<span class="attr">observer</span>: <span class="title class_">Observer</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">detach</span>(<span class="attr">observer</span>: <span class="title class_">Observer</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">notify</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="attr">state</span>: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><h2 id="Vue2-父子组件生命周期顺序"><a href="#Vue2-父子组件生命周期顺序" class="headerlink" title="Vue2 父子组件生命周期顺序"></a>Vue2 父子组件生命周期顺序</h2><p>今天被问到的问题：</p>
<blockquote>
<p>组件的生命周期相关 现在有一对父子组件 他们一定有四个生命周期需要执行<br>父组件的 beforeCreate 父组件的 created 子组件的 beforeCreate 子组件的 created<br>这四个的执行顺序是怎样的</p>
</blockquote>
<p>我一下子没有迷糊过来…. 回答错误了</p>
<p>正确的答案是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父元素</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HomeView&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">HelloWorld</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素&#x27;</span>, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素&#x27;</span>, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素&#x27;</span>, <span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素&#x27;</span>, <span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 子元素</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子元素&#x27;</span>, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子元素&#x27;</span>, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子元素&#x27;</span>, <span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子元素&#x27;</span>, <span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父元素 beforeCreate</span><br><span class="line">父元素 created</span><br><span class="line">父元素 beforeMount</span><br><span class="line">子元素 beforeCreate</span><br><span class="line">子元素 created</span><br><span class="line">子元素 beforeMount</span><br><span class="line">子元素 mounted</span><br><span class="line">父元素 mounted</span><br></pre></td></tr></table></figure>

<p>我觉得是因为在 mounted 之前，Vue 要完成组件树的构建，构建完成之后，从子组件开始依次向上渲染。所以 beforeMount 是一个分界线</p>
<h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><h2 id="关于-this-指向的"><a href="#关于-this-指向的" class="headerlink" title="关于 this 指向的"></a>关于 this 指向的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">getCount</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">getCount</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> func = user.<span class="property">getCount</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>分析：</p>
<blockquote>
<p><code>var func = user.getCount</code>这句，<code>func</code>是一个返回<code>this.count</code>的方法<br>可以理解为<code>window.func()</code><br>可以复制到控制台里，输入<code>window.count = 123</code>，执行<code>func()</code>，将会输出 123</p>
</blockquote>
<h2 id="关于中括号语法取值的"><a href="#关于中括号语法取值的" class="headerlink" title="关于中括号语法取值的"></a>关于中括号语法取值的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">key</span>: <span class="string">&quot;b&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">key</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> d = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a[b] = <span class="number">123</span>;</span><br><span class="line">a[c] = <span class="number">345</span>;</span><br><span class="line">a[d] = <span class="number">333</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]); <span class="comment">// 345</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[c]); <span class="comment">// 345</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[d]); <span class="comment">// 333</span></span><br></pre></td></tr></table></figure>

<p>分析：</p>
<blockquote>
<p>中括号语法取值之前，会先<code>toString()</code>一下<br>所以就变成了：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a[<span class="string">&quot;[object Object]&quot;</span>] = <span class="number">123</span>;</span><br><span class="line">a[<span class="string">&quot;[object Object]&quot;</span>] = <span class="number">345</span>;</span><br><span class="line">a[<span class="string">&quot;3,4,5&quot;</span>] = <span class="number">333</span>;</span><br><span class="line"><span class="comment">// 控制台里跑一下</span></span><br><span class="line"><span class="comment">// &#123;[object Object]: 345, 3,4,5: 333&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="关于函数-return-function-的小问题"><a href="#关于函数-return-function-的小问题" class="headerlink" title="关于函数 return function 的小问题"></a>关于函数 return function 的小问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params">val, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">a</span>(name, val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注意 打印的是index</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>(<span class="number">0</span>); <span class="comment">// undefined</span></span><br><span class="line">b.<span class="title function_">fn</span>(<span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line">b.<span class="title function_">fn</span>(<span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line">b.<span class="title function_">fn</span>(<span class="number">3</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>分析：</p>
<blockquote>
<p>执行<code>b = a(0)</code>，b 被赋值为<code>&#123;fn: function (name) &#123; return a(name, 0) &#125;&#125;</code><br>执行<code>b.fn(&#39;val&#39;)</code>的时候，会返回一个对象<code>&#123;fn: function (name) &#123; return a(name, &#39;val&#39;) &#125;&#125;</code>，这个对象没有赋值给任何变量（垃圾回收），<code>b从未被改变</code><br>很简单的问题，但是很迷惑<br>可以试试这样</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q = b.<span class="title function_">fn</span>(<span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> w = b.<span class="title function_">fn</span>(<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> e = b.<span class="title function_">fn</span>(<span class="number">3</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="let-和-var-的区别"><a href="#let-和-var-的区别" class="headerlink" title="let 和 var 的区别"></a>let 和 var 的区别</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 5 5 5 5 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不用 let, 用闭包试试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">j</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(j), <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异步，事件循环，宏任务微任务"><a href="#异步，事件循环，宏任务微任务" class="headerlink" title="异步，事件循环，宏任务微任务"></a>异步，事件循环，宏任务微任务</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children2&quot;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children3&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children4&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children5&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;children6&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children7&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>思路：<br>浏览器会先把代码看一遍，遇到直接执行的就执行（第一个宏任务）<br>遇到宏任务和微任务代码先按顺序扔一边<br>同步的执行完之后就执行微任务<br>微任务里面肯定有同步任务，微任务，宏任务<br>遇到同步任务直接解决，遇到微任务在微任务后面继续排队，遇到宏任务在宏任务后面继续排队<br>整体的执行顺序是：<br>有同步任务先解决，然后解决微任务，最后解决宏任务<br>以上输出结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="string">&quot;children4&quot;</span>;</span><br><span class="line"><span class="string">&quot;children2&quot;</span>;</span><br><span class="line"><span class="string">&quot;children3&quot;</span>;</span><br><span class="line"><span class="string">&quot;children5&quot;</span>;</span><br><span class="line"><span class="string">&quot;children7&quot;</span>;</span><br><span class="line"><span class="string">&quot;children6&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>宏任务</strong></p>
<ul>
<li>script(整体代码)</li>
<li>setTimeout，setInterval</li>
<li>xhr</li>
<li>I/O</li>
<li>UI 交互事件</li>
</ul>
<p><strong>微任务</strong></p>
<ul>
<li>Promese</li>
<li>await 之后的内容(我不知道这样理解是否正确，但是在执行顺序上确实类似于微任务)</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a></li>
</ul>
<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><h2 id="七层协议"><a href="#七层协议" class="headerlink" title="七层协议"></a>七层协议</h2><p>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-Homestead使用记录</title>
    <url>/posts/a2d4eabf/</url>
    <content><![CDATA[<h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><p><a href="https://learnku.com/docs/laravel/6.x">laravel6</a><br><a href="https://learnku.com/docs/laravel/6.x/homestead/5127">Homestead</a></p>
<h2 id="什么是-homestead"><a href="#什么是-homestead" class="headerlink" title="什么是 homestead"></a>什么是 homestead</h2><blockquote>
<p>Laravel 致力于让整个 PHP 开发体验变的更愉快，包括你的本地开发环境。Vagrant 提供了一种简单、优雅的方式来管理和配置虚拟主机。<br>Laravel Homestead 是一个官方预封装的 Vagrant box ，它为你提供了一个完美的开发环境，你不需要在本地机器安装 PHP、web 服务器和其他的服务器软件。你再也不用担心会弄乱你的操作系统了！Vagrant boxes 是一次性的。 如果出现问题， 你可以在几分钟内销毁并重新创建 box !<br>Homestead 可以运行在任何 Windows、Mac、或 Linux 系统， 它包括了 Nginx web 服务器，PHP 7.3、PHP 7.2、PHP 7.1、MySQL、PostgreSQL、Redis、Memcached、Node 以及你开发 Laravel 所需要的东西</p>
</blockquote>
<p>以上是文档的介绍，简而言之就是让开发更方便的虚拟主机，里面跑了个 web 程序</p>
<p>这个虚拟机经常会炸，缓存占满了硬盘之类的事情，启动的时候就报错了…<br>这个时候最快的方法不是去修理他，而是卸了重装搞个新的<br><strong>一次性</strong></p>
<p>其他相关的东西：</p>
<p><a href="https://www.virtualbox.org/wiki/Downloads">Oracle VM VirtualBox</a>：<br>提供虚拟的的软件</p>
<p><a href="https://www.vagrantup.com/downloads">Vagrant</a>：<br>一个和虚拟机进行交互的命令行</p>
<p><a href="https://learnku.com/docs/laravel/6.x/homestead/5127">Homestead</a>：<br>通过 Homestead 可以写入一些虚拟机内部的配置，比如共享文件夹，虚拟机里 php 的版本，开放的端口之类的。<br>Homestead 会通过 Vagrant 帮我们完成虚拟机的配置</p>
<p>虚拟机炸了的时候，果断把 VirtualBox 和 Vagrant 卸载掉，重新安装</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装-VirtualBox-和-Vagrant"><a href="#安装-VirtualBox-和-Vagrant" class="headerlink" title="安装 VirtualBox 和 Vagrant"></a>安装 VirtualBox 和 Vagrant</h3><p>安装好 VirtualBox 和 Vagrant 之后，输入这个命令，把<code>laravel/homestead box</code>添加到 vagrant 中安装， 命令失败的话检查 Vagrant 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure>

<h3 id="安装-Homestead"><a href="#安装-Homestead" class="headerlink" title="安装 Homestead"></a>安装 Homestead</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/laravel/homestead.git ~/Homestead</span><br><span class="line"></span><br><span class="line">cd ~/Homestead</span><br></pre></td></tr></table></figure>

<p>windows 启动 init.bat 初始化 Homestead，之后会生成一个：<code>Homestead.yaml</code><br>在这个文件中进行相应配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ip:</span> <span class="string">&quot;192.168.10.10&quot;</span></span><br><span class="line"><span class="comment"># 虚拟机内存</span></span><br><span class="line"><span class="attr">memory:</span> <span class="number">2048</span></span><br><span class="line"><span class="comment"># 虚拟机cpu</span></span><br><span class="line"><span class="attr">cpus:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 虚拟机提供者</span></span><br><span class="line"><span class="attr">provider:</span> <span class="string">virtualbox</span></span><br><span class="line"><span class="comment"># 共享文件夹</span></span><br><span class="line"><span class="comment"># 这些文件夹中的文件如果发生变更，它们会保持本地机器与 Homestead 环境之间同步。</span></span><br><span class="line"><span class="comment"># map: 项目位置</span></span><br><span class="line"><span class="comment"># to: 虚拟机项目位置</span></span><br><span class="line"><span class="attr">folders:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">map:</span> <span class="string">~/path/to/code</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">/home/vagrant/path/to/code</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">map:</span> <span class="string">~/path/to/code</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">/home/vagrant/path/to/code</span></span><br><span class="line"><span class="comment"># 配置 Nginx 站点</span></span><br><span class="line"><span class="comment"># sites 功能可以让你在 Homestead 上轻松的映射一个” 域名” 到一个文件夹</span></span><br><span class="line"><span class="attr">sites:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">map:</span> <span class="string">homestead.test</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">/home/vagrant/path/to/code/public</span></span><br><span class="line">    <span class="attr">php:</span> <span class="string">&quot;7.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">databases:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">homestead</span></span><br><span class="line"><span class="comment"># features:</span></span><br><span class="line"><span class="comment">#     - mariadb: false</span></span><br><span class="line"><span class="comment">#     - ohmyzsh: false</span></span><br><span class="line"><span class="comment">#     - webdriver: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#services:</span></span><br><span class="line"><span class="comment">#    - enabled:</span></span><br><span class="line"><span class="comment">#        - &quot;postgresql@12-main&quot;</span></span><br><span class="line"><span class="comment">#    - disabled:</span></span><br><span class="line"><span class="comment">#        - &quot;postgresql@11-main&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ports:</span></span><br><span class="line"><span class="comment">#     - send: 50000</span></span><br><span class="line"><span class="comment">#       to: 5000</span></span><br><span class="line"><span class="comment">#     - send: 7777</span></span><br><span class="line"><span class="comment">#       to: 777</span></span><br><span class="line"><span class="comment">#       protocol: udp</span></span><br></pre></td></tr></table></figure>

<h2 id="启动虚拟机和常用-vagrant-命令"><a href="#启动虚拟机和常用-vagrant-命令" class="headerlink" title="启动虚拟机和常用 vagrant 命令"></a>启动虚拟机和常用 vagrant 命令</h2><p>创建和启动虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>重启虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure>

<p>关闭虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure>

<p>销毁并重启虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant destroy &amp;&amp; vagrant up</span><br></pre></td></tr></table></figure>

<p>重载虚拟机配置, 修改了 Homestead.yaml 需要重载配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure>

<p>连接到虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Git rebase和cherry-pick</title>
    <url>/posts/71e03861/</url>
    <content><![CDATA[<h1 id="认识-rebase"><a href="#认识-rebase" class="headerlink" title="认识 rebase"></a>认识 rebase</h1><p>rebase，正如字面意思，重新选择基点</p>
<p>比如下面这个图，这张图片里有两个分支 <code>feature</code> 和 <code>master</code></p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/20240803123427.png"></p>
<p>起初，两个分支均为 <code>commit A</code> 为基点，<code>feature</code> 分支延伸出了 <code>D</code> 和 <code>E</code> 两个 commit，<code>master</code>分支延伸出了<code>B</code>和<code>C</code>两个 commit</p>
<p>如果执行了在<code>master</code>分支执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at branch feature</span></span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure>

<p>则<code>feature</code>分支的基点会从<code>A</code>变成 <code>master</code>的最新 commit <code>C</code>。这就是 rebase</p>
<p>rebase 之后，不论是 <code>feature</code> 还是 <code>master</code> ，他们都在同一条提交线上</p>
<h2 id="对比-rebase-和-merge"><a href="#对比-rebase-和-merge" class="headerlink" title="对比 rebase 和 merge"></a>对比 rebase 和 merge</h2><p>还用上面的例子</p>
<p>有这样的一个提交例子</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722661693998.png"></p>
<p>现在试一下不同的操作对提交树产生的影响</p>
<p><strong>如果使用 rebase</strong></p>
<p>为保证相同的顺序 <code>(ABCDE)</code>，需要切换到 <code>feature</code> 分支，<code>rebase master</code> 分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at branch feature</span></span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure>

<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722662018352.png"></p>
<p><strong>如果使用 merge</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at branch master</span></span><br><span class="line">git merge feature</span><br></pre></td></tr></table></figure>

<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722662097912.png"></p>
<p>使用 merge 依然是两条线，使用 rebase 则是一条线</p>
<p>使用 merge 还多出了一个 commit</p>
<h1 id="使用-rebase-整理提交历史"><a href="#使用-rebase-整理提交历史" class="headerlink" title="使用 rebase 整理提交历史"></a>使用 rebase 整理提交历史</h1><p>除了用来合并代码，rebase 还可以用来整理提交历史</p>
<p>触发交互式 rebase：<code>--interactive</code> <code>-i</code></p>
<p>继续上面的例子，选定 commit <code>A</code> 为基点，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i `commit A`</span><br></pre></td></tr></table></figure>

<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722664224265.png"></p>
<p>执行命令后会进入一个编辑界面</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722664299381.png"></p>
<p>pick（或 p）：保留该提交。<br>reword（或 r）：保留提交但修改提交消息。<br>edit（或 e）：暂停 rebase 并允许你修改该提交，比如修改内容、添加文件等。<br>squash（或 s）：将该提交与前一个提交合并。你可以修改合并后的提交信息。<br>fixup（或 f）：与 squash 类似，但丢弃当前提交的提交信息，直接合并到前一个提交。<br>exec（或 x）：在当前提交点执行一个 shell 命令。<br>drop（或 d）：删除该提交。</p>
<p>假设希望删除 commit <code>E</code> 这次提交，把 <code>C</code> 和 <code>D</code> 压缩成一个 commit，并且修改 commit 消息为 <code>CD</code>，可以这样做</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722664784869.png"></p>
<p>保存之后，会提示修改 commit 消息</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722664834165.png"></p>
<p>之后，提交历史会变成这个样子</p>
<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722664903294.png"></p>
<h1 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h1><p>cherry-pick，摘樱桃。很形象地表示这个命令是要从提交树上删除掉一些 commit，和 <code>git rebase -i</code> 中的 <code>drop</code> 操作类似</p>
<p>这个命令经常配合 rebase 使用，比如某次提交的代码有问题，可以先备份一下，然后从主分支 cherry-pick 掉</p>
<p>cherry-pick 多个 commit 的时候，需要按照与原始顺序相反的顺序来删除</p>
<p>如果 commit1 依赖于 commit2，那么应该是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commit1&gt; &lt;commit2&gt;</span><br></pre></td></tr></table></figure>

<p>这样有利于减少冲突，避免依赖性问题</p>
<h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>rebase 和 cherry-pick 也会产生冲突，并且解决步骤和 merge 不同</p>
<p>merge 是将一条分支上的所有代码汇入另一条分支，其操作的维度是分支，所以只会有一次冲突</p>
<p>而 rebase 不同，rebase 的操作维度是 commit，以上面 ABCDE 的 rebase 过程为例，<code>D</code>和<code>E</code> 在 rebase 到 <code>C</code> 上面的时候，如果 <code>D</code> 和 <code>E</code> 对比 <code>BC</code> 均有冲突，那么应该解决 <code>D</code> 和 <code>E</code> 造成的两次冲突，rebase 的分支有几个 commit 就可能最多产生多少次的冲突</p>
<p>如果一条分支不需要 commit 的每个细节，则可以利用 <code>rebase -i</code> 压缩(<code>squash</code>) 掉 commit</p>
<p>解决冲突的方式也和 merge 的重新提交不同，应该先把冲突的解决结果使用 <code>add</code> 命令提交到暂存区，然后使用 continue 解决下一个 rebase 的冲突。如此循环，直到没有冲突为准</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>

<h1 id="rebase-的优点和缺点"><a href="#rebase-的优点和缺点" class="headerlink" title="rebase 的优点和缺点"></a>rebase 的优点和缺点</h1><p><strong>rebase 的优点</strong></p>
<ul>
<li>rebase 保持了提交历史的线性和简洁，方便管理</li>
<li>有效减少了合并提交，让每个 commit 都有意义</li>
</ul>
<p><strong>rebase 的缺点</strong></p>
<ul>
<li>操作不当会丢代码，如果没有分支备份，在解决冲突的时候，以及使用 drop 和 cherry-pick 的时候，会造成代码的丢失</li>
<li>解决冲突的过程比较复杂</li>
<li>依赖历史 commit 的线性结构</li>
<li>开发过程中断的情况，如果某个分支被搁置了很久，这个分支再去 rebase 最新代码的时候，可能会产生巨量的冲突需要解决</li>
</ul>
<hr>
<p><strong>分支管理和使用经历</strong></p>
<p>在米哈游的平台组工作时，前端团队用的就是 rebase 的管理方式。</p>
<p>维护协作分支 develop(ci 对应 test 环境)，pre 和 master 分支(ci 对应 pre 环境)，tag 为线上环境发布。</p>
<p>在进行需求开发的时候，每个人会从 develop 分支拉出自己的开发分支，在提测的时候，会将自己的开发分支 rebase 一下 develop，通过 git lab 提交 merge request 进入 develop 测试环境。</p>
<p>团队大约十几个人，同时开发多个模块，使用 merge 的话会让提交树变得非常复杂，难以从中间摘掉某个提交，或者快速定位和解决问题。rebase 是非常好的管理方式。</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git查看文件差异：diff</title>
    <url>/posts/b9cda84/</url>
    <content><![CDATA[<h1 id="使用-git-diff-查看-pull-之后的文件有哪些修改"><a href="#使用-git-diff-查看-pull-之后的文件有哪些修改" class="headerlink" title="使用 git diff 查看 pull 之后的文件有哪些修改"></a>使用 git diff 查看 pull 之后的文件有哪些修改</h1><p>git pull 对于拉下来的修改文件自动对其进行 git add /rm 及 git commit 操作。所以拉下来的文件有那些修改，查看的方式可把它们归结于上一次提交的比较。</p>
<p>git diff HEAD 显示工作目录与 git 仓库之间的差异，而 git diff HEAD^ 则显示上一次提交之前工作目录与 git 仓库之间的差异。所以我们在 git pull 后，可以通过 git diff HEAD^ 来查看拉下来的文件有那些具体的修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff 显示工作目录与索引文件之间的差异</span><br><span class="line"></span><br><span class="line">git diff –cached显示索引文件与git仓库之间的差异</span><br><span class="line"></span><br><span class="line">git diff HEAD 显示工作目录与git仓库之间的差异</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Renpy学习：自定义开场画面</title>
    <url>/posts/b9a2d959/</url>
    <content><![CDATA[<h1 id="学习来源"><a href="#学习来源" class="headerlink" title="学习来源"></a>学习来源</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/54110016">自定义开场画面 1</a><br><a href="https://zhuanlan.zhihu.com/p/55301554">自定义界面</a><br>SDK 版本 7.1.2</p>
</blockquote>
<h1 id="脚本标签-label"><a href="#脚本标签-label" class="headerlink" title="脚本标签 label"></a>脚本标签 label</h1><p><a href="https://www.renpy.cn/doc/label.html#special-labels">特殊 label 标签</a><br>脚本标签 label 可以用在任何 rpy 脚本文件中，可以理解为某一段脚本的索引<br>新建工程会生成一个 start 的 label，在主菜单点击启动或开始后，就会从 start 开始顺序执行脚本</p>
<h1 id="可用标签"><a href="#可用标签" class="headerlink" title="可用标签"></a>可用标签</h1><p>这个场景下可以使用的标签有三个</p>
<ul>
<li>splashscreen</li>
<li>before_main_menu</li>
<li>main_menu</li>
</ul>
<p>在开头先把文本标签写上</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开场画面</span></span><br><span class="line">label splashscreen:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主菜单之前</span></span><br><span class="line">label before_main_menu:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主菜单</span></span><br><span class="line">label main_menu:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>在 script.rpy 中添加这些文本标签后会发现，开头的主菜单(main menu)被跳过了</p>
<h1 id="在主菜单前显示一个-logo"><a href="#在主菜单前显示一个-logo" class="headerlink" title="在主菜单前显示一个 logo"></a>在主菜单前显示一个 logo</h1><p>将需要显示的 logo 图片放在工程目录中的 images 子目录下，<br>然后重命名为 logo.png(文件名不能用中文)，<br>修改 splashscreen 标签</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">label splashscreen:</span><br><span class="line">  show logo at truecenter <span class="keyword">with</span> Dissolve(<span class="number">2.0</span>)</span><br><span class="line">  pause <span class="number">1.0</span></span><br><span class="line">  hide logo width Dissolve(<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>

<p>show 语句带两个分句来调整位置和使用转场(transition)<br>pause 语句暂停整个画面 1 秒<br>hide 语句使用转场(transition)让 logo 消失</p>
<h1 id="logo-背景色"><a href="#logo-背景色" class="headerlink" title="logo 背景色"></a>logo 背景色</h1><p>如上方法显示 logo，背景是黑色的<br>如果需要白色或者其他图片作为背景的话，先定义图像(image)，<br>使用 scene 和 show 语句顺序显示就可以了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开场logo</span></span><br><span class="line">image pure_black = <span class="string">&quot;#000&quot;</span></span><br><span class="line">image pure_white = <span class="string">&quot;#fff&quot;</span></span><br><span class="line"></span><br><span class="line">label splashscreen:</span><br><span class="line">  scene pure_black</span><br><span class="line">  show pure_white <span class="keyword">with</span> Dissolve(<span class="number">2.0</span>)</span><br><span class="line">  show logo at truecenter <span class="keyword">with</span> Dissolve(<span class="number">2.0</span>)</span><br><span class="line">  pause <span class="number">1.0</span></span><br><span class="line">  hide logo <span class="keyword">with</span> Dissolve(<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>

<p>这里使用了两个图像(image)，采用的是 RGB 纯色<br>也可以使用图片文件替换<br>如果需要展示多个 logo，可以按顺序使用 show 和 hide 语句</p>
<h1 id="logo-不可点击跳过"><a href="#logo-不可点击跳过" class="headerlink" title="logo 不可点击跳过"></a>logo 不可点击跳过</h1><p>使用 renpy.pause 函数可以做到…<br>在每一个不想被跳过的 sence，show，hide 语句后面都加上一句</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">$ renpy.pause(<span class="number">1</span>, hard=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>$表示后面是一个 python 函数，<br>入参数字 1 表示持续时间为 1 秒，<br>hard=True 表示鼠标点击不能打断暂停</p>
<blockquote>
<p><em>官方对 hard=True 的使用建议是：Use this sparingly, as it’s hard to distinguish a hard pause from a crashing game(谨慎使用，因为很难区分硬性暂停和程序卡死)。</em></p>
</blockquote>
<h1 id="在开头播放视频"><a href="#在开头播放视频" class="headerlink" title="在开头播放视频"></a>在开头播放视频</h1><p>假设要播放的视频文件为“opening.webm”，将它放入另一个特殊脚本标签中：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">label before_main_menu:</span><br><span class="line">  $ renpy.movie_cutscene(<span class="string">&quot;opening.webm&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用 before_main_menu 可以将视频做成主菜单的背景循环播放<br>有一个缺点，<a href="https://www.renpy.cn/doc/movie.html">renpy 的编码格式比较有限</a></p>
<h1 id="自定义一个“点击开始”的界面"><a href="#自定义一个“点击开始”的界面" class="headerlink" title="自定义一个“点击开始”的界面"></a>自定义一个“点击开始”的界面</h1><blockquote>
<p>参考文档：<br><a href="https://renpy.cn/doc/gui.html#screens-navigation">界面(screen)</a><br><a href="https://renpy.cn/doc/displayables.html">可视组件(imagemap)</a><br><a href="https://renpy.cn/doc/trans_trans_python.html">变换(transform)和转场(transition)</a></p>
</blockquote>
<p>在显示完 logo 和开场动画之后，很多游戏会出现一个特殊画面，画面显示“点击 xxx 键开始”<br>用户使用鼠标或者其他设备点击之后，可能会出现主菜单，也可能会进入某个序章剧情</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>自定义一个界面，完成显示和菜单功能</li>
<li>修改原来的 main_menu 界面<br>这里选用前者，原因是——修改别人的代码比较烦人……</li>
</ul>
<h2 id="自定义一个界面-screen"><a href="#自定义一个界面-screen" class="headerlink" title="自定义一个界面(screen)"></a>自定义一个界面(screen)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义界面(screen)</span></span><br><span class="line">screen press_to_start():</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>习惯上，一般都会将界面(screen)放在 screens.rpy 中，或者新建一个 rpy 文件专门写自定义界面</p>
<p>接着是在界面上添加图像(image)<br>这里要添加的图片有两个： “点击继续”和“背景图”<br>当然，点击继续也可以使用文字<br>先在工程目录的 images 里新建一个子目录 menu<br>放入两张图片，background.png 和 press_to_start.png<br>自定义界面：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">screen press_to_start():</span><br><span class="line">  <span class="comment"># 这步确保任何其他界面都会被替换</span></span><br><span class="line">  tag menu</span><br><span class="line">  <span class="comment"># 背景图的尺寸正好跟窗口尺寸是一样的，所以不需要做调整。</span></span><br><span class="line">  add <span class="string">&#x27;menu/background.png&#x27;</span></span><br><span class="line">  <span class="comment"># “点击继续”的图片放在水平正中垂直方向偏下的地方。</span></span><br><span class="line">  add <span class="string">&#x27;menu/press_to_start.png&#x27;</span> xalign <span class="number">0.5</span> yalign <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<h2 id="显示自定义界面"><a href="#显示自定义界面" class="headerlink" title="显示自定义界面"></a>显示自定义界面</h2><p>在 scripts.rpy 中使用 before_main_menu</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts.rpy</span></span><br><span class="line">label before_main_menu:</span><br><span class="line">  call screen press_to_start <span class="keyword">with</span> Dissolve(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">with</span> Fade(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, color=<span class="string">&quot;#000&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果：<br><img src="https://pic4.zhimg.com/80/v2-445be5c2e32b755e1b63e99434553033_720w.jpg"></p>
<h2 id="让“点击开始”闪烁起来"><a href="#让“点击开始”闪烁起来" class="headerlink" title="让“点击开始”闪烁起来"></a>让“点击开始”闪烁起来</h2><p>使用变换(transform)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义的图片闪烁变换</span></span><br><span class="line">transform transform_blink:</span><br><span class="line">  linear <span class="number">1.0</span> alpha <span class="number">0.2</span></span><br><span class="line">  linear <span class="number">1.0</span> alpha <span class="number">1.0</span></span><br><span class="line">  repeat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义界面的部分</span></span><br><span class="line">screen press_to_start():</span><br><span class="line">  tag menu</span><br><span class="line">  add <span class="string">&#x27;menu/background.png&#x27;</span></span><br><span class="line">  add <span class="string">&#x27;menu/press_to_start.png&#x27;</span> xalign <span class="number">0.5</span> yalign <span class="number">0.7</span> at transform_blink</span><br></pre></td></tr></table></figure>

<h2 id="点击继续按钮的功能"><a href="#点击继续按钮的功能" class="headerlink" title="点击继续按钮的功能"></a>点击继续按钮的功能</h2><p>为了实现继续的功能,需要进入一个全屏的热点(hotspot):</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">screen press_to_start():</span><br><span class="line">  tag menu</span><br><span class="line">  add <span class="string">&quot;menu/background.png&quot;</span></span><br><span class="line">  add <span class="string">&quot;menu/press_to_start.png&quot;</span> xalign <span class="number">0.5</span> yalign <span class="number">0.7</span> at transform_blink</span><br><span class="line"></span><br><span class="line">  imagemap:</span><br><span class="line">    <span class="comment"># transparen.png是一张透明的图片</span></span><br><span class="line">    <span class="comment"># 点击时会执行一系列Action函数</span></span><br><span class="line">    ground <span class="string">&#x27;menu/transparent.png&#x27;</span></span><br><span class="line">    hotspot (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1280</span>, <span class="number">720</span>) focus_mask <span class="literal">None</span> action (Play(<span class="string">&#x27;sound&#x27;</span>, <span class="string">&#x27;sound/start.wav&#x27;</span>), Return())</span><br></pre></td></tr></table></figure>

<p>为了偷懒,最后使用了 Return()函数回到了主控流程,也就是自动引入 main_menu 界面<br>如果想在这个画面中直接显示定义菜单的话,可以隐藏点击继续的图片并显示菜单<br>也可以用 call 函数调用一个完整的自定义菜单界面</p>
<p>最后再加一个点击开始界面等待一段时间后播放一段视频,或者其他画面的方法<br>比如,我们想再 press_to_start 界面 30 秒没有点击的情况下播放一段视频,再回到 press_to_start 界面<br>可以这样处理:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts.rpy</span></span><br><span class="line">label before_main_menu:</span><br><span class="line">  $ renpy.movie_cutscene(<span class="string">&#x27;videos/opening.webm&#x27;</span>)</span><br><span class="line">  call screen press_to_start <span class="keyword">with</span> Dissolve(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">with</span> Fade(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, color=<span class="string">&quot;#000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义界面部分(screen)</span></span><br><span class="line">screen press_to_start():</span><br><span class="line">  tag menu</span><br><span class="line">  add <span class="string">&quot;menu/background.png&quot;</span></span><br><span class="line">  add <span class="string">&quot;menu/press_to_start.png&quot;</span> xalign <span class="number">0.5</span> yalign <span class="number">0.7</span> at transform_blink</span><br><span class="line"></span><br><span class="line">  imagemap:</span><br><span class="line">    ground <span class="string">&#x27;menu/transparent.png&#x27;</span></span><br><span class="line">    hotspot (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1280</span>, <span class="number">720</span>) focus_mask <span class="literal">None</span> action(Play(<span class="string">&#x27;sound&#x27;</span>, <span class="string">&#x27;sound/start.wav&#x27;</span>), Return())</span><br><span class="line"></span><br><span class="line">  timer <span class="number">30</span> action Jump(<span class="string">&#x27;before_main_menu&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Renpy</category>
      </categories>
      <tags>
        <tag>Renpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Renpy学习：定义角色</title>
    <url>/posts/1bbafc1e/</url>
    <content><![CDATA[<h1 id="学习来源"><a href="#学习来源" class="headerlink" title="学习来源"></a>学习来源</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/54693281">成功定义一个角色</a><br>SDK 版本 7.1.2</p>
</blockquote>
<h1 id="定义一个角色-Character-和一小段对话-dialogue"><a href="#定义一个角色-Character-和一小段对话-dialogue" class="headerlink" title="定义一个角色(Character)和一小段对话(dialogue)"></a>定义一个角色(Character)和一小段对话(dialogue)</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># script.rpy里有这样一段</span></span><br><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e <span class="string">&quot;您已创建一个新的 Ren&#x27;Py 游戏。&quot;</span></span><br><span class="line">e <span class="string">&quot;当您完善了故事、图片和音乐之后，您就可以向全世界发布了！&quot;</span></span><br></pre></td></tr></table></figure>

<p>一般情况下,脚本中角色的每段话都会导致对话窗口内容更新并暂停, 需要一个鼠标点击事件继续</p>
<h1 id="定制化角色"><a href="#定制化角色" class="headerlink" title="定制化角色"></a>定制化角色</h1><h2 id="角色对话内容可以进一步定制化"><a href="#角色对话内容可以进一步定制化" class="headerlink" title="角色对话内容可以进一步定制化"></a>角色对话内容可以进一步定制化</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&quot;艾琳&quot;</span>, who_color=<span class="string">&quot;#c8ffc8&quot;</span>, window_background=<span class="string">&quot;frame.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这样定义角色的话,名字的文本颜色是#c8ffc8, 角色对话窗口背景使用图片”frame.png”<br><a href="https://renpy.cn/doc/dialogue.html?highlight=character#character">更多配置参考文档</a></p>
<h2 id="立绘"><a href="#立绘" class="headerlink" title="立绘"></a>立绘</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, image=<span class="string">&quot;eileen&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>renpy 在处理带有图像标签的角色定义时,会自动搜索 game/images 目录下所有文件名满足”eileen *“格式的图片文件,并与角色’e’关联<br>教程工程中,有三个’eileen’开头的图片文件,分别是</p>
<blockquote>
<p>eileen concerned.png<br>eileen happy.png<br>eileen vhappy.png</p>
</blockquote>
<p>图片标签都是 eileen, 后面的部分称作图像属性(attribute)<br>角色图像显示可以用 show 语句, 也可以用角色+图片属性的形式:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, image=<span class="string">&quot;eileen&quot;</span>)</span><br><span class="line">label start:</span><br><span class="line">  show eileen happy</span><br><span class="line">  e <span class="string">&quot;很高兴认识你&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以写成:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, image=<span class="string">&quot;eileen&quot;</span>)</span><br><span class="line">label start:</span><br><span class="line">  e happy <span class="string">&quot;很高兴认识你&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&quot;艾琳&quot;</span>, image=<span class="string">&quot;eileen&quot;</span>)</span><br><span class="line"></span><br><span class="line">label start:</span><br><span class="line">  show eileen mad</span><br><span class="line">  e <span class="string">&quot;我对你有点失望。&quot;</span></span><br><span class="line">  <span class="comment"># 如果在图像属性前面加一个 @ 符号，图像属性的改变将是临时性的，在执行完这行对话脚本后会恢复成上一个图像属性</span></span><br><span class="line">  e @ happy <span class="string">&quot;虽然还挺有趣的。&quot;</span></span><br><span class="line">  <span class="comment"># 两种语法可以混用，在 @ 符号之前表示永久改变，符号后面表示临时改变一次。</span></span><br><span class="line">  e happy @ vhappy <span class="string">&quot;真的！一切都改变了。&quot;</span></span><br><span class="line">  e <span class="string">&quot;不过别想我帮你从这档子破事里抽身。&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="独白模式-monologue-mode"><a href="#独白模式-monologue-mode" class="headerlink" title="独白模式(monologue mode)"></a>独白模式(monologue mode)</h2><p>将角色的对话内容放进成对的三引号里 用空行分隔:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, image=<span class="string">&quot;eileen&quot;</span>)</span><br><span class="line"></span><br><span class="line">label start:</span><br><span class="line">  e <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    学习Ren&#x27;Py第一步是看文档。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    学习Ren&#x27;Py第二步是练习样例。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    学习Ren&#x27;Py第三步是放弃。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    或者……女装！</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><h2 id="what-prefix-amp-what-suffix"><a href="#what-prefix-amp-what-suffix" class="headerlink" title="what_prefix &amp; what_suffix"></a>what_prefix &amp; what_suffix</h2><p>角色对话内容在开头或结尾自动加上前缀或后缀</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, what_prefix=<span class="string">&quot;唔嗯&quot;</span>, what_suffix=<span class="string">&quot;是也&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="内插-interpolation-图片"><a href="#内插-interpolation-图片" class="headerlink" title="内插(interpolation)图片"></a>内插(interpolation)图片</h2><p>举例来讲, 如果我们有个雪花的图片, 名叫 snowflake.png, 开头先定义一个 image:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片两秒顺时针旋转一圈</span></span><br><span class="line">image end_pic:</span><br><span class="line">  <span class="string">&quot;snowflake.png&quot;</span></span><br><span class="line">  size (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">  block:</span><br><span class="line">    rotate <span class="number">0</span></span><br><span class="line">    linear <span class="number">2.0</span> rotate <span class="number">360</span></span><br><span class="line">    repeat</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">define e = Character(<span class="string">&#x27;艾琳&#x27;</span>, what_suffix=<span class="string">&quot;&#123;image=endpic&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">label start:</span><br><span class="line">  e <span class="string">&quot;嗯哼~&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-831f218349a751ca7fdbc4e05725a5c6_720w.jpg"></p>
]]></content>
      <categories>
        <category>Renpy</category>
      </categories>
      <tags>
        <tag>Renpy</tag>
      </tags>
  </entry>
  <entry>
    <title>3D卡片翻转效果</title>
    <url>/posts/f91c3669/</url>
    <content><![CDATA[<h2 id="一个简单的-3D-卡片效果"><a href="#一个简单的-3D-卡片效果" class="headerlink" title="一个简单的 3D 卡片效果"></a>一个简单的 3D 卡片效果</h2><p>嘛… 业务需求，就做了一下</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML 结构很简单，一个 relative 的父元素，两个 absolute 的子元素（一个正面一个背面）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>这是正面哦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>这是背面~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS-基础样式"><a href="#CSS-基础样式" class="headerlink" title="CSS 基础样式"></a>CSS 基础样式</h2><h3 id="父元素长宽设定，居中"><a href="#父元素长宽设定，居中" class="headerlink" title="父元素长宽设定，居中"></a>父元素长宽设定，居中</h3><p><code>transform-style: preserve-3d;</code>将变换舞台设置为 3d（有遮挡效果）</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-style">MDN 上时这样说的</a>:<br>CSS 属性 transform-style 设置元素的子元素是位于 3D 空间中还是平面中。<br>如果选择平面，元素的子元素将不会有 3D 的遮挡关系。<br>由于这个属性不会被继承，因此必须为元素的所有非叶子子元素设置它</p>
</blockquote>
<p><code>perspective: 500px;</code>景深<br><code>perspective-origin: bottom;</code>视角</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="comment">/* perspective-origin: bottom; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子元素的共同属性"><a href="#子元素的共同属性" class="headerlink" title="子元素的共同属性"></a>子元素的共同属性</h3><p><code>transition</code>设定过渡效果<br><code>backface-visibility: hidden;</code>这个是为了被转到背面的元素不显示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.front</span>,</span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.04</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子元素各自的属性"><a href="#子元素各自的属性" class="headerlink" title="子元素各自的属性"></a>子元素各自的属性</h3><p>正面的元素初始不旋转<br>背面的元素初始旋转 180deg<br><a href="https://bansal.io/pattern-css">设定一个好看的背景</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#ddd</span> <span class="number">25%</span>, transparent <span class="number">25%</span>) -<span class="number">10px</span> <span class="number">0</span>, <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">225deg</span>,</span><br><span class="line">        <span class="number">#ddd</span> <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">25%</span></span><br><span class="line">      ) -<span class="number">10px</span> <span class="number">0</span>, <span class="built_in">linear-gradient</span>(<span class="number">315deg</span>, <span class="number">#ddd</span> <span class="number">25%</span>, transparent <span class="number">25%</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#ddd</span> <span class="number">25%</span>, transparent <span class="number">25%</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="built_in">calc</span>(<span class="number">2</span> * <span class="number">10px</span>) <span class="built_in">calc</span>(<span class="number">2</span> * <span class="number">10px</span>);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, transparent <span class="number">50%</span>, skyblue <span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hover-触发旋转"><a href="#hover-触发旋转" class="headerlink" title="hover 触发旋转"></a>hover 触发旋转</h3><p>hover 应该给父元素，给子元素的话，就转不回来了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#card</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#card</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Codepen"><a href="#Codepen" class="headerlink" title="Codepen"></a>Codepen</h3><iframe height="500" style="width: 100%;" scrolling="no" title="" src="https://codepen.io/homuxing/embed/preview/GRErMqy?default-tab=html%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/homuxing/pen/GRErMqy">
  </a> by Amurita (<a href="https://codepen.io/homuxing">@homuxing</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>px2rem的原理</title>
    <url>/posts/4a72136d/</url>
    <content><![CDATA[<h1 id="根据设计图尺寸自动计算-rem—px2rem"><a href="#根据设计图尺寸自动计算-rem—px2rem" class="headerlink" title="根据设计图尺寸自动计算 rem—px2rem"></a>根据设计图尺寸自动计算 rem—px2rem</h1><h2 id="scss-函数的应用点"><a href="#scss-函数的应用点" class="headerlink" title="scss 函数的应用点"></a>scss 函数的应用点</h2><ul>
<li>@function 和@return 是定义 scss 函数，用法看起来和 JS 函数差不多</li>
<li>#{}代表插值，可以在#{}里计算 scss 变量</li>
</ul>
<h2 id="px2rem-函数代码"><a href="#px2rem-函数代码" class="headerlink" title="px2rem 函数代码"></a>px2rem 函数代码</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $px 设计图上元件的尺寸</span></span><br><span class="line"><span class="comment">// $design-width  设计图尺寸</span></span><br><span class="line"><span class="comment">// $block  视口宽度被html的font-size切分的块数</span></span><br><span class="line"><span class="variable">$design-width</span>: <span class="number">375</span>;</span><br><span class="line"><span class="variable">$blocks</span>: <span class="number">10</span>;</span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> #&#123;<span class="variable">$px</span> / <span class="variable">$design-width</span> * <span class="variable">$block</span>&#125;rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="理解计算逻辑"><a href="#理解计算逻辑" class="headerlink" title="理解计算逻辑"></a>理解计算逻辑</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算出设计图上元件的宽度相对于设计图尺寸的宽度比值： $px / $design-width</span><br><span class="line"></span><br><span class="line">假设设计图尺寸==视口宽度：假设设计图为375px 视口为100vw 那么让375px == 100vw 然后通过rem单位去实现这个换算↓↓↓</span><br><span class="line"></span><br><span class="line">html的font-size把页面切分：如果font-size是10vw，相当于把页面切分成10块，$design-width / 10 == 10vw</span><br><span class="line"></span><br><span class="line">$px / $design-width * $block 就得出了转换为rem之后的值</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>图片加载防抖且宽高适应父元素</title>
    <url>/posts/62c29094/</url>
    <content><![CDATA[<h1 id="图片加载防抖且宽高适应父元素的一个思路"><a href="#图片加载防抖且宽高适应父元素的一个思路" class="headerlink" title="图片加载防抖且宽高适应父元素的一个思路"></a>图片加载防抖且宽高适应父元素的一个思路</h1><p>父元素高度设置为 0，使用 padding 撑起高度，利用绝对定位让图片定位在父元素的内边距上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;picture/url&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.image-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一份Reset.css</title>
    <url>/posts/e23c51a5/</url>
    <content><![CDATA[<h1 id="关于-Normalize-css"><a href="#关于-Normalize-css" class="headerlink" title="关于 Normalize.css"></a>关于 Normalize.css</h1><p><a href="http://necolas.github.io/normalize.css/">normalize.css</a>确实是很好用的，它主要的作用是统一各个浏览器之间的差异性</p>
<blockquote>
<p>Normalize.css makes browsers render all elements more consistently and in line with modern standards. It precisely targets only the styles that need normalizing.<br>附上谷歌翻译:<br>Normalize.css 使浏览器更一致地呈现所有元素并符合现代标准。它仅针对需要标准化的样式。<br>reset.css 可以和 normalize 一起使用,但没必要…</p>
</blockquote>
<h1 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h1><p>我用 reset.css 主要是为了全局擦除 a 标签的下划线还有 p 标签的 margin<br>怎么舒服怎么来, 合适自己的才是最好的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*vertical-align: bottom;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*h1,h2,h3,h4,h5,h6,small&#123;font-size:100%;&#125;*/</span></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*a&#123; text-decoration:none; color:#666; cursor:pointer; outline:none; transition: all 0.5s; &#125;*/</span></span><br><span class="line"><span class="comment">/*a&#123; transition: all 0.5s; &#125;*/</span></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后续可能会添加更新</p>
</blockquote>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Cropper实现图片裁剪上传</title>
    <url>/posts/dcc04deb/</url>
    <content><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote>
<p><a href="https://www.layui.com/doc/modules/layer.html">layui-layer(弹窗)</a><br><a href="https://github.com/fengyuanchen/cropperjs">cropper.js</a><br><a href="https://fengyuanchen.github.io/cropperjs/examples/upload-cropped-image-to-server.html">cropper-demo</a></p>
</blockquote>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cropper<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.6.8/layui.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha512-lH7rGfsFWwehkeyJYllBq73IsiR7RH2+wuOVjr06q8NKwHp5xVnkdSvUm8RNt31QCROqtPrjAAd1VuNH0ISxqQ==&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.6.8/css/layui.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha512-iQBJbsNHXUcgEIgWThd2dr8tOdKPvICwqjPEZYY81z3eMya44A5MiAqfWSCh+Ee1YzNYkdrI982Qhwgr8LEYOQ==&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/cropperjs/1.5.9/cropper.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/cropperjs/1.5.9/cropper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.upload</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.popup</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.popup</span> <span class="selector-class">.image-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.image-wrapper</span> <span class="selector-class">.image</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">&quot;https://img1.baidu.com/it/u=52681052,678098948&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1000&amp;h=400&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Upload</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$box</span> = $(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$input</span> = $(<span class="string">&quot;.box .upload&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$image</span> = $(<span class="string">&quot;.popup .image&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$popup</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cropper</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">imgUrl</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bindFileInputClick</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bindImageClick</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bindUploadChange</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建弹窗</span></span><br><span class="line">    <span class="title function_">openLayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      layui.<span class="title function_">use</span>(<span class="string">&quot;layer&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> layer = layui.<span class="property">layer</span>;</span><br><span class="line">        that.<span class="property">$popup</span> = layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">          <span class="attr">offset</span>: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;裁剪图片&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">btn</span>: [<span class="string">&quot;确定&quot;</span>],</span><br><span class="line">          <span class="attr">content</span>: $(<span class="string">&quot;.popup&quot;</span>),</span><br><span class="line">          <span class="comment">// 弹窗打开的回调</span></span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            that.<span class="property">cropper</span> = <span class="keyword">new</span> <span class="title class_">Cropper</span>(that.<span class="property">$image</span>[<span class="number">0</span>], &#123;</span><br><span class="line">              <span class="attr">aspectRatio</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">viewMode</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Cropper&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 点击确定按钮的回调</span></span><br><span class="line">          <span class="attr">yes</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">            that.<span class="title function_">saveCropped</span>();</span><br><span class="line">            that.<span class="property">cropper</span>.<span class="title function_">destroy</span>();</span><br><span class="line">            that.<span class="property">cropper</span> = <span class="literal">null</span>;</span><br><span class="line">            layer.<span class="title function_">close</span>(index, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              $(<span class="string">&quot;.popup&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cropper destroy&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 点击关闭按钮的回调</span></span><br><span class="line">          <span class="attr">cancel</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">            that.<span class="property">cropper</span>.<span class="title function_">destroy</span>();</span><br><span class="line">            that.<span class="property">cropper</span> = <span class="literal">null</span>;</span><br><span class="line">            layer.<span class="title function_">close</span>(index, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              $(<span class="string">&quot;.popup&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cropper destroy&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bindImageClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$box</span>.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">        that.<span class="property">$input</span>.<span class="title function_">click</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bindFileInputClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$input</span>.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">initPopup</span>(<span class="params">url</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$input</span>.<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$image</span>.<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, url);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">openLayer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bindUploadChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$input</span>.<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> files = e.<span class="property">target</span>.<span class="property">files</span>;</span><br><span class="line">        <span class="keyword">var</span> reader;</span><br><span class="line">        <span class="keyword">var</span> file;</span><br><span class="line">        <span class="keyword">var</span> url;</span><br><span class="line">        <span class="keyword">if</span> (files &amp;&amp; files.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          file = files[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        that.<span class="title function_">initPopup</span>(<span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(file));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">saveCropped</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">var</span> saveAvatar = <span class="variable language_">this</span>.<span class="property">$box</span>.<span class="title function_">find</span>(<span class="string">&quot;.avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cropper</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">imgUrl</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="variable language_">this</span>.<span class="property">cropper</span>.<span class="title function_">getCroppedCanvas</span>(&#123;</span><br><span class="line">          <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">          <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        canvas.<span class="title function_">toBlob</span>(<span class="keyword">function</span> (<span class="params">blob</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;avatar&quot;</span>, blob, <span class="string">&quot;avatar.jpg&quot;</span>);</span><br><span class="line">          $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, <span class="comment">// mock api</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;upload success&quot;</span>);</span><br><span class="line">              that.<span class="property">imgUrl</span> = res.<span class="property">url</span>; <span class="comment">// mock</span></span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">              that.<span class="property">$box</span>.<span class="title function_">find</span>(<span class="string">&quot;.avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, canvas.<span class="title function_">toDataURL</span>());</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              that.<span class="property">$box</span>.<span class="title function_">find</span>(<span class="string">&quot;.avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, saveAvatar);</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;upload error&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$upload</span> = <span class="keyword">new</span> <span class="title class_">Upload</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">consoleUrl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">consoleUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">$upload</span>.<span class="property">imgUrl</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Page</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="codepen"><a href="#codepen" class="headerlink" title="codepen"></a>codepen</h1><iframe height="300" style="width: 100%;" scrolling="no" title="" src="https://codepen.io/homuxing/embed/preview/VwbNOjR?default-tab=html%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/homuxing/pen/VwbNOjR">
  </a> by Amurita (<a href="https://codepen.io/homuxing">@homuxing</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础--BOM</title>
    <url>/posts/61bc017a/</url>
    <content><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>浏览器对象模型 Browser Object Model</p>
<h1 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h1><h2 id="视口大小，视口位置"><a href="#视口大小，视口位置" class="headerlink" title="视口大小，视口位置"></a>视口大小，视口位置</h2><p>视口位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 整个窗口的大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerWidth</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerHeight</span>;</span><br><span class="line"><span class="comment">// 视口大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line"><span class="comment">// 视口中页面大小（不包含auto的滚动条）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br></pre></td></tr></table></figure>

<p>滚动视口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(x, y);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">top</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="comment">// behavior属性设置是否平滑滚动</span></span><br><span class="line">  <span class="attr">behavior</span>: <span class="string">&quot;auto&quot;</span>, <span class="comment">// &#x27;smooth&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="alert-confirm-promt"><a href="#alert-confirm-promt" class="headerlink" title="alert confirm promt"></a>alert confirm promt</h2><p>alert() 弹出一个警告框<br>confirm() 弹出一个确认框，用户选择后返回布尔值<br>prompt() 弹出一个表单框，返回用户输入的信息</p>
<h1 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h1><p>location 既是 window 的属性，也是 document 的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> === <span class="variable language_">document</span>.<span class="property">location</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">location.<span class="property">hash</span>;</span><br><span class="line">location.<span class="property">host</span>;</span><br><span class="line">location.<span class="property">hostname</span>;</span><br><span class="line">location.<span class="property">href</span>;</span><br><span class="line">location.<span class="property">pathname</span>;</span><br><span class="line">location.<span class="property">search</span>;</span><br><span class="line">location.<span class="property">port</span>;</span><br><span class="line">location.<span class="property">origin</span>;</span><br><span class="line">location.<span class="property">username</span>;</span><br><span class="line">location.<span class="property">password</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h2><p>URLSearchParams</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ?lang=zh_cn</span></span><br><span class="line"><span class="keyword">let</span> qs = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">search</span>);</span><br><span class="line">qs.<span class="title function_">toString</span>();</span><br><span class="line">qs.<span class="title function_">has</span>(<span class="string">&quot;lang&quot;</span>); <span class="comment">// true</span></span><br><span class="line">qs.<span class="title function_">get</span>(<span class="string">&quot;lang&quot;</span>); <span class="comment">// zh_cn</span></span><br><span class="line">qs.<span class="title function_">set</span>(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">qs.<span class="title function_">delete</span>(<span class="string">&quot;page&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> param <span class="keyword">of</span> qs) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="操作地址"><a href="#操作地址" class="headerlink" title="操作地址"></a>操作地址</h2><p>跳转到新地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;/user/1&quot;</span>;</span><br><span class="line"><span class="comment">// 以下三种结果相同</span></span><br><span class="line">location = url;</span><br><span class="line">location.<span class="title function_">assign</span>(url);</span><br><span class="line">location.<span class="property">href</span> = url;</span><br><span class="line"><span class="comment">// location下面的大多属性都可以直接修改，除location.hash之外，修改其他属性都会导致页面重新加载URL</span></span><br></pre></td></tr></table></figure>

<p>修改 url 且不加入浏览历史记录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">replace</span>(url);</span><br></pre></td></tr></table></figure>

<p>重载页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">reload</span>(); <span class="comment">// 从缓存中加载</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>); <span class="comment">// 从服务器端加载</span></span><br></pre></td></tr></table></figure>

<h1 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h1><p>navigator 对象用来标注浏览器，通常用于确定浏览器的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列举几个常用的</span></span><br><span class="line">appName; <span class="comment">// 浏览器全民</span></span><br><span class="line">appVersion; <span class="comment">// 浏览器版本</span></span><br><span class="line">cookieEnable; <span class="comment">// 是否启用cookie</span></span><br><span class="line">language; <span class="comment">// 浏览器主语言</span></span><br><span class="line"><span class="title function_">vibrate</span>(); <span class="comment">// 触发设备震动</span></span><br><span class="line">userAgent; <span class="comment">// 浏览器的用户代理字符串</span></span><br><span class="line">mediaDevice; <span class="comment">// 可用媒体设备</span></span><br></pre></td></tr></table></figure>

<h1 id="screen-对象"><a href="#screen-对象" class="headerlink" title="screen 对象"></a>screen 对象</h1><p>用以访问当前显示器的信息</p>
<h1 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h1><p>history 对象表示当前窗口首次使用以来用户的单行历史记录<br>出于安全考虑，这个对象不会暴露用户访问过的 url，但是可以通过他在不知道实际 url 的情况下前进和后退</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果URL发生变化，则会在历史记录中生成一条新条目，这包括URL的散列值（因此把location.hash设置为一个新的值，会在历史记录中增加一条记录）。这个行为常被单页应用程序框架用来模拟前进和后退。这样做不会因导航而触发页面刷新</span><br></pre></td></tr></table></figure>

<p>历史状态管理—hashchange 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hashchange事件会在页面url的散列变化时被触发，开发者可以在此时进行某些操作。而状态管理API则可以让开发者改变浏览器URL而不刷新页面</span></span><br><span class="line"><span class="comment">// 可以使用history.pushState()方法</span></span><br><span class="line"><span class="comment">// 这个方法接收三个参数，state对象，一个新状态的标题，一个相对url（可选）</span></span><br><span class="line"><span class="comment">// 第二个参数当前并未实现使用，所以可以传一个空字符或者短标题</span></span><br><span class="line"><span class="keyword">let</span> stateObject = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line">history.<span class="title function_">pushState</span>(stateObject, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;baz.html&quot;</span>);</span><br><span class="line"><span class="comment">// pushState()之后，状态信息就会被推倒历史记录中，浏览器地址栏也会改变，以反映新的相对url</span></span><br><span class="line"><span class="comment">// 除了这些变化，location.href返回的时地址栏的内容，浏览器页不会向服务器发送请求</span></span><br><span class="line"><span class="comment">// 第一个参数应该包含正确初始化页面所需要的信息，为了防止滥用对象大小被控制在500kb到1mb以内</span></span><br></pre></td></tr></table></figure>

<p>因为 pushState()会创建新的历史记录，所以也会相应的启用后退按钮，此时单机后退按钮就会触发 window 对象上的 popstate 事件<br>popstate 事件的事件对象有个 state 属性，其中包含了通过 pushState()第一个参数传递的 state 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;popstate&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state = event.<span class="property">state</span>;</span><br><span class="line">  <span class="keyword">if</span> (state) &#123;</span><br><span class="line">    <span class="comment">// 第一个页面加载时是null</span></span><br><span class="line">    <span class="title function_">processState</span>(state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 基于这个状态，应该把页面重置为状态对象所表示的状态</span></span><br></pre></td></tr></table></figure>

<p>可以通过 history.state 来获取当前对象的状态，也可以使用 replaceState()并传入 pushState()相同的前两个参数来更新状态，更新状态不会创建新的历史记录，只会覆盖当前状态：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">replaceState</span>(&#123; <span class="attr">newFoo</span>: <span class="string">&quot;newBar&quot;</span> &#125;, <span class="string">&quot;new title&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>传给 pushState 和 replaceState()的 state 对象应该只包含可以被序列化的信息，DOM 元素之类并不适合放到状态对象里保存<br><em>HTML5 状态管理时，要确保通过 pushState()创建的每个‘假’URL 背后都对应服务器上的一个真实物理 URL。否则点击刷新将会导致 404 问题。所有 SPA 框架都必须通过服务器或客户端的某些配置解决这个问题</em></p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript继承</title>
    <url>/posts/98b90f19/</url>
    <content><![CDATA[<h1 id="ES5-继承、ES6-class-继承"><a href="#ES5-继承、ES6-class-继承" class="headerlink" title="ES5 继承、ES6 class 继承"></a>ES5 继承、ES6 class 继承</h1><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>(); <span class="comment">// 原型链继承</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li>实例无法向父类构造函数传参</li>
<li>继承单一</li>
<li>所有新实例都会共享父类实例的属性（原型上的属性共享，一个是你修改了原型属性，另一个实例的原型属性也会被修改</li>
</ol>
<hr>
<h2 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Con</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 利用call apply在函数内部将父类构造函数引入子类函数</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> con1 = <span class="keyword">new</span> <span class="title class_">Con</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(con1.<span class="property">name</span>); <span class="comment">// name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(con1.<span class="property">age</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(con1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>可以传参</li>
<li>可以继承多个构造函数属性</li>
</ol>
<p>缺点：</p>
<ol>
<li>只能继承父类构造函数的属性</li>
<li>无法实现构造函数的复用</li>
<li>每个新实例都有父类构造函数的副本</li>
</ol>
<hr>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>结合了原型链和盗用构造函数的方法，将两者的优点集中了起来<br>基本思路是使用原型链继承原型上的属性和方法，使用盗用构造函数继承实例属性<br>这样既可以把方法定义在原型上以实现重用，又可以让每个实例有自己的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 继承属性</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 第一次调用SuperType</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperTuper</span>(<span class="string">&quot;Nich&quot;</span>, <span class="number">29</span>); <span class="comment">// 第二次调用SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>); <span class="comment">// &quot;red, blue, green, black&quot;</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>(); <span class="comment">// &#x27;Nich&#x27;</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>(); <span class="comment">// 29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>); <span class="comment">// &quot;red, blue, green&quot;</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>(); <span class="comment">// &#x27;Greg&#x27;</span></span><br><span class="line">instance2.<span class="title function_">sayAge</span>(); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<p>组合继承弥补了原型链和盗用构造函数的不足，是 JS 中使用最多的集成模式<br>组合继承也保留了 instanceof 操作符和 isPrototypeOf()的识别合成对象的能力<br><strong>组合继承的效率问题：父类构造函数始终会被调用两次，一次是在创建子类原型时调用，另一次时在子类构造函数中调用。本质上，子类原型最终是要包含超类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就可以了</strong></p>
<hr>
<h2 id="原型式继承与-Object-create"><a href="#原型式继承与-Object-create" class="headerlink" title="原型式继承与 Object.create()"></a>原型式继承与 Object.create()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当Object.create()只传一个参数时，与以下效果相同</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Nich&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;Van&quot;</span>, <span class="string">&quot;Court&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line"><span class="comment">// 等同于let anotherPerson = Object.create(person)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">name</span>); <span class="comment">// Nich (通过原型链向上查找)</span></span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Rob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yetAnotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Barbie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>); <span class="comment">// Court, Van, Rob, Barbie</span></span><br></pre></td></tr></table></figure>

<p>Object.create()的第二个参数与 Object.defineProperties 第二个参数一样： 每个新增属性都通过各自的描述符来描述，以这种方式添加的属性会遮蔽原型上的同名属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Nich&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;Van&quot;</span>, <span class="string">&quot;Court&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Greg&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">name</span>); <span class="comment">// &#x27;Greg&#x27;</span></span><br></pre></td></tr></table></figure>

<p>原型式继承非常适合不需要单独创建构造函数，担任需要在对象间共享信息的场合，但是属性中包含的引用值始终会在相关对象间共享，和使用原型模式式一样的</p>
<hr>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>寄生式继承背后的思路类似于寄生构造函数和工厂模式：<br>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">此函数接收一个参数，就是新对象的基准对象</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title function_">object</span>(original)</span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Nick&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Van&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title function_">createAnother</span>(person)</span><br><span class="line">anotherPerson.<span class="title function_">sayHi</span>() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure>

<p><em>通过寄生式继承给对象添加函数会导致函数难以重用， 与构造函数模式类似</em></p>
<hr>
<h2 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title function_">object</span>(superType.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  prototype.<span class="property">constructor</span> = subType;</span><br><span class="line">  subType.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>);</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>寄生式组合继承避免了多次调用 SuperType 构造函数，避免了 SubType.prototype 上不必要也用不到的属性，因此效率更高。而且原型键保持不变，instanceof 和 isPrototypeOf()依然有效<br>寄生式组合继承可以算是引用类型继承的最佳模式</p>
<hr>
<h2 id="ES6-class-继承"><a href="#ES6-class-继承" class="headerlink" title="ES6 class 继承"></a>ES6 class 继承</h2><h3 id="基本用法：class-之间通过使用-extends-关键字完成继承，这比通过修改原型链实现继承方便得多"><a href="#基本用法：class-之间通过使用-extends-关键字完成继承，这比通过修改原型链实现继承方便得多" class="headerlink" title="基本用法：class 之间通过使用 extends 关键字完成继承，这比通过修改原型链实现继承方便得多"></a>基本用法：class 之间通过使用 extends 关键字完成继承，这比通过修改原型链实现继承方便得多</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bus</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Bus</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Vehicle</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 继承普通的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engineer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">Engineer</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e <span class="keyword">instanceof</span> <span class="title class_">Engineer</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="在类构造函数中使用-super-可以调用父类的构造函数"><a href="#在类构造函数中使用-super-可以调用父类的构造函数" class="headerlink" title="在类构造函数中使用 super 可以调用父类的构造函数"></a>在类构造函数中使用 super 可以调用父类的构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hasEngune</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    不要在<span class="variable language_">super</span>之前引用<span class="variable language_">this</span>，否则会抛出<span class="title class_">ReferenceError</span></span><br><span class="line">    <span class="variable language_">super</span>() <span class="comment">// 相当于super.constructor</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vehicle</span>)  <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vehicle&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">identify</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Bus</span>.<span class="title function_">identify</span>()  <span class="comment">// vehicle</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-super-的时候需要注意的问题"><a href="#使用-super-的时候需要注意的问题" class="headerlink" title="使用 super 的时候需要注意的问题"></a>使用 super 的时候需要注意的问题</h3><ul>
<li>不能 super 只能在派生类构造函数和静态方法中使用</li>
<li>不能单独引用 super 关键字，要么用它调用构造函数，要么用它引用静态方法</li>
<li>super 会调用父类构造函数，并将返回的实例赋值给 this</li>
<li>super()的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">licensePlate</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">licensePlate</span> = licensePlate;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">lP</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(lP);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>(<span class="string">&quot;XF18&quot;</span>)); <span class="comment">// Bus &#123;licensePlate: &quot;XF018&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有定义类构造函数，在实例化派生类的时候会调用 super，并且会传入所有传给派生类的参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">lp</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lp</span> = lp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>(<span class="string">&quot;XF18&quot;</span>)); <span class="comment">// Bus &#123;lp: &quot;XF18&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在类构造函数中，不能在 super()之前引用 this</li>
<li>如果在派生类中显式地定义了构造函数，则要么必须在其中调用 super，要么必须在其中返回一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Van</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Car</span>()); <span class="comment">// Car &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>()); <span class="comment">// Bus &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Van</span>()); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><p>有时候可能需要这样的一种类： 它可以供其它类继承，但是当时本事不能被实例化<br>虽然专门支持这种类的语法，但是可以通过 new.target 关键字进行判断实现<br>new.target 保存通过 new 关键字调用的类，在实例化时检测 new.target 是不是抽象基类，可以阻止对抽象基类的实例化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">Vehicle</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Vehicle cannot be directly instantiated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">// Bus&#123;&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vehicle</span>(); <span class="comment">// Vehicle</span></span><br><span class="line"><span class="comment">// Error: Vehicle cannot be directly instantiated</span></span><br></pre></td></tr></table></figure>

<p>通过在抽象基类构造函数中进行检查，可以要求派生类必须定义某个方法，因为原型方法在调用类构造函数之前就已经存在了，所以可以通过 this 关键字来查询相应方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">Vehicle</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Vehicle cannot be directly instantiated&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">foo</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Inheriting class must define foo()&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Van</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">// Bus &#123;&#125; success</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Van</span>(); <span class="comment">// Error: Inheriting class must define foo()</span></span><br></pre></td></tr></table></figure>

<h3 id="继承内置类型"><a href="#继承内置类型" class="headerlink" title="继承内置类型"></a>继承内置类型</h3><p>ES6 类为继承内置应用类型提供了顺畅的机制，可以方便的扩展内置类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">shuffle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (i + <span class="number">1</span>));</span><br><span class="line">      [<span class="variable language_">this</span>[i], <span class="variable language_">this</span>[j]] = [<span class="variable language_">this</span>[j], <span class="variable language_">this</span>[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">SuperArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">SuperArray</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// SuperArray(5) [1, 2, 3, 4, 5]</span></span><br><span class="line">a.<span class="title function_">shuffle</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// SuperArray(5) [3, 5, 4, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p>有些内置类型的方法会返回新的实例，默认情况下返回的实例类型与原始实例的类型是一致的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="title class_">SuperArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !!(x % <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// SuperArray(5) [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// SuperArray(3) [1, 3, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 <span class="keyword">instanceof</span> <span class="title class_">SuperArray</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2 <span class="keyword">instanceof</span> <span class="title class_">SuperArray</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果要覆盖这个默认行为，可以覆盖 Symbol.species 访问器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="title class_">SuperArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !!(x % <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// SuperArray(5) [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// SuperArray(3) [1, 3, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 <span class="keyword">instanceof</span> <span class="title class_">SuperArray</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2 <span class="keyword">instanceof</span> <span class="title class_">SuperArray</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h3><p>把不同类的行为集中到一个类，ES6 虽然没有显式的对类混入支持，但是现有的特性可以模仿这种行为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.assign()是为了混入对象行为而设计的</span><br><span class="line">只有在需要混入类的行为时才有必要自己实现混入表达式</span><br><span class="line">如果混入的只是对象的属性，那么使用Object.assign()即可</span><br></pre></td></tr></table></figure>

<p>如果 Person 类需要组合 A B C，则需要某种机制实现 B 继承 A，C 继承 B，然后 Person 继承 C</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可嵌套的连续继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">FooMixin</span> = (<span class="params">SuperClass</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">BarMixin</span> = (<span class="params">SuperClass</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">BazMixin</span> = (<span class="params">SuperClass</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 连续继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FooMixin</span>(<span class="title class_">BarMixin</span>(<span class="title class_">BazMixin</span>(<span class="title class_">Vehicle</span>))) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bus</span>();</span><br><span class="line">b.<span class="title function_">foo</span>(); <span class="comment">// foo</span></span><br><span class="line">b.<span class="title function_">bar</span>(); <span class="comment">// bar</span></span><br><span class="line">b.<span class="title function_">baz</span>(); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure>

<p>以上连续继承可以通过一个辅助函数，把嵌套展开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mix</span>(<span class="params">BaseClass, ...Mixins</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mixins</span>.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">accumulator, current</span>) =&gt;</span> <span class="title function_">current</span>(accumulator),</span><br><span class="line">    <span class="title class_">BaseClass</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mix</span>(<span class="title class_">Vehicle</span>, <span class="title class_">FooMixin</span>, <span class="title class_">BarMixin</span>, <span class="title class_">BazMixin</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bus</span>();</span><br><span class="line">b.<span class="title function_">foo</span>(); <span class="comment">// foo</span></span><br><span class="line">b.<span class="title function_">bar</span>(); <span class="comment">// bar</span></span><br><span class="line">b.<span class="title function_">baz</span>(); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript防抖与节流</title>
    <url>/posts/f6f5f4be/</url>
    <content><![CDATA[<h1 id="用一张图片来解释"><a href="#用一张图片来解释" class="headerlink" title="用一张图片来解释"></a>用一张图片来解释</h1><p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/debounce.webp"></p>
<h1 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h1><p>在第一次触发函数时，不立刻触发函数，而是给一个时间，如果在这个时间内多次触发函数，只执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="comment">// 需要在return外部声明timer</span></span><br><span class="line">  <span class="comment">// 多次触发debounce的时候，return的函数共享一个timer变量</span></span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保存this</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 保存传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 改变this指向，并传入参数</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>防止重复发送请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">debounceXhr</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ajaxXhr</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sendData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ajaxXhr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ajaxXhr</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;data&quot;</span>,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">message</span> == <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">ajaxXhr</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h1><p>在限定时间内只执行一次函数</p>
<p>使用 setTimeout 实现节流</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用时间戳实现节流</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt; delay) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>元素进入视口淡入的效果</title>
    <url>/posts/cd25ad6c/</url>
    <content><![CDATA[<h2 id="监听元素进入视口的函数"><a href="#监听元素进入视口的函数" class="headerlink" title="监听元素进入视口的函数"></a>监听元素进入视口的函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。</a><br><img src="https://mdn.mozillademos.org/files/15087/rect.png" alt="getBoundingClientRect"><br>通过这个方法可以判断元素是否在视口中，如果元素在视口中的话就执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查元素是否在视口内</span></span><br><span class="line"><span class="title function_">isElementVisible</span>(<span class="params">el, animationFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">const</span> vWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="keyword">const</span> vHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(rect.<span class="property">right</span> &lt; <span class="number">0</span> || rect.<span class="property">bottom</span> &lt; <span class="number">0</span> || rect.<span class="property">left</span> &gt; vWidth || rect.<span class="property">top</span> &gt; vHeight) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">animationFn</span>(el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于<code>(rect.right &lt; 0 || rect.bottom &lt; 0 || rect.left &gt; vWidth || rect.top &gt; vHeight)</code>判断的解释<br><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/getBoundingClientRect.jpg"></p>
<h2 id="css-transition"><a href="#css-transition" class="headerlink" title="css transition"></a>css transition</h2><p>html 结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;brief-text slide-tran slide-bottom&quot;</span>&gt;</span></span><br><span class="line">  牛津大学成立的确切日期尚不清楚，但该校的历史至少可以追溯到1096年。牛津大学位于伦敦西北约60英里处，该校大约45%的学生是研究生。一半以上的研究生把研究作为他们学习的一部分。牛津大学的研究在其所有四个学术部门进行：人文学科；数学、物理和生命科学；医学科学和社会科学。牛津大学的校历分为三个学期——米迦勒节(秋季)、希拉里节(春季)和三一节(夏季)——每个学期八周。大学的教学语言是英语。牛津大学包括一所中央大学，38所学院，还有六个永久性私人礼堂，它们的规模通常比大学还小，开设的科目更少。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css 类名</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 先写一个类名，标记这个元素需要过渡动画 */</span></span><br><span class="line"><span class="selector-class">.slide-tran</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 从下方淡入的元素的初始状态 */</span></span><br><span class="line"><span class="selector-class">.slide-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slide-top-in</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 从左侧淡入的元素的初始状态 */</span></span><br><span class="line"><span class="selector-class">.slide-left</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slide-right-in</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="页面滚动到元素的位置时，修改元素-class"><a href="#页面滚动到元素的位置时，修改元素-class" class="headerlink" title="页面滚动到元素的位置时，修改元素 class"></a>页面滚动到元素的位置时，修改元素 class</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">slideFromBottom</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;slide-top-in&#x27;</span>)) <span class="keyword">return</span></span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;slide-bottom&#x27;</span>)</span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;slide-top-in&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">slideFromLeft</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;slide-right-in&#x27;</span>)) <span class="keyword">return</span></span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;slide-left&#x27;</span>)</span><br><span class="line">  el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;slide-right-in&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整的-JavaScript-代码"><a href="#完整的-JavaScript-代码" class="headerlink" title="完整的 JavaScript 代码"></a>完整的 JavaScript 代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">PageSlideIn</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">initPage</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bindDocScroll</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页面加载后，视口内元素浮现</span></span><br><span class="line">    <span class="title function_">initPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">var</span> slideElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.slide-tran&quot;</span>);</span><br><span class="line">      slideElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;slide-bottom&quot;</span>)) &#123;</span><br><span class="line">          that.<span class="title function_">isElementVisible</span>(el, that.<span class="property">slideFromBottom</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;slide-left&quot;</span>)) &#123;</span><br><span class="line">          that.<span class="title function_">isElementVisible</span>(el, that.<span class="property">slideFromLeft</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页面滚动事件</span></span><br><span class="line">    <span class="title function_">bindDocScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        that.<span class="title function_">isElementVisible</span>(</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.brief-text&quot;</span>),</span><br><span class="line">          that.<span class="property">slideFromBottom</span></span><br><span class="line">        );</span><br><span class="line">        that.<span class="title function_">isElementVisible</span>(</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.brief-imgbox&quot;</span>),</span><br><span class="line">          that.<span class="property">slideFromLeft</span></span><br><span class="line">        );</span><br><span class="line">        that.<span class="title function_">isElementVisible</span>(</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.advabox&quot;</span>),</span><br><span class="line">          that.<span class="property">slideFromBottom</span></span><br><span class="line">        );</span><br><span class="line">        that.<span class="title function_">isElementVisible</span>(</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.prodbox&quot;</span>),</span><br><span class="line">          that.<span class="property">slideFromLeft</span></span><br><span class="line">        );</span><br><span class="line">        that.<span class="title function_">isElementVisible</span>(</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.table&quot;</span>),</span><br><span class="line">          that.<span class="property">slideFromBottom</span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查元素是否在视口内</span></span><br><span class="line">    <span class="title function_">isElementVisible</span>(<span class="params">el, animationFn</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">      <span class="keyword">const</span> vWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">      <span class="keyword">const</span> vHeight =</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        rect.<span class="property">right</span> &lt; <span class="number">0</span> ||</span><br><span class="line">        rect.<span class="property">bottom</span> &lt; <span class="number">0</span> ||</span><br><span class="line">        rect.<span class="property">left</span> &gt; vWidth ||</span><br><span class="line">        rect.<span class="property">top</span> &gt; vHeight</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">animationFn</span>(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// slideFromBottom动画</span></span><br><span class="line">    <span class="title function_">slideFromBottom</span>(<span class="params">el</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;slide-top-in&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;slide-bottom&quot;</span>);</span><br><span class="line">      el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;slide-top-in&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">slideFromLeft</span>(<span class="params">el</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;slide-right-in&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">      el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;slide-left&quot;</span>);</span><br><span class="line">      el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;slide-right-in&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">PageSlideIn</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Codepen"><a href="#Codepen" class="headerlink" title="Codepen"></a>Codepen</h2><iframe height="1000" style="width: 100%;" scrolling="no" title="" src="https://codepen.io/homuxing/embed/preview/yLXgoaK?default-tab=html%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/homuxing/pen/yLXgoaK">
  </a> by Amurita (<a href="https://codepen.io/homuxing">@homuxing</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>图片懒加载的实现</title>
    <url>/posts/b34ccdc2/</url>
    <content><![CDATA[<h1 id="一个简单的图片懒加载"><a href="#一个简单的图片懒加载" class="headerlink" title="一个简单的图片懒加载"></a>一个简单的图片懒加载</h1><blockquote>
<p>主要用来讲 lazyload 的大概原理<br>生产环境建议使用插件，或者基于这个思路再优化加工<br><a href="https://github.com/tuupola/lazyload">jQuery-lazyload</a><br><a href="https://github.com/hilongjw/vue-lazyload">vue-lazyload</a><br><a href="https://github.com/twobin/react-lazyload">react-lazyload</a><br>另外，许多 UI 框架都自带有 lazyload 插件，如<a href="https://www.layui.com/doc/modules/flow.html">layui-flow</a>和<a href="https://element-plus.gitee.io/#/zh-CN/component/image">Element</a>等，往往不需要重复引用</p>
</blockquote>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取滚动高度</span></span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line">  <span class="comment">// 获取视口高度</span></span><br><span class="line">  <span class="keyword">var</span> viewPortSize = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 滚动高度 + 视口高度 - 图片距页面顶部的距离</span></span><br><span class="line">    <span class="comment">// 计算出图片是否进入视口</span></span><br><span class="line">    <span class="keyword">var</span> x = scrollTop + viewPortSize - imgs[i].<span class="property">offsetTop</span></span><br><span class="line">    <span class="comment">// 图片进入视口</span></span><br><span class="line">    <span class="comment">// 将data-src 赋值给 img的src属性即可</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      imgs[i].<span class="property">src</span> = imgs[i].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置定时器，或监听滚动事件</span></span><br><span class="line">  <span class="built_in">setInterval</span>(lazyload, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实现页面水印效果</title>
    <url>/posts/71a00ca2/</url>
    <content><![CDATA[<p>工作项目里实现过的需求，学习了相关代码总结出这篇文章</p>
<h1 id="实现水印的思路"><a href="#实现水印的思路" class="headerlink" title="实现水印的思路"></a>实现水印的思路</h1><p>从页面层次上来看，水印可以理解为覆盖在最高层的一层透明背景，虽然覆盖在最高层，但是不应该影响底层任何事件的触发</p>
<p>可以通过 canvas 绘制字符串的图片，然后转化为图片作为背景循环平铺到一个 div 里</p>
<p>这个 div 就是水印图</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="绘制水印图片"><a href="#绘制水印图片" class="headerlink" title="绘制水印图片"></a>绘制水印图片</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setWatermark</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="title class_">HTMLDivElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="string">&quot;1.1351.1561.215515&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> lastEle = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lastEle !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(lastEle);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clientWidth = body?.<span class="property">clientWidth</span> ?? <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> clientHeight = body?.<span class="property">clientHeight</span> ?? <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!ctx) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取被测量字符串的宽度</span></span><br><span class="line">  <span class="keyword">const</span> strWidth = ctx.<span class="title function_">measureText</span>(str).<span class="property">width</span>;</span><br><span class="line">  <span class="comment">// 通过文字倾斜程度，算出canvas应有的宽高</span></span><br><span class="line">  <span class="keyword">const</span> canvasW = strWidth * <span class="title class_">Math</span>.<span class="title function_">cos</span>((<span class="number">30</span> / <span class="number">180</span>) * <span class="title class_">Math</span>.<span class="property">PI</span>) + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">const</span> canvasH = strWidth * <span class="title class_">Math</span>.<span class="title function_">sin</span>((<span class="number">30</span> / <span class="number">180</span>) * <span class="title class_">Math</span>.<span class="property">PI</span>) + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;canvasW&#125;</span>px`</span>;</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;canvasH&#125;</span>px`</span>;</span><br><span class="line"></span><br><span class="line">  canvas.<span class="property">width</span> = canvasW;</span><br><span class="line">  canvas.<span class="property">height</span> = canvasH;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制文字</span></span><br><span class="line">  ctx.<span class="title function_">rotate</span>((-<span class="number">30</span> * <span class="title class_">Math</span>.<span class="property">PI</span>) / <span class="number">180</span>);</span><br><span class="line">  ctx.<span class="property">font</span> = <span class="string">&quot;14px PingFang SC&quot;</span>;</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 0, 0.05)&quot;</span>;</span><br><span class="line">  ctx.<span class="property">textAlign</span> = <span class="string">&quot;left&quot;</span>;</span><br><span class="line">  ctx.<span class="property">textBaseline</span> = <span class="string">&quot;bottom&quot;</span>;</span><br><span class="line">  ctx.<span class="title function_">fillText</span>(str, <span class="number">0</span>, canvas.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  ele.<span class="property">id</span> = id;</span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">pointerEvents</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">&quot;100000&quot;</span>;</span><br><span class="line">  <span class="comment">// 覆盖body</span></span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;clientWidth&#125;</span>px`</span>;</span><br><span class="line">  ele.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;clientHeight&#125;</span>px`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// canvas 转 data:url</span></span><br><span class="line">  canvas.<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob || <span class="keyword">new</span> <span class="title class_">Blob</span>());</span><br><span class="line">    newImg.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">    &#125;;</span><br><span class="line">    ele.<span class="property">style</span>.<span class="property">background</span> = <span class="string">`url(<span class="subst">$&#123;url&#125;</span>) left top repeat`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watermark</span> &#123;</span><br><span class="line">  <span class="comment">// 设置水印</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">set</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ele = <span class="title function_">setWatermark</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !ele ||</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(ele.<span class="property">id</span>) === <span class="literal">null</span> ||</span><br><span class="line">        !ele.<span class="property">style</span>.<span class="property">background</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        ele = <span class="title function_">setWatermark</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setWatermark</span>(str);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">outWatermark</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (div !== <span class="literal">null</span> &amp;&amp; div) div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 隐藏水印</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">out</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="string">&quot;1.1351.1561.215515&quot;</span>;</span><br><span class="line">    <span class="title class_">Watermark</span>.<span class="title function_">outWatermark</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="设置水印"><a href="#设置水印" class="headerlink" title="设置水印"></a>设置水印</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Watermark</span>.<span class="title function_">set</span>(<span class="string">`吼姆小行星`</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://homu-asteroid.oss-cn-hangzhou.aliyuncs.com/imgs/QQ_1722697734634.png"></p>
<p>隐藏水印：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Watermark</span>.<span class="title function_">out</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>封装使用Axios</title>
    <url>/posts/c765d66f/</url>
    <content><![CDATA[<h1 id="封装-Axios"><a href="#封装-Axios" class="headerlink" title="封装 Axios"></a>封装 Axios</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;url&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;...&#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 设置baseUrl node环境下的地址</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&quot;X-Requested-With&quot;</span>: <span class="string">&quot;XMLHttpRequest&quot;</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 全局请求拦截，所有的网络请求发起之前都会走这这里</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果需要加token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="string">&quot;token&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&quot;X-CSRF-TOKEN&quot;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 全局错误处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    <span class="comment">// res即是后端返回数据</span></span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">info</span> !== <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (res.<span class="property">err_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-1&quot;</span> <span class="comment">/*处理错误码*/</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>: <span class="comment">/*默认处理*/</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 成功的处理</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!axios.<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">      <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="keyword">switch</span> (error.<span class="property">response</span> &amp;&amp; error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span> <span class="comment">/*处理401错误*/</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestGET</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  parmas</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>首先创建自定义 axios 实例，配置所有请求共有的配置项</li>
<li>设置拦截器，处理所有请求共有的错误</li>
</ol>
<h2 id="文档链接"><a href="#文档链接" class="headerlink" title="文档链接"></a>文档链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.axios-js.com/</span><br><span class="line">node_modules/axios/readme</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式的表单校验</title>
    <url>/posts/311eacd8/</url>
    <content><![CDATA[<h1 id="策略模式在表单验证中的应用"><a href="#策略模式在表单验证中的应用" class="headerlink" title="策略模式在表单验证中的应用"></a>策略模式在表单验证中的应用</h1><p>最近想要封装一个校验表单的方法，没有什么很优雅的解决思路。<br>今天偶然看到了这篇文章，学到了一种新的设计模式….<br>实现也很容易理解。<br>原文链接： <a href="http://hcysun.me/2016/02/21/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9C%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/">http://hcysun.me/2016/02/21/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9C%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</a><br>作者： HcySunYang</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FormValidation</span>(<span class="params">VerifiPolicy</span>) &#123;</span><br><span class="line">  <span class="comment">// 保存策略对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">strategies</span> = <span class="title class_">VerifiPolicy</span>;</span><br><span class="line">  <span class="comment">// 验证缓存</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">validationFns</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">FormValidation</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">dom, rule, errMsg</span>) &#123;</span><br><span class="line">  <span class="comment">// 因为传入的是一个字符串，如&#x27;maxLength: 16&#x27;，所以将其拆成数组方便操作</span></span><br><span class="line">  <span class="keyword">var</span> ary = rule.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">  <span class="comment">// 策略函数的参数</span></span><br><span class="line">  <span class="keyword">var</span> arg = [];</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">validationFns</span>.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 重置参数</span></span><br><span class="line">    arg = [];</span><br><span class="line">    <span class="keyword">var</span> ruleName = ary[<span class="number">0</span>];</span><br><span class="line">    arg.<span class="title function_">push</span>(dom.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 组装参数</span></span><br><span class="line">    <span class="keyword">if</span> (ary[<span class="number">1</span>]) &#123;</span><br><span class="line">      arg.<span class="title function_">push</span>(ary[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    arg.<span class="title function_">push</span>(errMsg);</span><br><span class="line">    arg.<span class="title function_">push</span>(dom);</span><br><span class="line">    <span class="comment">// 调用策略函数</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="property">strategies</span>[ruleName].<span class="title function_">apply</span>(dom, arg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 一键校验的方法</span></span><br><span class="line"><span class="title class_">FormValidation</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">start</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> msgs = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">validationFns</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = <span class="variable language_">this</span>.<span class="property">validationFns</span>[i]();</span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">      msgs.<span class="title function_">push</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (msgs.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> msgs;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>USERNAME<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 策略对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">VerifiPolicy</span> = &#123;</span><br><span class="line">  <span class="comment">// 判断是否为空</span></span><br><span class="line">  <span class="attr">isNoEmpty</span>: <span class="keyword">function</span> (<span class="params">value, errorMsg, el</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; errorMsg, el &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 判断最小长度</span></span><br><span class="line">  <span class="attr">minLength</span>: <span class="keyword">function</span> (<span class="params">value, length, errorMsg, el</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.<span class="property">length</span> &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; errorMsg, el &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">maxLength</span>: <span class="keyword">function</span> (<span class="params">value, length, errorMsg, el</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.<span class="property">length</span> &gt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; errorMsg, el &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 判断是否为手机号</span></span><br><span class="line">  <span class="attr">isMobile</span>: <span class="keyword">function</span> (<span class="params">value, errorMsg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; errorMsg, el &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validation = <span class="keyword">new</span> <span class="title class_">FormValidation</span>(<span class="title class_">VerifiPolicy</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.wrapper&quot;</span>);</span><br><span class="line">validation.<span class="title function_">add</span>(form.<span class="property">username</span>, <span class="string">&quot;isNoEmpty&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">validation.<span class="title function_">add</span>(form.<span class="property">password</span>, <span class="string">&quot;minLength: 6&quot;</span>, <span class="string">&quot;密码太短&quot;</span>);</span><br><span class="line">validation.<span class="title function_">add</span>(form.<span class="property">password</span>, <span class="string">&quot;maxLength: 4&quot;</span>, <span class="string">&quot;密码太长&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.button&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> errmsg = validation.<span class="title function_">start</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(errmsg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* (3) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">0: &#123;errorMsg: &quot;用户名错误&quot;, el: input&#125;</span></span><br><span class="line"><span class="comment">1: &#123;errorMsg: &quot;密码太短&quot;, el: input&#125;</span></span><br><span class="line"><span class="comment">2: &#123;errorMsg: &quot;密码太长&quot;, el: input&#125;</span></span><br><span class="line"><span class="comment">length: 3</span></span><br><span class="line"><span class="comment">__proto__: Array(0) */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>给伪元素添加点击事件</title>
    <url>/posts/ec4ed211/</url>
    <content><![CDATA[<h2 id="给伪元素添加点击事件的方法"><a href="#给伪元素添加点击事件的方法" class="headerlink" title="给伪元素添加点击事件的方法"></a>给伪元素添加点击事件的方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">伪元素应该是没办法直接添加点击事件的...但是可以利用css的pointer-events属性去控制父元素不响应鼠标事件</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: palegreen;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">/* 关闭父元素的点击事件 */</span></span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app</span> * &#123;</span><br><span class="line">  <span class="comment">/* 父元素下的元素重新开启点击事件 */</span></span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background</span>: paleturquoise;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.app&quot;</span>);</span><br><span class="line"><span class="comment">// 获取伪元素的方法</span></span><br><span class="line"><span class="keyword">var</span> appPseudo = <span class="title function_">getComputedStyle</span>(app, <span class="string">&quot;:after&quot;</span>);</span><br><span class="line">app.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click&quot;</span>, e.<span class="property">target</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>网页中的复制粘贴 Clipboard API</title>
    <url>/posts/363812db/</url>
    <content><![CDATA[<h2 id="遇到的需求"><a href="#遇到的需求" class="headerlink" title="遇到的需求"></a>遇到的需求</h2><p>一段数据，一个按钮<br>点击按钮复制数据并给出 toast 提示<br>实现的关键在于复制功能</p>
<h2 id="通过execCommend-39-copy-39-实现"><a href="#通过execCommend-39-copy-39-实现" class="headerlink" title="通过execCommend(&#39;copy&#39;)实现"></a>通过<code>execCommend(&#39;copy&#39;)</code>实现</h2><p>直接搜索出来的方法 具体实现大概是下面这个样子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 样式我就懒得放了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-box&quot;</span>&gt;</span>复制这段文字吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>复制上面的文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;粘贴到这儿试试&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.copy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> textBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.text-box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text = textBox.<span class="property">innerText</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法 1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      input.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>, text);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);</span></span><br><span class="line"><span class="language-javascript">      input.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建一个 input 标签，修改其内容（value）,select 方法选中<br>然后执行<code>document.execCommand(&#39;copy&#39;)</code>复制<br>这个方法有个问题：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand">MDN–document.execCommand</a><br>这个 API 废弃了 不过还能用…<br>写代码还是规范点比较好，MDN 说废弃了那就是最好别用<br>而且这么一堆 DOM 操作总感觉心里发毛<br>既然 MDN 把这个方法废弃了 那肯定有别的方法</p>
<h2 id="navigation-clipboard-writeText-实现"><a href="#navigation-clipboard-writeText-实现" class="headerlink" title="navigation.clipboard.writeText()实现"></a><code>navigation.clipboard.writeText()</code>实现</h2><p>复制粘贴离不开剪切板这个东西<br>于是找到了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard">clipboard</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-box&quot;</span>&gt;</span>复制这段文字吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>复制上面的文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;粘贴到这儿试试&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.copy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> textBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.text-box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text = textBox.<span class="property">innerText</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法 2</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> copyPromise = navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text);</span></span><br><span class="line"><span class="language-javascript">      copyPromise</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制大成功&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制大失败&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不管是看起来还是用起来都舒服多了<br>至于 toast 提示的操作 放进.then 里就可以了，复制失败就 catch 一下</p>
<h2 id="Codepen"><a href="#Codepen" class="headerlink" title="Codepen"></a>Codepen</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/amurita/embed/preview/oNeXWOM?default-tab=js%2Cresult&editable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/amurita/pen/oNeXWOM">
  Untitled</a> by Amurita (<a href="https://codepen.io/amurita">@amurita</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解JavaScript中的new</title>
    <url>/posts/e9d688c/</url>
    <content><![CDATA[<h1 id="new-和直接执行函数的区别，new-如何实现"><a href="#new-和直接执行函数的区别，new-如何实现" class="headerlink" title="new 和直接执行函数的区别，new 如何实现"></a>new 和直接执行函数的区别，new 如何实现</h1><h2 id="this-指向不同"><a href="#this-指向不同" class="headerlink" title="this 指向不同"></a>this 指向不同</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建一个<span class="title class_">Test</span>构造函数，打印<span class="variable language_">this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>() <span class="comment">// Test &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="title class_">Test</span>()  <span class="comment">// Window &#123; ... &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="对-return-的处理"><a href="#对-return-的处理" class="headerlink" title="对 return 的处理"></a>对 return 的处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果一个构造函数return了一个引用类型的数据，那么使用new创建它的实例时，将会返回return的内容，当返回的值是基本类型时，将会正常创建实例</span><br></pre></td></tr></table></figure>

<h2 id="new-操作符都做了什么"><a href="#new-操作符都做了什么" class="headerlink" title="new 操作符都做了什么"></a>new 操作符都做了什么</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br></pre></td></tr></table></figure>

<ol>
<li>创建一个空对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置原型链（调用一个构造函数创建一个新实例后，该实例的内部将包含一个指针，只想构造函数的原型对象）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">__proto__</span> = <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>让 Fn 中的 this 指向 obj，并执行 Fn 的函数体（创建新对象之后，将构造函数的作用域赋值给新对象）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title class_">Fn</span>.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>确保 Fn 的函数体返回的是对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> result == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">  fn = result;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fn = obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3不兼容v2的用法</title>
    <url>/posts/62c0def1/</url>
    <content><![CDATA[<h1 id="vue3-中一些不兼容的小改变"><a href="#vue3-中一些不兼容的小改变" class="headerlink" title="vue3 中一些不兼容的小改变"></a>vue3 中一些不兼容的小改变</h1><h2 id="生命周期选项名称的变化"><a href="#生命周期选项名称的变化" class="headerlink" title="生命周期选项名称的变化"></a>生命周期选项名称的变化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">destroyed被重命名为unmounted</span><br><span class="line">beforeDestroy被重命名为beforeUnmount</span><br></pre></td></tr></table></figure>

<h2 id="在-prop-的默认函数中访问-this"><a href="#在-prop-的默认函数中访问-this" class="headerlink" title="在 prop 的默认函数中访问 this"></a>在 prop 的默认函数中访问 this</h2><p>生成 prop 默认值的工厂函数不能再访问 this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3</span></span><br><span class="line"><span class="comment">// 把组件接收到的原始prop作为参数传递给默认函数</span></span><br><span class="line"><span class="comment">// inject API 可以在默认函数中使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">theme</span>: &#123;</span><br><span class="line">      <span class="title function_">default</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="comment">// props是传递给组件的原始值</span></span><br><span class="line">        <span class="comment">// 在任何类型/默认强制转换之前</span></span><br><span class="line">        <span class="comment">// 也可以使用inject来访问注入的property</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">inject</span>(<span class="string">&quot;theme&quot;</span>, <span class="string">&quot;default-theme&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="自定义指令-API-已更改为与组件生命周期一致"><a href="#自定义指令-API-已更改为与组件生命周期一致" class="headerlink" title="自定义指令 API 已更改为与组件生命周期一致"></a>自定义指令 API 已更改为与组件生命周期一致</h2><p>指令的钩子函数被重命名</p>
<p>在 2.x 中，自定义指令是通过使用鞋面列出的狗子来创建的，这些钩子是可选的</p>
<ul>
<li>bind - 指令绑定到元素后发生，只发生一次</li>
<li>inserted - 元素插入父 DOM 后发生</li>
<li>update - 单元数更新，但子元素尚未更新时，将调用此钩子</li>
<li>componentUpdated - 一旦组件和子级被更新，就会调用此钩子</li>
<li>unbind - 指令被移除时调用，只调用一次</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-highlignt</span>=<span class="string">&quot;&#x27;yellow&#x27;&quot;</span>&gt;</span>高亮文本，黄色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;highlight&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">background</span> = binding.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在这个元素的初始设置中，指令通过传递一个值来绑定样式，该值可以通过应用程序更新为不同的值</span></span><br></pre></td></tr></table></figure>

<p>在 3.x 中，自定义指令有了新的 API，现在将组件生命周期和自定义指令的生命周期统一了起来</p>
<ul>
<li>created - 新的！在元素的 attribute 或事件侦听器应用之前调用。</li>
<li>bind → beforeMount</li>
<li>inserted → mounted</li>
<li>beforeUpdate：新的！这是在元素本身更新之前调用的，很像组件生命周期钩子。</li>
<li>update → 移除！有太多的相似之处要更新，所以这是多余的，请改用 updated</li>
<li>componentUpdated → updated</li>
<li>beforeUnmount：新的！与组件生命周期钩子类似，它将在卸载元素之前调用。</li>
<li>unbind -&gt; unmounted</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最终API</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyDirective</span> = &#123;</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;highlight&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">background</span> = binding.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>访问组件实例的变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2  通过vnode访问组件实例</span></span><br><span class="line"><span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = vnode.<span class="property">context</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vue3  通过binding访问</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = binding.<span class="property">instance</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借助片段支持，组件可能具有多个根节点。当应用于多根组件时，指令将被忽略，并且将记录警告。</span></span><br></pre></td></tr></table></figure>

<h2 id="Data-选项始终都是-function，mixin-合并-data-的变化"><a href="#Data-选项始终都是-function，mixin-合并-data-的变化" class="headerlink" title="Data 选项始终都是 function，mixin 合并 data 的变化"></a>Data 选项始终都是 function，mixin 合并 data 的变化</h2><p>data 选项只支持 function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.x 现在只支持函数形式的data</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mixin 合并行为变更<br>当来自组件的 data()及其 mixin 或 extends 基类被合并时，现在将会<em>浅层次</em>合并</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mixin</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompA</span> = &#123;</span><br><span class="line">  <span class="attr">mixins</span>: [<span class="title class_">Mixin</span>]</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码在不同版本 vue 中结果不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="过渡的-class-名更改"><a href="#过渡的-class-名更改" class="headerlink" title="过渡的 class 名更改"></a>过渡的 class 名更改</h2><p><strong>过渡类名 v-enter 修改为 v-enter-from</strong><br><strong>过渡类名 v-leave 修改为 v-leave-form</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v2.1.8 版本中, 引入 v-enter-to 来定义 enter 或 leave 变换之间的过渡动画插帧, 为了向下兼容, 并没有变动 v-enter 类名</span><br><span class="line"></span><br><span class="line">这样做会带来很多困惑, 类似 enter 和 leave 含义过于宽泛并且没有遵循类名钩子的命名约定。</span><br><span class="line"></span><br><span class="line">在vue3中为了更加明确易读，现在将这些初始状态重命名</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2.x */</span></span><br><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3.x */</span></span><br><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>&lt;transition&gt;</code>组件相关属性名也发生了变化：</strong></p>
<ul>
<li>leave-class 重命名为 leave-from-class （JSX 中：leaveFromClass）</li>
<li>enter-class 重命名为 enter-from-class（JSX 中： enterFromClass）</li>
</ul>
<h2 id="lt-transition-group-gt-组件变化"><a href="#lt-transition-group-gt-组件变化" class="headerlink" title="&lt;transition-group&gt;组件变化"></a><code>&lt;transition-group&gt;</code>组件变化</h2><p><code>&lt;transition-group&gt;</code>不再默认渲染恩元素，但仍可以用 tag 属性创建根元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.x中 如果不指定tag属性，则会默认创建一个span元素包裹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.x中 组件不再需要一个根节点，所以transition-group不再渲染根节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同以上代码 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="watch-监听数组的变化"><a href="#watch-监听数组的变化" class="headerlink" title="watch 监听数组的变化"></a>watch 监听数组的变化</h2><p><strong>只有数组被替换的时候才会触发 watch 的回调，如果要在数组改变时触发，需要指定 deep 选项</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">bookList</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;changed!&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="没有特殊指令标记的-lt-template-gt"><a href="#没有特殊指令标记的-lt-template-gt" class="headerlink" title="没有特殊指令标记的&lt;template&gt;"></a>没有特殊指令标记的<code>&lt;template&gt;</code></h2><p><strong>没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot),将会生成原生<code>&lt;template</code>&gt;元素，而不是渲染内部内容</strong></p>
<h2 id="vue3-中，容器本身不再是模板的一部分"><a href="#vue3-中，容器本身不再是模板的一部分" class="headerlink" title="vue3 中，容器本身不再是模板的一部分"></a>vue3 中，容器本身不再是模板的一部分</h2><p><strong>在 Vue 2.x 中，应用根容器的 outerHTML 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 innerHTML，这意味着容器本身不再被视为模板的一部分。</strong></p>
<hr>
<h2 id="attribute-的强制行为"><a href="#attribute-的强制行为" class="headerlink" title="attribute 的强制行为"></a><em>attribute 的强制行为</em></h2><p><em>这是一个低级的内部 API 更改，不会影响大多数开发人员。</em></p>
<ul>
<li>删除枚举 attribute 的内部概念，并将这些 attribute 视为普通的非布尔 attribute</li>
<li>重大改变：如果值为布尔值，则不再删除 attribute false。相反，它被设置为 attr=“false”。移除 attribute，使用 null 或者 undefined。</li>
</ul>
<p><strong>在 2.x，我们有以下策略来强制 v-bind 的值：</strong></p>
<ul>
<li>对于某些 attribute/元素对，Vue 始终使用相应的 IDL attribute(property)：比如 value 的 <code>&lt;input&gt;</code>，<code>&lt;select&gt;</code>，<code>&lt;progress&gt;</code>，等等</li>
<li>对于“枚举 attribute” (目前 contenteditable，draggable 和 spellcheck)，Vue 会尝试强制将它们串起来 (目前对 contenteditable 做了特殊处理，修复 vuejs/vue#9397)</li>
<li>对于其他 attribute，我们移除了 falsy 值 (undefined，null，or false) 并按原样设置其他值 (见这里)。</li>
</ul>
<table>
<thead>
<tr>
<th>绑定表达式</th>
<th>foo 正常</th>
<th>draggable 枚举</th>
</tr>
</thead>
<tbody><tr>
<td>:attr=”null”</td>
<td>/</td>
<td>draggable=”false”</td>
</tr>
<tr>
<td>:attr=”undefined”</td>
<td>/</td>
<td>/</td>
</tr>
<tr>
<td>:attr=”true”</td>
<td>foo=”true”</td>
<td>draggable=”true”</td>
</tr>
<tr>
<td>:attr=”false”</td>
<td>/</td>
<td>draggable=”false”</td>
</tr>
<tr>
<td>:attr=”0”</td>
<td>foo=”0”</td>
<td>draggable=”true”</td>
</tr>
<tr>
<td>attr=””</td>
<td>foo=””</td>
<td>draggable=”true”</td>
</tr>
<tr>
<td>attr=”foo”</td>
<td>foo=”foo”</td>
<td>draggable=”true”</td>
</tr>
<tr>
<td>attr</td>
<td>foo=””</td>
<td>draggable=”true”</td>
</tr>
</tbody></table>
<p>从上表可以看出，当前实现 true 强制为 ‘true’ 但如果 attribute 为 false，则移除该 attribute。这也导致了不一致性，并要求用户在非常常见的用例中手动强制布尔值为字符串，例如 aria-* attribute 像 aria-selected，aria-hidden，等等。</p>
<p><strong>在 vue3 中，放弃“枚举 attribute”的内部概念，并将它们视为普通的非布尔 HTML attribute。</strong></p>
<ul>
<li>这解决了普通非布尔 attribute 和“枚举 attribute”之间的不一致性</li>
<li>它还可以使用 ‘true’ 和 ‘false’ 以外的值，甚至可以使用 contenteditable 等 attribute 的关键字`</li>
<li>对于非布尔 attribute，如果 attribute 为 false，Vue 将停止删除它们，相反强制它们为 ‘false’。</li>
<li>这解决了 true 和 false 之间的不一致性，并使输出 aria-* attributes 更容易</li>
</ul>
<p>| 绑定表达式        | foo 正常      | draggable 枚举    |<br>| —————– | ————- | —————– | — |<br>| :attr=”null”      | /             | / †               |<br>| :attr=”undefined” | /             | /                 |<br>| :attr=”true”      | foo=”true”    | draggable=”true”  |<br>| :attr=”false”     | foo=”false” † | draggable=”false” |<br>| :attr=”0”         | foo=”0”       | draggable=”0” †   |<br>| attr=””           | foo=””        | draggable=”” †    |<br>| attr=”foo”        | foo=”foo”     | draggable=”foo” † |<br>| attr              | foo=””        | draggable=””      | †   |</p>
<p>†： 变更<br>布尔 attributes 的强制保持不变。</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3的Api变更</title>
    <url>/posts/9db46716/</url>
    <content><![CDATA[<h1 id="组件相关"><a href="#组件相关" class="headerlink" title="组件相关"></a>组件相关</h1><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>functional attribute 在单文件组件 (SFC) <code>&lt;template&gt;</code> 已被移除<br>{ functional: true } 选项在通过函数创建组件已被移除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;dynamic-heading&gt; 组件，负责提供适当的标题 (即：h1，h2，h3，等等)，在 2.x 中，这可能是作为单个文件组件编写的：</span></span><br><span class="line"><span class="comment">// Vue 2 函数式组件示例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;level&#x27;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, &#123; props, data, children &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">`h<span class="subst">$&#123;props.level&#125;</span>`</span>, data, children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 2 函数式组件示例使用 &lt;template&gt;</span></span><br><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:is</span>=<span class="string">&quot;`h$&#123;props.level&#125;`&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-bind</span>=<span class="string">&quot;attrs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-on</span>=<span class="string">&quot;listeners&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;level&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>现在在 Vue 3 中，所有的函数式组件都是用普通函数创建的，换句话说，不需要定义 { functional: true } 组件选项。<br>他们将接收两个参数：props 和 context。context 参数是一个对象，包含组件的 attrs，slots，和 emit property。<br>此外，现在不是在 render 函数中隐式提供 h，而是全局导入 h。<br>使用前面提到的 <dynamic-heading> 组件的示例，下面是它现在的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3.0</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DynamicHeading</span> = (<span class="params">props, context</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">`h<span class="subst">$&#123;props.level&#125;</span>`</span>, context.<span class="property">attrs</span>, context.<span class="property">slots</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">DynamicHeading</span>.<span class="property">props</span> = [<span class="string">&#x27;level&#x27;</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DynamicHeading</span></span><br><span class="line"><span class="comment">// vue3.0单文件写法</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-bind:is</span>=<span class="string">&quot;`h$&#123;$props.level&#125;`&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;level&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>主要区别在于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">functional attribute 在 &lt;template&gt; 中移除</span><br><span class="line">listeners 现在作为 $attrs 的一部分传递，可以将其删除</span><br></pre></td></tr></table></figure>

<h2 id="异步组件的写法与-defineAsyncComponent-方法"><a href="#异步组件的写法与-defineAsyncComponent-方法" class="headerlink" title="异步组件的写法与 defineAsyncComponent 方法"></a>异步组件的写法与 defineAsyncComponent 方法</h2><p>现在使用 defineAsyncComponent 助手方法，用于显示的定义异步组件<br>component 选项重命名为 loader<br>Loader 函数本身不再接受 resolve 和 rejuct 参数，必须返回一个 Promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="comment">// 以前异步组件是通过将组件定义为返回Promise的函数来创建</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncPage</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>)</span><br><span class="line"><span class="comment">// 或者以选项方式创建</span></span><br><span class="line"><span class="keyword">const</span> asyncPage = &#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="attr">loading</span>: <span class="title class_">LoadingComponent</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line">在vue3.<span class="property">x</span>中，需要使用defineAsyncComponent来定义</span><br><span class="line"><span class="keyword">import</span>&#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/ErrorComponent.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoadingComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LoadingComponent.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带选项的定义方法</span></span><br><span class="line"><span class="keyword">const</span> asyncPage = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带选项的异步组件</span></span><br><span class="line">constasyncPageWithOptions = <span class="title function_">defineAsyncCopmonent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="title class_">LoadingComponent</span>: <span class="title class_">LoadingComponent</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>loader 函数不再接收 resolve 和 reject 参数，且必须始终返回 Promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">oldAsyncComponent</span> = (<span class="params">resolve, reject</span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="keyword">const</span> asyncComponent = <span class="title function_">defineAsyncComponent</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="组件事件需要在-emits-选项中声明"><a href="#组件事件需要在-emits-选项中声明" class="headerlink" title="组件事件需要在 emits 选项中声明"></a>组件事件需要在 emits 选项中声明</h2><p>vue3 中现在提供了一个 emits 选项，类似 props 选项<br>此选项可以用于定义组件向其父对象发出的事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;accepted&#x27;)&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;text&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 现在和prop类似，可以用emits来定义组件发出的事件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个选项还接收已给对象，用来向props一样对传递的参数进行验证 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强烈建议记录下每个组件发出的所有emits，因为去掉了.native修饰符，未使用声明的事件的所有监听器都将包含在组建的$attr中，默认情况下，该监听器将绑定到组件的根节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;accepted&#x27;)&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;text&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">emits</span>: [<span class="string">&quot;accepted&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="全局-API-变化"><a href="#全局-API-变化" class="headerlink" title="全局 API 变化"></a>全局 API 变化</h1><h2 id="Vue2-的全局-Api"><a href="#Vue2-的全局-Api" class="headerlink" title="Vue2 的全局 Api"></a>Vue2 的全局 Api</h2><p><strong>vue2 的全局 Api 可以全局改变 vue 的行为，这种操作容易意外污染其他测试用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createLocalVue, mount &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/test-utils&quot;</span>;</span><br><span class="line"><span class="comment">// 扩展vue的构造函数</span></span><br><span class="line"><span class="keyword">const</span> localVue = <span class="title function_">createLocalVue</span>();</span><br><span class="line"><span class="comment">// 在`local`Vue构造函数上全局安装插件</span></span><br><span class="line">localVue.<span class="title function_">use</span>(<span class="title class_">Myplugin</span>);</span><br><span class="line"><span class="comment">// 通过localVue来挂载选项</span></span><br><span class="line"><span class="title function_">mount</span>(<span class="title class_">Component</span>, &#123; localVue &#125;);</span><br></pre></td></tr></table></figure>

<p>全局配置会使同一个页面上的多个 app 之间共享一个 Vue 副本非常困难</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的mixin将会影响两个根实例</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Vue3-中新的全局-Api：createApp"><a href="#Vue3-中新的全局-Api：createApp" class="headerlink" title="Vue3 中新的全局 Api：createApp"></a>Vue3 中新的全局 Api：createApp</h2><p>createApp 返回了一个应用实例，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用的是Vue的CDN，那么createApp是通过全局的Vue对象暴露的</span></span><br><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Vue3-中对比-Vue2-全局-Api-的变化"><a href="#Vue3-中对比-Vue2-全局-Api-的变化" class="headerlink" title="Vue3 中对比 Vue2 全局 Api 的变化"></a>Vue3 中对比 Vue2 全局 Api 的变化</h2><table>
<thead>
<tr>
<th>2.x 全局 Api</th>
<th>3.x 实例（app）Api</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.cofing</td>
<td>app.config</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td>* 移除</td>
</tr>
<tr>
<td>Vue.config.ignoredElements</td>
<td>* app.config.isCustomElement</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>* app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>* app.config.globalProperties</td>
</tr>
</tbody></table>
<p><strong>所有其他不全局改变行为的全局 Api，现在被命名为 exports</strong></p>
<h3 id="config-productionTip-移除"><a href="#config-productionTip-移除" class="headerlink" title="config.productionTip 移除"></a>config.productionTip 移除</h3><p>在 Vue 3.x 中，“使用生产版本”提示仅在使用“dev + full build”(包含运行时编译器并有警告的构建) 时才会显示。</p>
<p>对于 ES 模块构建，由于它们是与 bundler 一起使用的，而且在大多数情况下，CLI 或样板已经正确地配置了生产环境，所以本技巧将不再出现。</p>
<h3 id="config-ignoredElements-替换为-config-isCustomElement"><a href="#config-ignoredElements-替换为-config-isCustomElement" class="headerlink" title="config.ignoredElements 替换为 config.isCustomElement"></a>config.ignoredElements 替换为 config.isCustomElement</h3><p>引入此配置项目目的是为了支持原生自定义元素，因此重命名可以更好的传达它的功能，新选项还需要一个比使用 String/RegExp 跟灵活的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">ignoredElements</span> = [<span class="string">&quot;my-el&quot;</span>, <span class="regexp">/^ion-/</span>];</span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">isCustomElement</span> = <span class="function">(<span class="params">tag</span>) =&gt;</span> tag.<span class="title function_">startsWith</span>(<span class="string">&quot;ion-&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 Vue 3 中，元素是否是组件的检查已转移到模板编译阶段，因此只有在使用运行时编译器时才考虑此配置选项。如果你使用的是 runtime-only 版本 isCustomElement 必须通过 @vue/compiler-dom 在构建步骤替换——比如，通过 compilerOptions option in vue-loader。</span><br><span class="line"></span><br><span class="line">如果 config.isCustomElement 当使用仅运行时构建时时，将发出警告，指示用户在生成设置中传递该选项；</span><br><span class="line">这将是 Vue CLI 配置中新的顶层选项。</span><br></pre></td></tr></table></figure>

<h3 id="Vue-prototype-替换为-config-globalProperties"><a href="#Vue-prototype-替换为-config-globalProperties" class="headerlink" title="Vue.prototype 替换为 config.globalProperties"></a>Vue.prototype 替换为 config.globalProperties</h3><p>在 Vue2 中，Vue.prototype 通常用于添加所有组件都能访问的 property<br>在 Vue3 等同于 config.globalProperties 这些 property 将被复制到应用中作为实例化组件的一部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span> = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 使用provide时，也应考虑作为globaProperties的替代品</span></span><br></pre></td></tr></table></figure>

<h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><p>插件开发者通常使用 vue.use，例如官方的 vue-router 是如何在浏览器环境中自行安装的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inBrowser = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&quot;undefined&quot;</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">if</span> (inBrowser &amp;&amp; <span class="variable language_">window</span>.<span class="property">Vue</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在 use 全局 Api 不再使用，所以需要手动指定使用此插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">MyApp</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br></pre></td></tr></table></figure>

<h2 id="挂载-App-实例"><a href="#挂载-App-实例" class="headerlink" title="挂载 App 实例"></a>挂载 App 实例</h2><p>使用 createApp 初始化之后，应用实例 app 可使用 app.mount(domTarget)挂在组件实例,<br>经过以上更改，完整的写法将会改写为以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyApp</span> <span class="keyword">from</span> <span class="string">&quot;./MyApp.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">MyApp</span>);</span><br><span class="line">app.<span class="title function_">componenet</span>(<span class="string">&quot;button-counter&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;`</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>(),</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Provide-inject"><a href="#Provide-inject" class="headerlink" title="Provide/inject"></a>Provide/inject</h2><p>与 2.x 跟实例中使用 provide 选项类似，Vue3 应用实例还可以提供可由应用内的任何组件注入的依赖项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&quot;guide&quot;</span>, <span class="string">&quot;Vue 3 Guide&quot;</span>);</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&quot;guide&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; book &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用 provide 在编写插件时非常有用，可以替代 globalProperties</span></span><br></pre></td></tr></table></figure>

<h2 id="应用之间共享配置"><a href="#应用之间共享配置" class="headerlink" title="应用之间共享配置"></a>应用之间共享配置</h2><p>要在应用之间共享配置，如组件或指令的一种方法时创建<strong>组件工厂</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">F00</span> <span class="keyword">from</span> <span class="string">&quot;./Foo.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Bar</span> <span class="keyword">from</span> <span class="string">&quot;./Bar.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createMyApp</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(options);</span><br><span class="line">  app.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span> <span class="comment">/* ... */</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">Foo</span>).<span class="title function_">mount</span>(<span class="string">&quot;#foo&quot;</span>);</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">Bar</span>).<span class="title function_">mount</span>(<span class="string">&quot;#bar&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="支持-Tree-shaking-的影响"><a href="#支持-Tree-shaking-的影响" class="headerlink" title="支持 Tree-shaking 的影响"></a>支持 Tree-shaking 的影响</h1><h2 id="2-x-不支持-tree-shaking"><a href="#2-x-不支持-tree-shaking" class="headerlink" title="2.x 不支持 tree-shaking"></a>2.x 不支持 tree-shaking</h2><p><strong>tree-shaking，即死代码消除，但是由于 2.x 的一些 api，如 Vue.nextTick()方法，即使不被使用，也会被最终打包</strong></p>
<h2 id="3-x-中支持了-tree-shaking-所引起的变化"><a href="#3-x-中支持了-tree-shaking-所引起的变化" class="headerlink" title="3.x 中支持了 tree-shaking 所引起的变化"></a>3.x 中支持了 tree-shaking 所引起的变化</h2><p>在 Vue 3 中，全局和内部 API 都经过了重构，并考虑到了 tree-shaking 的支持。因此，全局 API 现在只能作为 ES 模块构建的命名导出进行访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一些和DOM有关的东西</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>直接调用 Vue.nextTick()将会导致 undefined is not a function<br>通过这一更改，Vue 应用程序中未使用的全局 api 将从最终捆绑包中消除，从而获得最佳文件大小</p>
<h2 id="受到影响的-Api"><a href="#受到影响的-Api" class="headerlink" title="受到影响的 Api"></a>受到影响的 Api</h2><ul>
<li>Vue.nextTick</li>
<li>vue.observable</li>
<li>Vue.version</li>
<li>Vue.compile</li>
<li>Vue.set</li>
<li>vue.delete</li>
</ul>
<h2 id="内部帮助器"><a href="#内部帮助器" class="headerlink" title="内部帮助器"></a>内部帮助器</h2><p>除了公共 api，许多内部组件/帮助其现在也被导出为命名导出，只有当编译器的输出是这些特性时，才允许编译器导入这些特性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将会被编译为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, <span class="title class_">Transition</span>, withDirectives, vShow &#125; <span class="keyword">from</span> <span class="string">&#x27;vue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export function render() &#123;</span></span><br><span class="line"><span class="string">  return h(Transition, [withDirectives(h(&#x27;</span>div<span class="string">&#x27;, &#x27;</span>hello<span class="string">&#x27;), [[vShow, this.ok]])])</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这意味着只有在应用程序实际使用了 Transition 组件的时候才会导入他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上仅适用于 ES Modules builds，用于支持 tree-shaking 的绑定器——UMD 构建仍然包括所有特性，并暴露 Vue 全局变量上的所有内容 (编译器将生成适当的输出，以使用全局外的 api 而不是导入)。</span><br></pre></td></tr></table></figure>

<h2 id="在插件中的用法"><a href="#在插件中的用法" class="headerlink" title="在插件中的用法"></a>在插件中的用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="keyword">const</span> plugin = &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">Vue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> plugin = &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果使用 webpack 这样的模块捆绑包，这可能会导致 Vue 的源代码绑定到插件中，而且通常情况下，这并不是你所期望的。防止这种情况发生的一种常见做法是配置模块绑定器以将 Vue 从最终捆绑中排除。对于 webpack，你可以使用 externals 配置选项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这将会告诉webpack将Vue模块视为一个外部库，而不是捆绑他</span></span><br></pre></td></tr></table></figure>

<p>如果你选择的模块绑定器恰好是 Rollup，你基本上可以免费获得相同的效果，因为默认情况下，Rollup 会将绝对模块 id (在我们的例子中为 ‘vue’) 作为外部依赖项，而不会将它们包含在最终的 bundle 中。但是在绑定期间，它可能会发出一个“将 vue 作为外部依赖” 警告，可使用 external 选项抑制该警告：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  <span class="attr">external</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h1><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从KeyboardEvent.keyCode has been deprecated 开始，Vue 3 继续支持这一点就不再有意义了。因此，现在建议对任何要用作修饰符的键使用 kebab-cased (短横线) 大小写名称。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&quot;confirmDelete&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时废弃了全局 config.keyCodes 选项</p>
<h2 id="key-属性"><a href="#key-属性" class="headerlink" title="key 属性"></a>key 属性</h2><ol>
<li>v-if/v-else/v-else-if 的 key 不再是必须的，vue3.x 会自动生成唯一 key<br>不可以通过手动提供 key 的方式，来强制重用分支</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 2.x 没有必要在vue3.x这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;condition&quot;</span> <span class="attr">key</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;no&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue 2.x 这在vue3.x中会出现错误 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;condition&quot;</span> <span class="attr">key</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;a&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue3.x 如果一定要指定key,请确保key值不重复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;condition&quot;</span> <span class="attr">key</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;b&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>&lt;template v-for&gt;</code>的 key 应该设置在<code>&lt;template&gt;</code>标签上，而不是设置在他的子结点上</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue 3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if-和-v-for-的优先级调整"><a href="#v-if-和-v-for-的优先级调整" class="headerlink" title="v-if 和 v-for 的优先级调整"></a>v-if 和 v-for 的优先级调整</h2><p>这个可太棒了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在vue3中，v-if拥有比v-for更高的优先级</span><br><span class="line"></span><br><span class="line">官网建议：</span><br><span class="line">由于语法上存在歧义，建议避免在同一元素上同时使用两者。</span><br><span class="line">比起在模板层面管理相关逻辑，更好的办法是通过创建计算属性筛选出列表，并以此创建可见元素。</span><br></pre></td></tr></table></figure>

<h2 id="v-bind-现在对排序敏感（v-bind-的合并行为）"><a href="#v-bind-现在对排序敏感（v-bind-的合并行为）" class="headerlink" title="v-bind 现在对排序敏感（v-bind 的合并行为）"></a>v-bind 现在对排序敏感（v-bind 的合并行为）</h2><p>如果在一个元素上同时定义了 v-bind=”object”和一个相同的单独的 property<br>那么 v-bind 的绑定会被覆盖</p>
<p>在 vue3.x 中 v-bind 和单独的 property 有排序关系，看代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: &#x27;blue&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: &#x27;blue&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: &#x27;blue&#x27; &#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-on-的-native-修饰符已被移除"><a href="#v-on-的-native-修饰符已被移除" class="headerlink" title="v-on 的 .native 修饰符已被移除"></a>v-on 的 .native 修饰符已被移除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue3.x中新增了emits选项</span><br><span class="line">对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:close</span>=<span class="string">&quot;handleComponentEvent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:click.native</span>=<span class="string">&quot;handleNativeClickEvent&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:close</span>=<span class="string">&quot;handleComponentEvent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:click</span>=<span class="string">&quot;handleNativeClickEvent&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">emits</span>: [<span class="string">&quot;close&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-中的-ref-不再注册-ref-数组"><a href="#v-for-中的-ref-不再注册-ref-数组" class="headerlink" title="v-for 中的 ref 不再注册 ref 数组"></a>v-for 中的 ref 不再注册 ref 数组</h2><p>在 Vue 2 中，在 v-for 里使用的 ref attribute 会用 ref 数组填充相应的 $refs property。当存在嵌套的 v-for 时，这种行为会变得不明确且效率低下。</p>
<p>在 Vue 3 中，这样的用法将不再在 $ref 中自动创建数组。要从单个绑定获取多个 ref，请将 ref 绑定到一个更灵活的函数上 (这是一个新特性)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;setItemRef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结合选项式API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">itemRefs</span>: [],</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setItemRef</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">itemRefs</span>.<span class="title function_">push</span>(el);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">itemRefs</span> = [];</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">itemRefs</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结合组合式API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onBeforeUpdate, onUpdated &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> itemRefs = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">setItemRef</span> = (<span class="params">el</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        itemRefs.<span class="title function_">push</span>(el);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        itemRefs = [];</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(itemRefs);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        itemRefs,</span></span><br><span class="line"><span class="language-javascript">        setItemRef,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note flat"><p>itemRefs 不必是数组：它也可以是一个对象，其 ref 会通过迭代的 key 被设置。</p>
<p>如果需要，itemRef 也可以是响应式的且可以被监听。  </p>
</div>

<h1 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h1><h2 id="渲染函数-API-变更"><a href="#渲染函数-API-变更" class="headerlink" title="渲染函数 API 变更"></a>渲染函数 API 变更</h2><p><em>此更改不会影响到<code>&lt;template&gt;</code>用户</em></p>
<ul>
<li><code>h</code>现在全局导入，而非作为参数传递给渲染函数</li>
<li>渲染函数参数更改为在有状态组件和函数组件之间更加一致</li>
<li>vnode 现在又一个扁平的 prop 结构</li>
</ul>
<h3 id="Render-函数参数"><a href="#Render-函数参数" class="headerlink" title="Render 函数参数"></a>Render 函数参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.0 渲染函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.x语法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="渲染函数签名更改"><a href="#渲染函数签名更改" class="headerlink" title="渲染函数签名更改"></a>渲染函数签名更改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">prop, &#123;slots, attrs, emit&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回render函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">onClick</span>: increment</span><br><span class="line">      &#125;,</span><br><span class="line">      state.<span class="property">count</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="VNode-Props-格式化"><a href="#VNode-Props-格式化" class="headerlink" title="VNode Props 格式化"></a>VNode Props 格式化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">class</span>: [<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;is-outlined&#x27;</span>],</span><br><span class="line">  <span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">&#x27;#fffff&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">attr</span>: &#123;<span class="attr">id</span>: <span class="string">&#x27;submit&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">domProps</span>: &#123;<span class="attr">innerHTML</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">on</span>: &#123;<span class="attr">click</span>: submitForm&#125;,</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;submit-button&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.x VNode的结构是扁平的</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">class</span>: [<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;is-outlined&#x27;</span>],</span><br><span class="line">  <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#34495E&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">  <span class="attr">innerHTML</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">onClick</span>: submitForm,</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;submit-button&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="slot-统一"><a href="#slot-统一" class="headerlink" title="slot 统一"></a>slot 统一</h2><p><em>更改了普通 slot 和作用域 slot</em></p>
<ul>
<li><code>this.$slots</code>现在将 slots 作为函数公开</li>
<li>移除<code>this.$scopedSlots</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="title function_">h</span>(<span class="title class_">LayoutComponent</span>, [</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">slot</span>: <span class="string">&quot;header&quot;</span> &#125;, <span class="variable language_">this</span>.<span class="property">header</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">slot</span>: <span class="string">&quot;header&quot;</span> &#125;, <span class="variable language_">this</span>.<span class="property">header</span>),</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 作用域slot：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="title function_">h</span>(</span><br><span class="line">  <span class="title class_">LayoutComponent</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="variable language_">this</span>.<span class="property">header</span>),</span><br><span class="line">    <span class="attr">content</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="variable language_">this</span>.<span class="property">content</span>),</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 需要以编程方式引入作用域slot时，他们现在被统一在了$slots选项中</span></span><br><span class="line"><span class="comment">// 2.x的作用域slot</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$scopedSlots</span>.<span class="property">header</span>;</span><br><span class="line"><span class="comment">// 3.x的写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">header</span>;</span><br></pre></td></tr></table></figure>

<h2 id="移除-listeners"><a href="#移除-listeners" class="headerlink" title="移除$listeners"></a>移除$listeners</h2><p><code>$listeners</code>对象在 vue3 中已经移除，现在事件监听器是<code>$attrs</code>的一部分</p>
<p>在 vue2 中，可以使用 this.$attrs和this.$listeners 分别访问传递给组件的 attribute 和时间监听器，结合 inheritAttrs: false，开发者可以将这些 attribute 和监听器应用到其他元素，而不是根元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 vue 的虚拟 DOM 中，事件监听器现在只是以 on 为前缀的 attribute，这样就成了$attrs对象的一部分，这样$listeners 就被移除了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 如果这个组件接收一个 id attribute 和一个 v-on:close 监听器，那么 $attrs 对象现在将如下所示</span></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="string">&#x27;my-input&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onClose</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close Event Triggered&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="attrs-现在包括-class-和-style"><a href="#attrs-现在包括-class-和-style" class="headerlink" title="$attrs 现在包括 class 和 style"></a>$attrs 现在包括 class 和 style</h2><p><em>现在的$attr 包含所有的 attribute，包括 class 和 style</em></p>
<p>在 2.x 中，虚拟 dom 会对 class 和 style 进行特殊处理，所以他们不包括在$attr 中<br>在使用 inheritAttr: false 的时候会产生副作用</p>
<ul>
<li>$attrs 中的 attribute 不再自动添加到根元素中，而是由开发者决定在哪添加。</li>
<li>但是 class 和 style 不属于 $attrs，仍然会应用到组件的根元素：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 写入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">id</span>=<span class="string">&quot;my-id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-class&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue2 将生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;my-class&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my-id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vue3 将生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my-id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;my-class&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h1><h2 id="自主定制元素"><a href="#自主定制元素" class="headerlink" title="自主定制元素"></a>自主定制元素</h2><p>如果我们先添加在 Vue 外部定义的自定义元素，如使用 Web 组件 API，我们需要指示 Vue 将其视为自定义元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plastic-button</span>&gt;</span><span class="tag">&lt;/<span class="name">plastic-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在2.x中，将标记作为自定义元素白名单是通过Vue.config.ignoredElements</span></span><br><span class="line"><span class="comment">// 这将使Vue忽略在Vue外部定义的自定义元素</span></span><br><span class="line"><span class="comment">// (例如：使用 Web Components API)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">ignoredElements</span> = [<span class="string">&quot;plastic-button&quot;</span>];</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Vue3中，此检查在模板编译期间执行指示编译器将&lt;plastic-button&gt;视为自定义元素</span></span><br><span class="line"><span class="comment">// 如果使用生成步骤：将 isCustomElement 传递给 Vue 模板编译器，如果使用 vue-loader，则应通过 vue-loader 的 compilerOptions 选项传递：</span></span><br><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    <span class="attr">use</span>: <span class="string">&quot;vue-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">        <span class="attr">isCustomElement</span>: <span class="function">(<span class="params">tag</span>) =&gt;</span> tag === <span class="string">&quot;plastic-button&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 如果使用动态模板编译，请通过 app.config.isCustomElement 传递</span></span><br><span class="line"><span class="comment">// 运行时配置只会影响运行时模板编译——它不会影响预编译的模板。</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">isCustomElement</span> = <span class="function">(<span class="params">tag</span>) =&gt;</span> tag === <span class="string">&quot;plastic-button&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="定义内置元素"><a href="#定义内置元素" class="headerlink" title="定义内置元素"></a>定义内置元素</h2><p>自定义元素规范提供了一种将自定义元素用作自定义内置模板的方法，方法是向内置元素添加 is 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">is</span>=<span class="string">&quot;plastic-button&quot;</span>&gt;</span>点击我!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue 对 is 特殊 prop 的使用是在模拟 native attribute 在浏览器中普遍可用之前的作用，但是在 2.x 中，它被解释为一个名为 plastic-button 的 Vue 组件，浙江组织上面提到的自定义内置元素的原生使用<br><strong>在 3.0 中，Vue 对 is 属性的特殊处理被限制到<code>&lt;component&gt;</code>标签上</strong><br>在保留的 <code>&lt;component&gt;</code> tag 上使用时，它的行为将与 2.x 中完全相同</p>
<ul>
<li>在普通组件上使用时，他的行为将类似于普通 prop</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;foo is=&quot;bar&quot; /&gt;</span><br><span class="line">在vue2中，将会渲染bar组件</span><br><span class="line">在vue3中，会通过is属性渲染foo组件</span><br></pre></td></tr></table></figure>

<ul>
<li>在普通元素上使用时，它将作为 is 选项传递给 createElement 调用，并作为原生属性渲染</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button is=&quot;plastic-button&quot;&gt;点击我！&lt;/button&gt;</span><br><span class="line">在vue2中，渲染plastic-button组件</span><br><span class="line">在vue3中，渲染原生button：</span><br><span class="line">document.createElement(&#x27;button&#x27;, &#123; is: &#x27;plastic-button&#x27; &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="v-is-用于-DOM-内模板解析解决方案"><a href="#v-is-用于-DOM-内模板解析解决方案" class="headerlink" title="v-is 用于 DOM 内模板解析解决方案"></a>v-is 用于 DOM 内模板解析解决方案</h2><p><em>仅影响直接在页面的 HTML 中写入 Vue 模板的情况，在 DOM 模板中使用时，模板受原生 HTML 解析规则的约束</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 随着is的行为变化，新的指令v-is用来解决当前情况 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：v-is 函数像一个动态的 2.x :is 绑定——因此，要按注册名称渲染组件，其值应为 JavaScript 字符串文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-is</span>=<span class="string">&quot;&#x27;blog-post-row&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-is绑定的是一个Javascript变量 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不正确，不会渲染任何内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-is</span>=<span class="string">&quot;blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-is</span>=<span class="string">&quot;&#x27;blog-post-row&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3移除的Api</title>
    <url>/posts/ef43c638/</url>
    <content><![CDATA[<h1 id="Vue3-移除的-API"><a href="#Vue3-移除的-API" class="headerlink" title="Vue3 移除的 API"></a>Vue3 移除的 API</h1><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><ul>
<li>不再支持 keycode 作为 v-on 的修饰符</li>
<li>不再支持 config.keyCode</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 键码版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 别名版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过全局 config.keyCodes 选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  Vue.config.keyCodes = &#123;</span><br><span class="line">    f1: 112,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.112</span>=<span class="string">&quot;showHelpText&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.f1</span>=<span class="string">&quot;showHelpText&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新规范中keyCode不再被推荐，推荐使用按键名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&quot;confirmDelete&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="on，-off-和-once-实例方法被移除"><a href="#on，-off-和-once-实例方法被移除" class="headerlink" title="$on，$off 和 $once 实例方法被移除"></a>$on，$off 和 $once 实例方法被移除</h2><p><strong>在 vue2.x 中，可以通过指令方式添加处理函数（$on, $once, $off）, 这可以创建 event hub，用来创建在整个应用程序中可用的全局事件监听器</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eventHub.js</span></span><br><span class="line"><span class="keyword">const</span> eventHub = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> eventHub</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildComponent.vue</span></span><br><span class="line"><span class="keyword">import</span> eventHub <span class="keyword">from</span> <span class="string">&#x27;./eventHub&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.$on(<span class="string">&#x27;custom-event&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Custom event triggered!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.$off(<span class="string">&#x27;custom-event&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParentComponent.vue</span></span><br><span class="line"><span class="keyword">import</span> eventHub <span class="keyword">from</span> <span class="string">&#x27;./eventHub&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">callGlobalCustomEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">      eventHub.$emit(<span class="string">&#x27;custom-event&#x27;</span>)</span><br><span class="line">      <span class="comment">// 当 ChildComponent 被挂载，控制台中将显示一条消息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在 Vue3 中，从实例中完全移除了 $on、$off 和 $once 方法。$emit 仍然包含于现有的 API 中，因为它用于触发由父组件声明式添加的事件处理函数</strong></p>
<h2 id="删除过滤器"><a href="#删除过滤器" class="headerlink" title="删除过滤器"></a>删除过滤器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.x中，开发者可以使用过滤器来处理通用文本格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; accountBalance | currencyUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">accountBalance</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filter</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">currentUSD</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;$&quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在 3.x 中，过滤器已删除，不再支持。可以使用计算属性或调用方法替换他们</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; accountInUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">accountBalance</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">accountInUSD</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;$&quot;</span> + <span class="variable language_">this</span>.<span class="property">accountBalance</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="内联模板-Attribute"><a href="#内联模板-Attribute" class="headerlink" title="内联模板 Attribute"></a>内联模板 Attribute</h2><p><strong>移除内联特性</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- inline-template属性可以将其内部内容用作模板，而不是将其作为分发内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>它们被编译为组件自己的模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>不是父级所包含的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue3 中已移除，不再支持</p>
<h2 id="children-已移除"><a href="#children-已移除" class="headerlink" title="$children 已移除"></a>$children 已移除</h2><p>$children 实例 property 已从 Vue 3.0 中移除，不再支持。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-button</span>&gt;</span>Change logo<span class="tag">&lt;/<span class="name">my-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">MyButton</span> <span class="keyword">from</span> <span class="string">&quot;./MyButton&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">MyButton</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>); <span class="comment">// [VueComponent]</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 vue3 中，如果要访问子组件实例，建议使用$refs</p>
<h2 id="destory-实例方法已删除"><a href="#destory-实例方法已删除" class="headerlink" title="$destory 实例方法已删除"></a>$destory 实例方法已删除</h2><p><strong>用户不应再手动管理单个 Vue 组件的生命周期。</strong></p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的provide和inject</title>
    <url>/posts/84024325/</url>
    <content><![CDATA[<h2 id="官方文档链接"><a href="#官方文档链接" class="headerlink" title="官方文档链接"></a>官方文档链接</h2><p><a href="https://cn.vuejs.org/v2/api/#provide-inject">Vue2 的 Provide/inject</a><br><a href="https://v3.cn.vuejs.org/guide/component-provide-inject.html">Vue3 的 Provide/Inject</a><br><a href="https://v3.cn.vuejs.org/guide/composition-api-provide-inject.html">组合式 API 中的用法</a></p>
<h2 id="认识-provide-和-inject"><a href="#认识-provide-和-inject" class="headerlink" title="认识 provide 和 inject"></a>认识 provide 和 inject</h2><p>provide 和 inject 是 Vue 中的一种组件间传值的解决办法<br>解决了深层嵌套的组件之间的传值不方便问题<br>先来看看这两个单词什么意思…  </p>
<div class="note success flat"><p>provide<br>vt. 提供; 供应; 给予; 规定</p>
</div>  
<div class="note success flat"><p>inject<br>vt. (给…)注射(药物等); (给…)注射(液体); (给…)添加，增加(某品质)  </p>
</div>  
<p>从直译中，就可以知道 provide 提供了数据，将这个数据沿着组件向下传递<br>而 inject 则是被注入了这个数据<br>provide 用在遥远的父组件上…而 inject 用在遥远的子组件上…</p>
<blockquote>
<p>这里的遥远指的是组件之间的关系：向下跨组件传递<br>例如 Vue 官网给我们提供的组件结构</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">└─ TodoList</span><br><span class="line">   ├─ TodoItem</span><br><span class="line">   └─ TodoListFooter</span><br><span class="line">      ├─ ClearTodosButton</span><br><span class="line">      └─ TodoListStatistics</span><br></pre></td></tr></table></figure>

<p><img src="https://v3.cn.vuejs.org/images/components_provide.png" alt="Provide/Inject"></p>
<h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><blockquote>
<p>优点<br>方便，真的是非常方便…<br>两个组件离得很远，但是父组件 provide，子组件 inject，两行代码就解决了传值问题<br>vuex，eventbus，props 虽然都可以实现，不论逻辑上还是代码上，负担都挺不小的…</p>
</blockquote>
<blockquote>
<p>缺点<br>数据流向不明<br>这个问题就好像一个人在长江上游放了个小黄鸭，小黄鸭顺着长江向下漂流…<br>长江两岸有很多人，他们都能看到这个小黄鸭，也都能知道这个小黄鸭是黄色的….<br><strong>可是没有人知道这只鸭鸭是谁放的</strong></p>
</blockquote>
<h2 id="option-中使用"><a href="#option-中使用" class="headerlink" title="option 中使用"></a>option 中使用</h2><h3 id="基础使用方法"><a href="#基础使用方法" class="headerlink" title="基础使用方法"></a>基础使用方法</h3><p>option 即选项，vue2 中 data，watch，methods 之类的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提供数据的组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    searchText : <span class="string">&#x27;搜索内容&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据的组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;searchText&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// inject 默认值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">searchText</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;搜索文字的默认值&#x27;</span></span><br><span class="line">      <span class="comment">// 如果默认值为非原始值， 那么需要对其使用一个工厂方法</span></span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> [<span class="string">&#x27;默&#x27;</span>, <span class="string">&#x27;认&#x27;</span>, <span class="string">&#x27;值&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相隔遥远的组件传值竟如此简单…</p>
<h3 id="处理响应性"><a href="#处理响应性" class="headerlink" title="处理响应性"></a>处理响应性</h3><p><a href="https://v3.cn.vuejs.org/guide/component-provide-inject.html#%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E6%80%A7">默认情况下，provide/inject 并不是响应式的</a></p>
<blockquote>
<p>提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。</p>
</blockquote>
<h2 id="setup-api-中使用"><a href="#setup-api-中使用" class="headerlink" title="setup api 中使用"></a>setup api 中使用</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>setup api 和 option 差不多，<a href="https://v3.cn.vuejs.org/guide/composition-api-provide-inject.html">只是换了个写法</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提供数据--Provide</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// provide(name, value)</span></span><br><span class="line"><span class="comment">// name (&lt;String&gt; 类型)</span></span><br><span class="line"><span class="comment">// value</span></span><br><span class="line"><span class="comment">// 多个provide数据就执行多个provide方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;searchText&#x27;</span>, <span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据--Inject</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// inject(name, default)</span></span><br><span class="line"><span class="comment">// name (&lt;String&gt; 类型)</span></span><br><span class="line"><span class="comment">// default (默认值)</span></span><br><span class="line"><span class="comment">// 多个inject数据执行多个inject方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> searchText = <span class="title function_">inject</span>(<span class="string">&#x27;seachText&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; searchText &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理响应式"><a href="#处理响应式" class="headerlink" title="处理响应式"></a>处理响应式</h3><p>和 option 一样，provide 和 inject 方法默认不支持响应式<br>但是可以通过传入响应式数据<br>例如，在 provide 中传值的时候，用 ref()或 reactive()这两个响应式 api 处理一下值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> refStr = <span class="title function_">ref</span>(<span class="string">&quot;search&quot;</span>);</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&quot;searchText&quot;</span>, refStr);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在Blade模板中使用vue</title>
    <url>/posts/11a03945/</url>
    <content><![CDATA[<h1 id="blade-中操作-vue-组件"><a href="#blade-中操作-vue-组件" class="headerlink" title="blade 中操作 vue 组件"></a>blade 中操作 vue 组件</h1><h2 id="blade-中使用-vue-组件"><a href="#blade-中使用-vue-组件" class="headerlink" title="blade 中使用 vue 组件"></a>blade 中使用 vue 组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">Vue</span> = <span class="built_in">require</span>(<span class="string">&quot;vue&quot;</span>);</span><br><span class="line"><span class="keyword">import</span> promise <span class="keyword">from</span> <span class="string">&quot;es6-promise&quot;</span>;</span><br><span class="line">promise.<span class="title function_">polyfill</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Axios from &#x27;@/utils/request.js&#x27;</span></span><br><span class="line"><span class="comment">// Vue.prototype.$ajax = Axios;</span></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;dialog&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;./dialog.vue&quot;</span>).<span class="property">default</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dialog = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#dialog&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 实例化vue</span></span><br></pre></td></tr></table></figure>

<p>在 blade 中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;dialog-test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dialog</span>&gt;</span>测试弹窗内容<span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 触发弹窗的按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;show-dialog&quot;</span>&gt;</span>open dialog<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 打包并引入v组件的入口文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; mix(&#x27;js/views/library/component-vue/dialog.bundle.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="将-vue-组件挂在-window-上"><a href="#将-vue-组件挂在-window-上" class="headerlink" title="将 vue 组件挂在 window 上"></a>将 vue 组件挂在 window 上</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用element组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; <span class="title class_">Dialog</span>, <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dialog</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;dialog&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this是组件实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在window上定义一个属性，指向组件实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">VDialog</span> = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">controlDialog</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = !<span class="variable language_">this</span>.<span class="property">dialogVisible</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过-window-上的全局变量操作组件"><a href="#通过-window-上的全局变量操作组件" class="headerlink" title="通过 window 上的全局变量操作组件"></a>通过 window 上的全局变量操作组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">VDialog</span>);</span><br><span class="line"><span class="comment">//  VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;.show-dialog&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// controlDialog是methods里定义的方法</span></span><br><span class="line">    <span class="title class_">VDialog</span>.<span class="title function_">controlDialog</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-interface</title>
    <url>/posts/4ef24c02/</url>
    <content><![CDATA[<h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><p>面向对象的编程中，接口是一种规范的定义，定义了行为和动作的规范，在程序设计中，接口起到限制和规范的作用<br>接口定义了某一批类说需要遵守的规范，接口不关心这些类的内部数据状态，也不关心类里面方法的实现细节，他只规定了这批内里面必须提供的某些方法提供这些方法的类就可以满足实际需要</p>
<h2 id="属性类型接口"><a href="#属性类型接口" class="headerlink" title="属性类型接口"></a>属性类型接口</h2><ul>
<li>ts 接口对方法的参数进行约束</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求info必须包含label属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params"><span class="attr">info</span>: &#123; label: <span class="built_in">string</span> &#125;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printLabel</span>(<span class="string">&quot;xxx&quot;</span>); <span class="comment">// error</span></span><br><span class="line"><span class="title function_">printlabel</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;); <span class="comment">//  error</span></span><br><span class="line"><span class="title function_">printLabel</span>(&#123; <span class="attr">label</span>: <span class="string">&quot;xxx&quot;</span> &#125;); <span class="comment">//  right</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对批量方法进行约束</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FullName</span> &#123;</span><br><span class="line">  <span class="comment">// 结尾要用;</span></span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params"><span class="attr">name</span>: <span class="title class_">FullName</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + name.<span class="property">lastName</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;miya&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">printName</span>(name); <span class="comment">// ok</span></span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;miya&quot;</span> &#125;); <span class="comment">// ok</span></span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;miya&quot;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printInfo</span>(<span class="params"><span class="attr">name</span>: <span class="title class_">FullName</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + name.<span class="property">lastName</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">age</span>); <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口的可选参数</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  接口的可选参数------------------------------</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FullName</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printInfo</span>(<span class="params"><span class="attr">name</span>: <span class="title class_">FullName</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + name.<span class="property">lastName</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">age</span>); <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printInfo</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;miya&quot;</span> &#125;); <span class="comment">// ok</span></span><br><span class="line"><span class="title function_">printInfo</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;miya&quot;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">// ok</span></span><br><span class="line"><span class="title function_">printInfo</span>(&#123; <span class="attr">firstName</span>: <span class="string">&quot;ayase&quot;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h2 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h2><ul>
<li>ts 接口对函数进行约束</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FullName</span> &#123;</span><br><span class="line">  (<span class="attr">firstName</span>: <span class="built_in">string</span>, <span class="attr">lastName</span>: <span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">name</span>:<span class="title class_">FullName</span> = <span class="keyword">function</span> (<span class="params"><span class="attr">firstName</span>:<span class="built_in">string</span>, <span class="attr">lastName</span>:<span class="built_in">string</span></span>):<span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">name</span>(<span class="string">&#x27;ayase&#x27;</span>, <span class="string">&#x27;miya))</span></span><br></pre></td></tr></table></figure>

<h2 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h2><ul>
<li>ts 接口对数组，对象进行约束</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  约束数组-------------------</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr1</span>: <span class="title class_">Arr</span> = [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>: <span class="title class_">Arr</span> = [<span class="number">123</span>, <span class="string">&quot;bbb&quot;</span>]; <span class="comment">// error</span></span><br><span class="line"><span class="comment">//  约束对象----------------------------</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">obj1</span>: <span class="title class_">Obj</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h2><ul>
<li>ts 对类进行约束</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// implements</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// 必须包含name和eat</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="title class_">Dog</span>(<span class="string">&quot;饭&quot;</span>);</span><br><span class="line">dog.<span class="title function_">eat</span>(); <span class="comment">// 吃饭</span></span><br></pre></td></tr></table></figure>

<h2 id="接口的拓展"><a href="#接口的拓展" class="headerlink" title="接口的拓展"></a>接口的拓展</h2><ul>
<li>接口可以继承接口</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口通过extend继承其他接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person接口约束Web类 Web需要实现Person和Animal的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Web</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;吃&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;干活&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> web = <span class="keyword">new</span> <span class="title class_">Web</span>(<span class="string">&quot;Boku&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习：增删改查</title>
    <url>/posts/5b548bd2/</url>
    <content><![CDATA[<h2 id="插入记录的基本语法"><a href="#插入记录的基本语法" class="headerlink" title="插入记录的基本语法"></a>插入记录的基本语法</h2><h3 id="第一种语法"><a href="#第一种语法" class="headerlink" title="第一种语法"></a>第一种语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;homu&#x27;</span>, <span class="string">&#x27;homuhomu&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>用这种方法插入数据，表中有多少个字段就必须输入多少个值<br>不能多也不能少…<br>若有默认值，不想上传也可以输入 null</p>
<h3 id="第二种语法"><a href="#第二种语法" class="headerlink" title="第二种语法"></a>第二种语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表(字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span>, ...字段n) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ...值n);</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id, username, password, age) <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;akemi&#x27;</span>, <span class="string">&#x27;homuhomu&#x27;</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<p>除非有必填字段需要写入值之外，如果有默认值的不想写可以不写，mysql 会自动补全默认值<br>相比第一种语法，这种更为常用</p>
<h3 id="插入多条记录"><a href="#插入多条记录" class="headerlink" title="插入多条记录"></a>插入多条记录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username, password) <span class="keyword">values</span>(<span class="string">&#x27;homu&#x27;</span>, <span class="string">&#x27;homuhomu&#x27;</span>), (<span class="string">&#x27;akemi&#x27;</span>, <span class="string">&#x27;homuhomu&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line">| id | username | password | age  | mobile      |</span><br><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line">|  1 | akemi    | homuhomu | 11   | 12312312312 |</span><br><span class="line">|  2 | homu     | homuhomu | 12   | 12312312312 |</span><br><span class="line">|  3 | amu      | password | NULL | NULL        |</span><br><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="指定字段查询"><a href="#指定字段查询" class="headerlink" title="指定字段查询"></a>指定字段查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>， <span class="keyword">from</span> 表;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> username, password <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="查询单个字段的不重复记录"><a href="#查询单个字段的不重复记录" class="headerlink" title="查询单个字段的不重复记录"></a>查询单个字段的不重复记录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段 <span class="keyword">from</span> 表;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> username <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from <span class="built_in">users</span>;</span></span><br><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line">| id | username | password | age  | mobile      |</span><br><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line">|  1 | akemi    | homuhomu | 11   | 17612312312 |</span><br><span class="line">|  2 | homu     | homuhomu | 12   | 17612312312 |</span><br><span class="line">|  3 | amu      | password | NULL | NULL        |</span><br><span class="line">|  4 | akemi    | NULL     | NULL | NULL        |</span><br><span class="line">+----+----------+----------+------+-------------+</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> distinct username from <span class="built_in">users</span>;</span></span><br><span class="line">+----------+</span><br><span class="line">| username |</span><br><span class="line">+----------+</span><br><span class="line">| akemi    |</span><br><span class="line">| homu     |</span><br><span class="line">| amu      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<h3 id="使用-where-条件查询"><a href="#使用-where-条件查询" class="headerlink" title="使用 where 条件查询"></a>使用 where 条件查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> age<span class="operator">=</span><span class="number">12</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="where-后面的条件"><a href="#where-后面的条件" class="headerlink" title="where 后面的条件"></a>where 后面的条件</h3><ul>
<li>比较运算符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 大于</span><br><span class="line">&lt; 小于</span><br><span class="line">&gt;=  大于等于</span><br><span class="line">&lt;=  小于等于</span><br><span class="line">!=  不等于</span><br><span class="line">= 等于</span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">or  或</span><br><span class="line">and 且</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure>

<h3 id="排序查询到的结果"><a href="#排序查询到的结果" class="headerlink" title="排序查询到的结果"></a>排序查询到的结果</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">order</span> <span class="keyword">by</span> 排序关键字;</span><br><span class="line"><span class="comment">-- 排序关键字</span></span><br><span class="line"><span class="keyword">asc</span> <span class="comment">-- 升序 从小到大 默认</span></span><br><span class="line"><span class="keyword">desc</span> <span class="comment">-- 降序 从大到小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> age <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>多字段排序<br>在第一个字段两个值相同的情况下，对第二个字段进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序关键字 字段<span class="number">2</span> 排序关键字 字段n 排序关键字;</span><br></pre></td></tr></table></figure>

<h3 id="结果集限制"><a href="#结果集限制" class="headerlink" title="结果集限制"></a>结果集限制</h3><p>对查询后的结果进行限制，只显示其一部分<br>第一条记录为 0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 limit 数量;</span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 limit 起点, 数量;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">0</span>, <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 从第一条开始，查询两条数据</span></span><br></pre></td></tr></table></figure>

<h3 id="统计函数的使用"><a href="#统计函数的使用" class="headerlink" title="统计函数的使用"></a>统计函数的使用</h3><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>sum</td>
<td>求和</td>
</tr>
<tr>
<td>count</td>
<td>统计总数</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>/</td>
<td>其他 sql 函数</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数(字段) <span class="keyword">from</span> 表;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(username) <span class="keyword">from</span>  users;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> count(<span class="built_in">id</span>) from <span class="built_in">users</span>;</span></span><br><span class="line">+-----------+</span><br><span class="line">| count(id) |</span><br><span class="line">+-----------+</span><br><span class="line">|         4 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> count(age) from <span class="built_in">users</span>;</span></span><br><span class="line">+------------+</span><br><span class="line">| count(age) |</span><br><span class="line">+------------+</span><br><span class="line">|          2 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">null不会被计数</span></span><br></pre></td></tr></table></figure>

<h3 id="结果分组"><a href="#结果分组" class="headerlink" title="结果分组"></a>结果分组</h3><p>将筛选出的字段根据某个字段分成组<br>字段 2 中相同的会被视为一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">group</span> <span class="keyword">by</span> 字段<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分组筛选"><a href="#分组筛选" class="headerlink" title="分组筛选"></a>分组筛选</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">group</span> <span class="keyword">by</span> 字段<span class="number">2</span> <span class="keyword">having</span> 条件;</span><br><span class="line"><span class="comment">-- 只显示符合条件的分组</span></span><br></pre></td></tr></table></figure>

<p>和 where 的区别：<br>having 用来筛选组，而 where 用来筛选记录</p>
<h3 id="组合使用-sql"><a href="#组合使用-sql" class="headerlink" title="组合使用 sql"></a>组合使用 sql</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>select</td>
<td>选择的列</td>
</tr>
<tr>
<td>from</td>
<td>表</td>
</tr>
<tr>
<td>where</td>
<td>查询的条件</td>
</tr>
<tr>
<td>group by</td>
<td>根据 having 或字段分组</td>
</tr>
<tr>
<td>having</td>
<td>筛选分组</td>
</tr>
<tr>
<td>order by</td>
<td>排序属性</td>
</tr>
<tr>
<td>limit</td>
<td>限制数量</td>
</tr>
</tbody></table>
<h2 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h2><h3 id="条件删除"><a href="#条件删除" class="headerlink" title="条件删除"></a>条件删除</h3><p><strong>删除表记录的时候一定要加上 where 条件，否则会删除整张表</strong><br><strong>删除重要数据前一定要做备份</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<h3 id="清空表记录"><a href="#清空表记录" class="headerlink" title="清空表记录"></a>清空表记录</h3><p>delete 和 truncate 是类似的<br>但是有一点不同<br>delete 返回被删除的记录的数量<br>truncate 返回 0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表;</span><br><span class="line"><span class="comment">-- 清空表数据，并让自增id从1开始</span></span><br></pre></td></tr></table></figure>

<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表 <span class="keyword">set</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>, 字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>, 字段n<span class="operator">=</span>值n <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> username<span class="operator">=</span><span class="string">&#x27;amurita&#x27;</span>, password<span class="operator">=</span><span class="string">&#x27;yui&#x27;</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>同时更新两张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span>, 表<span class="number">2</span> <span class="keyword">set</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>, 字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>, 字段n<span class="operator">=</span>值n <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">update</span> suki s, users u <span class="keyword">set</span> s.mono<span class="operator">=</span><span class="string">&#x27;www&#x27;</span>, u.username<span class="operator">=</span><span class="string">&#x27;www&#x27;</span> <span class="keyword">where</span> s.id<span class="operator">=</span>u.id;</span><br><span class="line"><span class="comment">-- 将suki和users中 id相同的行的username和mono字段改为www</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习：常用数据字段sql语句</title>
    <url>/posts/e3b80ef8/</url>
    <content><![CDATA[<h2 id="修改表字段类型"><a href="#修改表字段类型" class="headerlink" title="修改表字段类型"></a>修改表字段类型</h2><p>基本语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 字段类型;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 将user表的password类型改为varchar(30)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify password <span class="type">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>查看表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h2><p>基本操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 字段名 类型;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- user表增加age字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">column</span> age <span class="type">int</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>；</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected, 1 warning (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">&lt;!-- mysql&gt; desc user; --&gt;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| age      | int         | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="增加字段时，控制字段顺序"><a href="#增加字段时，控制字段顺序" class="headerlink" title="增加字段时，控制字段顺序"></a>增加字段时，控制字段顺序</h2><p>普通地增加字段，所增加的字段总是在表的最后一列<br>如何增加到指定两个字段之间呢</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型 after 字段名;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 增加sex字段，位于password后面</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> sex <span class="type">int</span>(<span class="number">1</span>) after password;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table user add sex int(1) after password;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.07 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| sex      | int         | YES  |     | NULL    |       |</span><br><span class="line">| age      | int         | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>在表的最前方位置增加一个字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型 <span class="keyword">first</span>;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 增加id字段，在最前面</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table user add id int(10) first;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.06 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| id       | int         | YES  |     | NULL    |       |</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| sex      | int         | YES  |     | NULL    |       |</span><br><span class="line">| age      | int         | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h2><p>基本用法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 字段名；</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 删除sex字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">column</span> sex;</span><br></pre></td></tr></table></figure>

<h2 id="表字段改名"><a href="#表字段改名" class="headerlink" title="表字段改名"></a>表字段改名</h2><p>基本用法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 字段原名 字段新名 字段类型;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> email <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> change email mobile <span class="type">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h2 id="调整字段顺序"><a href="#调整字段顺序" class="headerlink" title="调整字段顺序"></a>调整字段顺序</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 类型 <span class="keyword">first</span>;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify mobile <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">first</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify age <span class="type">varchar</span>(<span class="number">20</span>) after password;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify mobile <span class="type">varchar</span>(<span class="number">30</span>) after age;</span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| id       | int         | YES  |     | NULL    |       |</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| age      | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| mobile   | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习：常用数据表sql语句-1</title>
    <url>/posts/86169/</url>
    <content><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>基本语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段<span class="number">1</span> 字段类型, 字段<span class="number">2</span> 字段类型, ...字段n 字段类型);</span><br><span class="line"><span class="comment">-- 示例：创建一个user表，有username和password两个字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(username <span class="type">varchar</span>(<span class="number">20</span>), password <span class="type">varchar</span>(<span class="number">20</span>));</span><br></pre></td></tr></table></figure>

<p>关于数据类型的知识，会在后面记录</p>
<h2 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h2><p>基本用法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名；</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| username | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| password | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h2><p>基本用法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名 \G;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> \G;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: user</span><br><span class="line">Create Table: CREATE TABLE `user` (</span><br><span class="line">  `username` varchar(20) DEFAULT NULL,</span><br><span class="line">  `password` varchar(20) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>上面表的创建 SQL 语句中，除了可以看到表定义以外，还可以看到表的 engine（存储引擎) 和 charset(字符集)等信息。“\G”选项的含义是使得记录能够按照字段竖着排列，对于内 容比较长的记录更易于显示。</p>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>基本用法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>

<p>删除表。表和数据均会丢失，请勿必删除重要表之前备份数据</p>
<h2 id="指定表引擎和字符集"><a href="#指定表引擎和字符集" class="headerlink" title="指定表引擎和字符集"></a>指定表引擎和字符集</h2><p>创建表的最后，我们常用 MyISAM 或者 InnoDB 引擎<br>指定引擎时，我们可以用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENGINE=InnoDB</span><br></pre></td></tr></table></figure>

<p>指定表默认字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testEngine(id <span class="type">int</span>(<span class="number">10</span>)) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- Query OK, 0 rows affected, 2 warnings (0.00 sec)</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> testEngine \G;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: testEngine</span><br><span class="line">Create Table: CREATE TABLE `testEngine` (</span><br><span class="line">  `id` int DEFAULT NULL</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>删除这个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> testEngine;</span><br></pre></td></tr></table></figure>

<h2 id="重命名数据表"><a href="#重命名数据表" class="headerlink" title="重命名数据表"></a>重命名数据表</h2><p>基本操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename 新表名;</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 将表名user改为users</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> rename users;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tablse;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;tablse&#x27; at line 1</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_study |</span><br><span class="line">+-----------------+</span><br><span class="line">| users           |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习：数据类型</title>
    <url>/posts/55809767/</url>
    <content><![CDATA[<blockquote>
<p>MySQL 中存的是数据。只要是数据，我们就会规定数据的类型。<br>在表的字段中规定了使用的是某个数据类型。那么，在插入的数据中就要使用对应的数据类型。并且，遵守数据类型的长度要求。</p>
</blockquote>
<h2 id="所有数据类型"><a href="#所有数据类型" class="headerlink" title="所有数据类型"></a>所有数据类型</h2><ul>
<li>数值类型<ul>
<li>整型</li>
<li>浮点型</li>
</ul>
</li>
<li>字符串类型</li>
<li>日期时间类型</li>
<li>复合类型</li>
<li>空间类型（用的不多）</li>
</ul>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table>
<thead>
<tr>
<th>MySQL 数据类型</th>
<th>所占字节</th>
<th>值范围</th>
</tr>
</thead>
<tbody><tr>
<td>tinyint</td>
<td>1 字节</td>
<td>-127~128</td>
</tr>
<tr>
<td>smallint</td>
<td>2 字节</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>mediumint</td>
<td>3 字节</td>
<td>-8388608~8388607</td>
</tr>
<tr>
<td>int</td>
<td>4 字节</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>bigint</td>
<td>5 字节</td>
<td>+-9.22*10 的 18 次方</td>
</tr>
</tbody></table>
<p>整型长度不同，在实际使用过程也不同</p>
<blockquote>
<p>MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。例如，指定一个字段的类型为 INT(6)，就可以保证所包含数字少于 6 个的值从数据库中检索出来时能够自动地用空格填充。需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。</p>
</blockquote>
<p>在实际使用中，性别我们可以使用无符号的 tinyint 来存储<br>同样人的年龄也可以，因为年龄没有负数<br>创建数据表的时候，需要根据实际需求来确定用什么类型</p>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><table>
<thead>
<tr>
<th>MySQL 数据类型</th>
<th>所占字节</th>
<th>值范围</th>
</tr>
</thead>
<tbody><tr>
<td>float(m, d)</td>
<td>4 字节</td>
<td>单精度浮点型，m 总个数，d 小数位</td>
</tr>
<tr>
<td>double(m, d)</td>
<td>8 字节</td>
<td>双精度浮点型，m 总个数，d 小数位</td>
</tr>
<tr>
<td>decimal(m, d)</td>
<td></td>
<td>decimal 是存储为字符串的浮点数</td>
</tr>
</tbody></table>
<p>浮点是非准确值，会存在不太准确的情况<br>decimal 叫做定点数，在 MySQL 内部，本质是用字符串存储的。使用过程中如果存在金额之类精度要求比较高的浮点数存储，建议使用 decimal 类型</p>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><table>
<thead>
<tr>
<th>MySQL 数据类型</th>
<th>所占字节</th>
<th>值范围</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>0-255 字节</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-255 字节</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-255 字节</td>
<td>不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-255 字节</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>0-65535 字节</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65535 字节</td>
<td>长文本数据</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-16 777 215 字节</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-16 777 215 字节</td>
<td>中等长度文本数据</td>
</tr>
<tr>
<td>LOGNGBLOB</td>
<td>0-4 294 967 295 字节</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-4 294 967 295 字节</td>
<td>极大文本数据</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>允许长度 0-M 个字节的定长字节符串</td>
<td>值的长度+1 个字节</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>M</td>
<td>允许长度 0-M 个字节的定长字节符串</td>
</tr>
</tbody></table>
<ul>
<li><p>CHAR 与 VARCHAR</p>
<blockquote>
<p>CHAR 类型用于定长字符串，并且必须在圆括号内用一个大小修饰符来定义，这个大小修饰符的范围从 0-255。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。</p>
</blockquote>
<blockquote>
<p>VARCHAR 把这个大小视为值的大小，在长度不足的情况下就用空格补足。而 VARCHAR 类型把它视为最大值并且只使用存储字符串实际需要的长度类型不会被空格填补，但长于指示器的值仍然会被截短。因为 VARCHAR 类型可以根据实际内容动态改变存储值的长度，所以在不能确定字段需要多少字符时使用 VARCHAR 类型可以大大地节约磁盘空间、提高存储效率。</p>
</blockquote>
</li>
<li><p>TEXT 与 BLOB</p>
<blockquote>
<p>text 类型与 blob 类型对于字段长度要求超过 255 个的情况下，MySQL 提供了 TEXT 和 BLOB 两种类型。根据存储数据的大小，它们都有不同的子类型。这些大型的数据用于存储文本块或图像、声音文件等二进制数据类型。TEXT 和 BLOB 类型在分类和比较上存在区别。<strong>BLOB 类型区分大小写</strong>，<strong>而 TEXT 不区分大小写</strong>。_大小修饰符不用于各种 BLOB 和 TEXT 子类型_。</p>
</blockquote>
</li>
</ul>
<h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><table>
<thead>
<tr>
<th>MySQL 数据类型</th>
<th>所占字节</th>
<th>值范围</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>3 字节</td>
<td>日期，格式：2014-09-18</td>
</tr>
<tr>
<td>time</td>
<td>3 字节</td>
<td>时间，格式：08:42:30</td>
</tr>
<tr>
<td>datetime</td>
<td>8 字节</td>
<td>日期时间，格式：2014-09-18 08:42:30</td>
</tr>
<tr>
<td>timestamp</td>
<td>4 字节</td>
<td>自动存储记录修改的时间</td>
</tr>
<tr>
<td>year</td>
<td>1 字节</td>
<td>年份</td>
</tr>
</tbody></table>
<blockquote>
<p>时间类型在 web 系统中用的比较少，很多时候很多人喜欢使用 int 来存储时间。插入时插入的是 unix 时间戳，因为这种方式更方便计算。在前端业务中用 date 类型的函数，再将<strong>unix 时间戳转成人们可识别的时间</strong>。</p>
</blockquote>
<blockquote>
<p>有些人为了在数据库管理中方便查看，也有人使用 datetime 类型来存储时间。</p>
</blockquote>
<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><table>
<thead>
<tr>
<th>MySQL 数据类型</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>set</td>
<td>集合类型</td>
<td>set(“member”, “member2″, … “member64″)</td>
</tr>
<tr>
<td>enum</td>
<td>枚举类型</td>
<td>enum(“member1″, “member2″, … “member65535″)</td>
</tr>
</tbody></table>
<ul>
<li><p>ENUM</p>
<blockquote>
<p>一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。</p>
</blockquote>
<blockquote>
<p>ENUM 类型因为<strong>只允许在集合中取得一个值</strong>，有点类似于单选项。在处理相互排拆的数据时容易让人理解，比如人类的性别。ENUM 类型字段可以从集合中取得一个值或使用 null 值，除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。另外如果插入值的大小写与集合中值的大小写不匹配，MySQL 会自动使用插入值的大小写转换成与集合中大小写一致的值。</p>
</blockquote>
<blockquote>
<p>ENUM 类型在系统内部可以存储为数字，<strong>并且从 1 开始用数字做索引</strong>。一个 ENUM 类型最多可以包含 65536 个元素，其中一个元素被 MySQL 保留，用来存储错误信息，这个错误值用索引 0 或者一个空字符串表示。</p>
</blockquote>
<blockquote>
<p>MySQL 认为 ENUM 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。这说明通过搜索包含空字符串或对应数字索引为 0 的行就可以很容易地找到错误记录的位置</p>
</blockquote>
</li>
<li><p>SET</p>
<blockquote>
<p>SET 类型与 ENUM 类型相似但不相同。SET 类型可以从预定义的集合中取得任意数量的值。并且与 ENUM 类型相同的是任何试图在 SET 类型字段中插入非预定义的值都会使 MySQL 插入一个空字符串。如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。</p>
</blockquote>
<blockquote>
<p>一个 SET 类型最多可以包含 64 个元素。在 SET 元素中值被存储为一个分离的“位”序列，这些“位”表示与它相对应的元素。“位”是创建有序元素集合的一种简单而有效的方式。并且它还去除了重复的元素，所以**<em>SET 类型中不可能包含两个相同的元素</em><strong>。</strong>希望从 SET 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 0 的行。**</p>
</blockquote>
</li>
</ul>
<h2 id="使用类型"><a href="#使用类型" class="headerlink" title="使用类型"></a>使用类型</h2><p>在字段名后面跟上类型即可使用，例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  content longtext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  create_at datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex tinyint(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<h2 id="字段其他属性"><a href="#字段其他属性" class="headerlink" title="字段其他属性"></a>字段其他属性</h2><h3 id="UNSIGNED（无符号）"><a href="#UNSIGNED（无符号）" class="headerlink" title="UNSIGNED（无符号）"></a>UNSIGNED（无符号）</h3><p>主要用于整型和浮点类型，使用无符号。即，没有前面面的-（负号）。存储位数更长。<br>tinyint 整型的取值区间为，-128~127。而使用无符号后可存储 0-255 个长度。<br>创建时，在整型或浮点型字段语句后接上</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unsigned</span><br></pre></td></tr></table></figure>

<h3 id="ZEROFILL（0-填充）"><a href="#ZEROFILL（0-填充）" class="headerlink" title="ZEROFILL（0 填充）"></a>ZEROFILL（0 填充）</h3><p>0（不是空格）可以用来真补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。<br>创建时在整型或浮点字段语句后接上：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">zerofill</span><br></pre></td></tr></table></figure>

<h3 id="default（默认值）"><a href="#default（默认值）" class="headerlink" title="default（默认值）"></a>default（默认值）</h3><p>default 属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为 MySQL 不允许插入函数或表达式值。此外，此属性无法用于 BLOB 或 TEXT 列。如果已经为此列指定了 NULL 属性，没有指定默认值时默认值将为 NULL，否则默认值将依赖于字段的数据类型。<br>用法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">defalut <span class="string">&#x27;默认值&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="NOT-NULL（不能为-null）"><a href="#NOT-NULL（不能为-null）" class="headerlink" title="NOT NULL（不能为 null）"></a>NOT NULL（不能为 null）</h3><p>如果将一个列定义为 not null，将不允许向该列插入 null 值。建议在重要情况下始终使用 not null 属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null 为列指定 null 属性时，该列可以保持为空，而不论行中其它列是否已经被填充。记住，null 精确的说法是“无”，而不是空字符串或 0。<br>声明的时候不是<code>not null</code>即可</p>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习：索引</title>
    <url>/posts/76a4ac1e/</url>
    <content><![CDATA[<h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><p>索引用于快速找出某个列中有特定值的一行<br>不适用索引，Mysql 必须从第一条记录开始，读完整个表直到找出相关的行。<br>表越大，花费时间越多。<br>如果表中查询的列有一个索引，Mysql 能快速到达一个位置去搜寻到数据文件的中间，没有必要读取所有的数据</p>
<blockquote>
<p>但是索引也不宜过多，索引越多，写入和修改的速度就越慢。写入修改数据时，索引也会修改</p>
</blockquote>
<h2 id="Mysql-索引类型"><a href="#Mysql-索引类型" class="headerlink" title="Mysql 索引类型"></a>Mysql 索引类型</h2><table>
<thead>
<tr>
<th>索引类型</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>普通索引</td>
<td>最基本的索引，没有任何限制</td>
</tr>
<tr>
<td>唯一索引</td>
<td>某一行启用了唯一索引，则不允许这一列行数据中有重复的值，针对这一列的每一行数据都要求是唯一的</td>
</tr>
<tr>
<td>主键索引</td>
<td>这是一种特殊索引，不允许有空值，一般在建表的时候同时创建主键索引，常用于用户 ID</td>
</tr>
<tr>
<td>全文索引</td>
<td>对于需要全局搜索的数据，进行全文索引</td>
</tr>
</tbody></table>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>为表的某字段添加索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> index(字段);</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> users <span class="keyword">add</span> index(username);</span><br><span class="line"><span class="comment">-- 给users表中的username字段添加索引</span></span><br></pre></td></tr></table></figure>

<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> <span class="keyword">unique</span>(字段);</span><br></pre></td></tr></table></figure>

<h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> fulltext(字段);</span><br></pre></td></tr></table></figure>

<h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段);</span><br></pre></td></tr></table></figure>

<h2 id="创建表的时候声明索引"><a href="#创建表的时候声明索引" class="headerlink" title="创建表的时候声明索引"></a>创建表的时候声明索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表(字段 数据类型, 字段 数据类型, <span class="keyword">primary</span> key(字段), index(字段), <span class="keyword">unique</span>(字段), fulltext(字段));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
